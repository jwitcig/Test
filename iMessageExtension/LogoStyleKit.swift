//
//  LogoStyleKit.swift
//  MrPutt
//
//  Created by KTJW on 1/15/17.
//  Copyright Â© 2017 KTJW. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class LogoStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawLogoMaster(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 768), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 768), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 768)


        //// Color Declarations
        let gradient2Color = UIColor(red: 0.115, green: 0.115, blue: 0.115, alpha: 1.000)
        let gradient2Color2 = UIColor(red: 0.508, green: 0.508, blue: 0.508, alpha: 1.000)

        //// Gradient Declarations
        let gradient2 = CGGradient(colorsSpace: nil, colors: [gradient2Color2.cgColor, gradient2Color.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1024, height: 768))
        context.saveGState()
        rectanglePath.addClip()
        context.drawRadialGradient(gradient2,
            startCenter: CGPoint(x: 500.7, y: 543.3), startRadius: 52.8,
            endCenter: CGPoint(x: 499.46, y: 251.97), endRadius: 714.51,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 0, y: -100)

        let symbolRect = CGRect(x: 0, y: -803, width: 1024, height: 848)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.drawCanvas1(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 160, y: 64, width: 704, height: 704)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        LogoStyleKit.drawCanvas1(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_1024x768(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 768), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 768), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 768)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 1024, height: 768)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.drawLogoMaster(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_32x24(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 24)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 24)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.draw_60x45(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_27x20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 27, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 20)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 27, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.draw_32x24(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_67x50(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 67, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 67, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 67, y: resizedFrame.height / 50)


        //// Symbol Drawing
        let symbolRect = CGRect(x: -1, y: 0, width: 69, height: 50)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.draw_76x55(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_76x55(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 76, height: 55), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 76, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 76, y: resizedFrame.height / 55)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: -1.5, width: 76, height: 58)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.drawLogoMaster(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_60x45(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 45), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 45)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 60, height: 45)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.draw_67x50(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_40x40(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Symbol Drawing
        let symbolRect = CGRect(x: -6, y: 1, width: 52, height: 37)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.draw_76x55(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_60x60(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// copy Drawing
        let copyRect = CGRect(x: 0, y: 0, width: 60, height: 60)
        context.saveGState()
        context.clip(to: copyRect)
        context.translateBy(x: copyRect.minX, y: copyRect.minY)

        LogoStyleKit.draw_40x40(frame: CGRect(origin: .zero, size: copyRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_76x76(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 76, height: 76), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 76, height: 76), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 76, y: resizedFrame.height / 76)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 76, height: 76)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.draw_60x60(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func draw_835x835(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 167, height: 167), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 167, height: 167), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 167, y: resizedFrame.height / 167)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 167, height: 167)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.draw_76x76(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawWaitingForOpponent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1757, height: 1137), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1757, height: 1137), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1757, y: resizedFrame.height / 1137)


        //// Color Declarations
        let gradient4Color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradient4Color2 = UIColor(red: 0.760, green: 0.760, blue: 0.760, alpha: 1.000)

        //// Gradient Declarations
        let gradient4 = CGGradient(colorsSpace: nil, colors: [gradient4Color.cgColor, gradient4Color2.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: -11, width: 1757, height: 1148))
        context.saveGState()
        rectanglePath.addClip()
        context.drawRadialGradient(gradient4,
            startCenter: CGPoint(x: 859.98, y: 824.2), startRadius: 86.58,
            endCenter: CGPoint(x: 857.94, y: 346.51), endRadius: 987.47,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 0, y: -100)

        let symbolRect = CGRect(x: 155, y: -1008, width: 1461, height: 827)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.drawCanvas2(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLogoForCollapsedViewController(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 811), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 811), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 811)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 1024, resizedFrame.height / 811)


        //// Color Declarations
        let gradientColor = UIColor(red: 0.196, green: 0.651, blue: 0.988, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.111, green: 0.449, blue: 0.700, alpha: 1.000)
        let color8 = UIColor(red: 0.367, green: 0.800, blue: 0.320, alpha: 1.000)
        let color9 = UIColor(red: 0.296, green: 0.702, blue: 0.256, alpha: 1.000)
        let color10 = UIColor(red: 0.456, green: 0.870, blue: 0.414, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.27)
        shadow.shadowOffset = CGSize(width: 0, height: 230)
        shadow.shadowBlurRadius = 49

        //// Group
        //// Oval 13 Drawing
        let oval13Path = UIBezierPath(ovalIn: CGRect(x: 285, y: 432, width: 411, height: 82))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        oval13Path.fill()
        context.restoreGState()



        //// Oval 14 Drawing
        let oval14Path = UIBezierPath(ovalIn: CGRect(x: 379, y: 441, width: 222, height: 57))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        oval14Path.fill()
        context.restoreGState()





        //// MainGolfBall Drawing
        let mainGolfBallPath = UIBezierPath()
        mainGolfBallPath.move(to: CGPoint(x: 773, y: 382.5))
        mainGolfBallPath.addCurve(to: CGPoint(x: 736.66, y: 521.47), controlPoint1: CGPoint(x: 773, y: 432.99), controlPoint2: CGPoint(x: 759.8, y: 480.4))
        mainGolfBallPath.addCurve(to: CGPoint(x: 874, y: 563), controlPoint1: CGPoint(x: 754.07, y: 537.14), controlPoint2: CGPoint(x: 804.45, y: 574.99))
        mainGolfBallPath.addCurve(to: CGPoint(x: 600.16, y: 643.59), controlPoint1: CGPoint(x: 869.07, y: 595.53), controlPoint2: CGPoint(x: 783.5, y: 685))
        mainGolfBallPath.addCurve(to: CGPoint(x: 489.5, y: 666), controlPoint1: CGPoint(x: 568.5, y: 660.5), controlPoint2: CGPoint(x: 528.76, y: 666))
        mainGolfBallPath.addCurve(to: CGPoint(x: 206, y: 382.5), controlPoint1: CGPoint(x: 332.93, y: 666), controlPoint2: CGPoint(x: 206, y: 539.07))
        mainGolfBallPath.addCurve(to: CGPoint(x: 317.38, y: 157.21), controlPoint1: CGPoint(x: 206, y: 290.66), controlPoint2: CGPoint(x: 249.67, y: 209.02))
        mainGolfBallPath.addCurve(to: CGPoint(x: 489.5, y: 99), controlPoint1: CGPoint(x: 365.1, y: 120.7), controlPoint2: CGPoint(x: 424.77, y: 99))
        mainGolfBallPath.addCurve(to: CGPoint(x: 773, y: 382.5), controlPoint1: CGPoint(x: 646.07, y: 99), controlPoint2: CGPoint(x: 773, y: 225.93))
        mainGolfBallPath.close()
        context.saveGState()
        mainGolfBallPath.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: 518.26, y: 315.61),
            end: CGPoint(x: 525.79, y: 600.44),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Countries
        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 286.39, y: 383.36))
        bezier7Path.addCurve(to: CGPoint(x: 379.66, y: 372.51), controlPoint1: CGPoint(x: 293.77, y: 338.43), controlPoint2: CGPoint(x: 362.12, y: 343.08))
        bezier7Path.addCurve(to: CGPoint(x: 433.23, y: 456.94), controlPoint1: CGPoint(x: 397.21, y: 401.95), controlPoint2: CGPoint(x: 383.36, y: 456.94))
        bezier7Path.addCurve(to: CGPoint(x: 535.75, y: 481.73), controlPoint1: CGPoint(x: 483.1, y: 456.94), controlPoint2: CGPoint(x: 550.52, y: 456.94))
        bezier7Path.addCurve(to: CGPoint(x: 647.5, y: 508.84), controlPoint1: CGPoint(x: 520.97, y: 506.52), controlPoint2: CGPoint(x: 595.78, y: 534.4))
        bezier7Path.addCurve(to: CGPoint(x: 749.09, y: 383.36), controlPoint1: CGPoint(x: 699.21, y: 483.28), controlPoint2: CGPoint(x: 728.77, y: 344.63))
        bezier7Path.addCurve(to: CGPoint(x: 712.14, y: 521.23), controlPoint1: CGPoint(x: 769.41, y: 422.09), controlPoint2: CGPoint(x: 732.46, y: 494.12))
        bezier7Path.addCurve(to: CGPoint(x: 550.52, y: 589.4), controlPoint1: CGPoint(x: 691.83, y: 548.34), controlPoint2: CGPoint(x: 581, y: 617.28))
        bezier7Path.addCurve(to: CGPoint(x: 460.94, y: 573.13), controlPoint1: CGPoint(x: 520.04, y: 561.51), controlPoint2: CGPoint(x: 460.94, y: 590.17))
        bezier7Path.addCurve(to: CGPoint(x: 433.23, y: 528.98), controlPoint1: CGPoint(x: 460.94, y: 556.09), controlPoint2: CGPoint(x: 568.99, y: 531.3))
        bezier7Path.addCurve(to: CGPoint(x: 286.39, y: 383.36), controlPoint1: CGPoint(x: 297.47, y: 526.66), controlPoint2: CGPoint(x: 279, y: 428.28))
        bezier7Path.close()
        color9.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        context.saveGState()
        context.translateBy(x: 205.95, y: 213.08)
        context.rotate(by: -22.58 * CGFloat.pi/180)

        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 111.55, y: 12.42))
        bezier8Path.addCurve(to: CGPoint(x: 296.55, y: 29.42), controlPoint1: CGPoint(x: 182.3, y: -4.58), controlPoint2: CGPoint(x: 296.55, y: -8.58))
        bezier8Path.addCurve(to: CGPoint(x: 146.55, y: 46.42), controlPoint1: CGPoint(x: 296.55, y: 67.42), controlPoint2: CGPoint(x: 181.55, y: 34.42))
        bezier8Path.addCurve(to: CGPoint(x: 13.55, y: 97.42), controlPoint1: CGPoint(x: 111.55, y: 58.42), controlPoint2: CGPoint(x: 57.55, y: 91.42))
        bezier8Path.addCurve(to: CGPoint(x: 111.55, y: 12.42), controlPoint1: CGPoint(x: -30.45, y: 103.42), controlPoint2: CGPoint(x: 40.8, y: 29.42))
        bezier8Path.close()
        color10.setFill()
        bezier8Path.fill()

        context.restoreGState()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 634.07, y: 217))
        bezier9Path.addCurve(to: CGPoint(x: 716.67, y: 212.86), controlPoint1: CGPoint(x: 634.07, y: 235.09), controlPoint2: CGPoint(x: 681.99, y: 213.8))
        bezier9Path.addCurve(to: CGPoint(x: 757.53, y: 289.91), controlPoint1: CGPoint(x: 734.01, y: 236.06), controlPoint2: CGPoint(x: 747.89, y: 261.99))
        bezier9Path.addCurve(to: CGPoint(x: 739.26, y: 301.73), controlPoint1: CGPoint(x: 747.41, y: 289.5), controlPoint2: CGPoint(x: 739.26, y: 291.56))
        bezier9Path.addCurve(to: CGPoint(x: 682.52, y: 415.52), controlPoint1: CGPoint(x: 739.26, y: 328.59), controlPoint2: CGPoint(x: 682.52, y: 373.12))
        bezier9Path.addCurve(to: CGPoint(x: 613.49, y: 415.52), controlPoint1: CGPoint(x: 682.52, y: 457.93), controlPoint2: CGPoint(x: 621.42, y: 439.88))
        bezier9Path.addCurve(to: CGPoint(x: 604.21, y: 409.67), controlPoint1: CGPoint(x: 613.49, y: 415.52), controlPoint2: CGPoint(x: 609.35, y: 412.91))
        bezier9Path.addCurve(to: CGPoint(x: 584.73, y: 397.38), controlPoint1: CGPoint(x: 595.8, y: 404.37), controlPoint2: CGPoint(x: 584.73, y: 397.38))
        bezier9Path.addCurve(to: CGPoint(x: 566.03, y: 383.79), controlPoint1: CGPoint(x: 584.73, y: 397.38), controlPoint2: CGPoint(x: 579.7, y: 394.61))
        bezier9Path.addCurve(to: CGPoint(x: 552.96, y: 373.12), controlPoint1: CGPoint(x: 562.33, y: 380.86), controlPoint2: CGPoint(x: 558, y: 377.33))
        bezier9Path.addCurve(to: CGPoint(x: 538.27, y: 364.96), controlPoint1: CGPoint(x: 547.42, y: 368.48), controlPoint2: CGPoint(x: 542.65, y: 366.01))
        bezier9Path.addCurve(to: CGPoint(x: 493.39, y: 373.12), controlPoint1: CGPoint(x: 523.95, y: 361.52), controlPoint2: CGPoint(x: 513.65, y: 373.12))
        bezier9Path.addCurve(to: CGPoint(x: 438.54, y: 340.61), controlPoint1: CGPoint(x: 466.91, y: 373.12), controlPoint2: CGPoint(x: 438.54, y: 352.62))
        bezier9Path.addCurve(to: CGPoint(x: 413.95, y: 301.73), controlPoint1: CGPoint(x: 438.54, y: 328.59), controlPoint2: CGPoint(x: 433.81, y: 301.73))
        bezier9Path.addCurve(to: CGPoint(x: 356.26, y: 267.81), controlPoint1: CGPoint(x: 394.09, y: 301.73), controlPoint2: CGPoint(x: 336.41, y: 289.01))
        bezier9Path.addCurve(to: CGPoint(x: 377.41, y: 255.9), controlPoint1: CGPoint(x: 360.5, y: 263.29), controlPoint2: CGPoint(x: 367.99, y: 259.42))
        bezier9Path.addCurve(to: CGPoint(x: 493.39, y: 216.92), controlPoint1: CGPoint(x: 412.21, y: 242.89), controlPoint2: CGPoint(x: 473.29, y: 234.72))
        bezier9Path.addCurve(to: CGPoint(x: 634.07, y: 217), controlPoint1: CGPoint(x: 518.92, y: 194.31), controlPoint2: CGPoint(x: 634.07, y: 194.38))
        bezier9Path.close()
        color8.setFill()
        bezier9Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSmallView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)


        //// Symbol Drawing
        let symbolRect = CGRect(x: -77, y: -33, width: 437, height: 346)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.drawLogoForCollapsedViewController(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawShader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 720, height: 676), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 720, height: 676), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 720, y: resizedFrame.height / 676)



        //// Image Declarations
        let final3 = UIImage(named: "final3.png")!

        //// Picture 2 Drawing
        let picture2Path = UIBezierPath(rect: CGRect(x: 78, y: 63, width: 550, height: 550))
        context.saveGState()
        picture2Path.addClip()
        final3.draw(in: CGRect(x: 78, y: 63, width: final3.size.width, height: final3.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 704, height: 704), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 704, height: 704), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 704, y: resizedFrame.height / 704)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 704, resizedFrame.height / 704)


        //// Color Declarations
        let color = UIColor(red: 0.196, green: 0.651, blue: 0.988, alpha: 1.000)
        let gradientColor = UIColor(red: 0.196, green: 0.651, blue: 0.988, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.111, green: 0.449, blue: 0.700, alpha: 1.000)
        let color3 = UIColor(red: 0.466, green: 0.773, blue: 1.000, alpha: 1.000)
        let color4 = UIColor(red: 0.843, green: 0.933, blue: 1.000, alpha: 1.000)
        let color5 = UIColor(red: 0.545, green: 0.771, blue: 0.940, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.27)
        shadow.shadowOffset = CGSize(width: 0, height: 230)
        shadow.shadowBlurRadius = 49

        //// Group
        //// Oval 13 Drawing
        let oval13Path = UIBezierPath(ovalIn: CGRect(x: 111, y: 353, width: 411, height: 82))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        oval13Path.fill()
        context.restoreGState()



        //// Oval 14 Drawing
        let oval14Path = UIBezierPath(ovalIn: CGRect(x: 205, y: 362, width: 222, height: 57))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        oval14Path.fill()
        context.restoreGState()





        //// MainGolfBall Drawing
        let mainGolfBallPath = UIBezierPath()
        mainGolfBallPath.move(to: CGPoint(x: 598, y: 303.5))
        mainGolfBallPath.addCurve(to: CGPoint(x: 561.66, y: 442.47), controlPoint1: CGPoint(x: 598, y: 353.99), controlPoint2: CGPoint(x: 584.8, y: 401.4))
        mainGolfBallPath.addCurve(to: CGPoint(x: 699, y: 484), controlPoint1: CGPoint(x: 579.07, y: 458.14), controlPoint2: CGPoint(x: 629.45, y: 495.99))
        mainGolfBallPath.addCurve(to: CGPoint(x: 425.16, y: 564.59), controlPoint1: CGPoint(x: 694.07, y: 516.53), controlPoint2: CGPoint(x: 608.5, y: 606))
        mainGolfBallPath.addCurve(to: CGPoint(x: 314.5, y: 587), controlPoint1: CGPoint(x: 393.5, y: 581.5), controlPoint2: CGPoint(x: 353.76, y: 587))
        mainGolfBallPath.addCurve(to: CGPoint(x: 31, y: 303.5), controlPoint1: CGPoint(x: 157.93, y: 587), controlPoint2: CGPoint(x: 31, y: 460.07))
        mainGolfBallPath.addCurve(to: CGPoint(x: 142.38, y: 78.21), controlPoint1: CGPoint(x: 31, y: 211.66), controlPoint2: CGPoint(x: 74.67, y: 130.02))
        mainGolfBallPath.addCurve(to: CGPoint(x: 314.5, y: 20), controlPoint1: CGPoint(x: 190.1, y: 41.7), controlPoint2: CGPoint(x: 249.77, y: 20))
        mainGolfBallPath.addCurve(to: CGPoint(x: 598, y: 303.5), controlPoint1: CGPoint(x: 471.07, y: 20), controlPoint2: CGPoint(x: 598, y: 146.93))
        mainGolfBallPath.close()
        context.saveGState()
        mainGolfBallPath.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: 343.26, y: 236.61),
            end: CGPoint(x: 350.79, y: 521.44),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Highlights
        //// UpperHighlight Drawing
        let upperHighlightPath = UIBezierPath()
        upperHighlightPath.move(to: CGPoint(x: 101.5, y: 290.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 145.5, y: 147.5), controlPoint1: CGPoint(x: 92.5, y: 288.5), controlPoint2: CGPoint(x: 71.5, y: 226.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 334.5, y: 75.5), controlPoint1: CGPoint(x: 219.5, y: 68.5), controlPoint2: CGPoint(x: 308.5, y: 73.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 522.5, y: 208.5), controlPoint1: CGPoint(x: 360.5, y: 77.5), controlPoint2: CGPoint(x: 479.5, y: 98.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 505.5, y: 231.5), controlPoint1: CGPoint(x: 528.5, y: 238.5), controlPoint2: CGPoint(x: 507.5, y: 231.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 466.5, y: 225.5), controlPoint1: CGPoint(x: 503.5, y: 231.5), controlPoint2: CGPoint(x: 486.5, y: 219.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 444.5, y: 290.5), controlPoint1: CGPoint(x: 444.9, y: 231.98), controlPoint2: CGPoint(x: 457.74, y: 283.88))
        upperHighlightPath.addCurve(to: CGPoint(x: 388.5, y: 304.5), controlPoint1: CGPoint(x: 433.5, y: 300), controlPoint2: CGPoint(x: 413.5, y: 280.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 363.5, y: 367.5), controlPoint1: CGPoint(x: 363.5, y: 328.5), controlPoint2: CGPoint(x: 376.5, y: 359.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 323.5, y: 367.5), controlPoint1: CGPoint(x: 350.5, y: 375.5), controlPoint2: CGPoint(x: 338.5, y: 364.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 289.5, y: 380.5), controlPoint1: CGPoint(x: 308.5, y: 370.5), controlPoint2: CGPoint(x: 302.5, y: 380.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 236.5, y: 326.5), controlPoint1: CGPoint(x: 276.5, y: 380.5), controlPoint2: CGPoint(x: 261.5, y: 335.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 181.5, y: 329.5), controlPoint1: CGPoint(x: 211.5, y: 317.5), controlPoint2: CGPoint(x: 191.5, y: 335.5))
        upperHighlightPath.addCurve(to: CGPoint(x: 145.5, y: 277.5), controlPoint1: CGPoint(x: 159.5, y: 317.5), controlPoint2: CGPoint(x: 188, y: 306))
        upperHighlightPath.addCurve(to: CGPoint(x: 101.5, y: 290.5), controlPoint1: CGPoint(x: 118.5, y: 276), controlPoint2: CGPoint(x: 114, y: 296))
        upperHighlightPath.close()
        color4.setFill()
        upperHighlightPath.fill()


        //// TopOvals
        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 371, y: 430))
        ovalPath.addCurve(to: CGPoint(x: 323, y: 459), controlPoint1: CGPoint(x: 371, y: 444.08), controlPoint2: CGPoint(x: 352, y: 459))
        ovalPath.addCurve(to: CGPoint(x: 286, y: 430), controlPoint1: CGPoint(x: 294, y: 459), controlPoint2: CGPoint(x: 286, y: 444.08))
        ovalPath.addCurve(to: CGPoint(x: 329.5, y: 405), controlPoint1: CGPoint(x: 286, y: 415.92), controlPoint2: CGPoint(x: 307.13, y: 405))
        ovalPath.addCurve(to: CGPoint(x: 371, y: 430), controlPoint1: CGPoint(x: 351.87, y: 405), controlPoint2: CGPoint(x: 371, y: 415.92))
        ovalPath.close()
        color5.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 371, y: 378.26)
        context.rotate(by: -47.13 * CGFloat.pi/180)

        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 85, y: 25))
        oval2Path.addCurve(to: CGPoint(x: 37, y: 54), controlPoint1: CGPoint(x: 85, y: 39.08), controlPoint2: CGPoint(x: 66, y: 54))
        oval2Path.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 8, y: 54), controlPoint2: CGPoint(x: 0, y: 39.08))
        oval2Path.addCurve(to: CGPoint(x: 43.5, y: 0), controlPoint1: CGPoint(x: 0, y: 10.92), controlPoint2: CGPoint(x: 21.13, y: 0))
        oval2Path.addCurve(to: CGPoint(x: 85, y: 25), controlPoint1: CGPoint(x: 65.87, y: 0), controlPoint2: CGPoint(x: 85, y: 10.92))
        oval2Path.close()
        color5.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        context.saveGState()
        context.translateBy(x: 176.35, y: 424.77)
        context.rotate(by: 32.75 * CGFloat.pi/180)

        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: -18.73, y: -46.39))
        oval3Path.addCurve(to: CGPoint(x: 29.27, y: -17.39), controlPoint1: CGPoint(x: -18.73, y: -32.3), controlPoint2: CGPoint(x: 0.27, y: -17.39))
        oval3Path.addCurve(to: CGPoint(x: 66.27, y: -46.39), controlPoint1: CGPoint(x: 58.27, y: -17.39), controlPoint2: CGPoint(x: 66.27, y: -32.3))
        oval3Path.addCurve(to: CGPoint(x: 22.77, y: -71.39), controlPoint1: CGPoint(x: 66.27, y: -60.47), controlPoint2: CGPoint(x: 45.14, y: -71.39))
        oval3Path.addCurve(to: CGPoint(x: -18.73, y: -46.39), controlPoint1: CGPoint(x: 0.4, y: -71.39), controlPoint2: CGPoint(x: -18.73, y: -60.47))
        oval3Path.close()
        color5.setFill()
        oval3Path.fill()

        context.restoreGState()


        //// Oval 4 Drawing
        context.saveGState()
        context.translateBy(x: 95, y: 350.44)
        context.rotate(by: 59.99 * CGFloat.pi/180)

        let oval4Path = UIBezierPath()
        oval4Path.move(to: CGPoint(x: -15.35, y: -40.62))
        oval4Path.addCurve(to: CGPoint(x: 23.98, y: -17.39), controlPoint1: CGPoint(x: -15.35, y: -29.34), controlPoint2: CGPoint(x: 0.22, y: -17.39))
        oval4Path.addCurve(to: CGPoint(x: 54.3, y: -40.62), controlPoint1: CGPoint(x: 47.74, y: -17.39), controlPoint2: CGPoint(x: 54.3, y: -29.34))
        oval4Path.addCurve(to: CGPoint(x: 18.66, y: -60.64), controlPoint1: CGPoint(x: 54.3, y: -51.9), controlPoint2: CGPoint(x: 36.98, y: -60.64))
        oval4Path.addCurve(to: CGPoint(x: -15.35, y: -40.62), controlPoint1: CGPoint(x: 0.33, y: -60.64), controlPoint2: CGPoint(x: -15.35, y: -51.9))
        oval4Path.close()
        color5.setFill()
        oval4Path.fill()

        context.restoreGState()


        //// Oval 5 Drawing
        context.saveGState()
        context.translateBy(x: 525, y: 328.44)
        context.rotate(by: -77.35 * CGFloat.pi/180)

        let oval5Path = UIBezierPath()
        oval5Path.move(to: CGPoint(x: -15.35, y: -40.62))
        oval5Path.addCurve(to: CGPoint(x: 23.98, y: -17.39), controlPoint1: CGPoint(x: -15.35, y: -29.34), controlPoint2: CGPoint(x: 0.22, y: -17.39))
        oval5Path.addCurve(to: CGPoint(x: 54.3, y: -40.62), controlPoint1: CGPoint(x: 47.74, y: -17.39), controlPoint2: CGPoint(x: 54.3, y: -29.34))
        oval5Path.addCurve(to: CGPoint(x: 18.66, y: -60.64), controlPoint1: CGPoint(x: 54.3, y: -51.9), controlPoint2: CGPoint(x: 36.98, y: -60.64))
        oval5Path.addCurve(to: CGPoint(x: -15.35, y: -40.62), controlPoint1: CGPoint(x: 0.33, y: -60.64), controlPoint2: CGPoint(x: -15.35, y: -51.9))
        oval5Path.close()
        color5.setFill()
        oval5Path.fill()

        context.restoreGState()




        //// BottomOvals
        //// Oval 6 Drawing
        context.saveGState()
        context.translateBy(x: 569.85, y: 303.3)
        context.rotate(by: -93.95 * CGFloat.pi/180)

        let oval6Path = UIBezierPath()
        oval6Path.move(to: CGPoint(x: -12.44, y: -27.07))
        oval6Path.addCurve(to: CGPoint(x: 19.43, y: -17.39), controlPoint1: CGPoint(x: -12.44, y: -22.37), controlPoint2: CGPoint(x: 0.18, y: -17.39))
        oval6Path.addCurve(to: CGPoint(x: 44, y: -27.07), controlPoint1: CGPoint(x: 38.69, y: -17.39), controlPoint2: CGPoint(x: 44, y: -22.37))
        oval6Path.addCurve(to: CGPoint(x: 15.12, y: -35.43), controlPoint1: CGPoint(x: 44, y: -31.78), controlPoint2: CGPoint(x: 29.97, y: -35.43))
        oval6Path.addCurve(to: CGPoint(x: -12.44, y: -27.07), controlPoint1: CGPoint(x: 0.27, y: -35.43), controlPoint2: CGPoint(x: -12.44, y: -31.78))
        oval6Path.close()
        color3.setFill()
        oval6Path.fill()

        context.restoreGState()


        //// Oval 7 Drawing
        context.saveGState()
        context.translateBy(x: 122.85, y: 378.3)
        context.rotate(by: -103.21 * CGFloat.pi/180)

        let oval7Path = UIBezierPath()
        oval7Path.move(to: CGPoint(x: -12.44, y: -27.07))
        oval7Path.addCurve(to: CGPoint(x: 19.43, y: -17.39), controlPoint1: CGPoint(x: -12.44, y: -22.37), controlPoint2: CGPoint(x: 0.18, y: -17.39))
        oval7Path.addCurve(to: CGPoint(x: 44, y: -27.07), controlPoint1: CGPoint(x: 38.69, y: -17.39), controlPoint2: CGPoint(x: 44, y: -22.37))
        oval7Path.addCurve(to: CGPoint(x: 15.12, y: -35.43), controlPoint1: CGPoint(x: 44, y: -31.78), controlPoint2: CGPoint(x: 29.97, y: -35.43))
        oval7Path.addCurve(to: CGPoint(x: -12.44, y: -27.07), controlPoint1: CGPoint(x: 0.27, y: -35.43), controlPoint2: CGPoint(x: -12.44, y: -31.78))
        oval7Path.close()
        color3.setFill()
        oval7Path.fill()

        context.restoreGState()


        //// Oval 8 Drawing
        context.saveGState()
        context.translateBy(x: 182.85, y: 448.8)
        context.rotate(by: -138.7 * CGFloat.pi/180)

        let oval8Path = UIBezierPath()
        oval8Path.move(to: CGPoint(x: -12.44, y: -27.07))
        oval8Path.addCurve(to: CGPoint(x: 19.43, y: -17.39), controlPoint1: CGPoint(x: -12.44, y: -22.37), controlPoint2: CGPoint(x: 0.18, y: -17.39))
        oval8Path.addCurve(to: CGPoint(x: 44, y: -27.07), controlPoint1: CGPoint(x: 38.69, y: -17.39), controlPoint2: CGPoint(x: 44, y: -22.37))
        oval8Path.addCurve(to: CGPoint(x: 15.12, y: -35.43), controlPoint1: CGPoint(x: 44, y: -31.78), controlPoint2: CGPoint(x: 29.97, y: -35.43))
        oval8Path.addCurve(to: CGPoint(x: -12.44, y: -27.07), controlPoint1: CGPoint(x: 0.27, y: -35.43), controlPoint2: CGPoint(x: -12.44, y: -31.78))
        oval8Path.close()
        color3.setFill()
        oval8Path.fill()

        context.restoreGState()


        //// Oval 9 Drawing
        context.saveGState()
        context.translateBy(x: 523.31, y: 418.02)
        context.rotate(by: -58.59 * CGFloat.pi/180)

        let oval9Path = UIBezierPath()
        oval9Path.move(to: CGPoint(x: -12.44, y: -29.88))
        oval9Path.addCurve(to: CGPoint(x: 19.43, y: -17.39), controlPoint1: CGPoint(x: -12.44, y: -23.82), controlPoint2: CGPoint(x: 0.18, y: -17.39))
        oval9Path.addCurve(to: CGPoint(x: 44, y: -29.88), controlPoint1: CGPoint(x: 38.69, y: -17.39), controlPoint2: CGPoint(x: 44, y: -23.82))
        oval9Path.addCurve(to: CGPoint(x: 15.12, y: -40.66), controlPoint1: CGPoint(x: 44, y: -35.95), controlPoint2: CGPoint(x: 29.97, y: -40.66))
        oval9Path.addCurve(to: CGPoint(x: -12.44, y: -29.88), controlPoint1: CGPoint(x: 0.27, y: -40.66), controlPoint2: CGPoint(x: -12.44, y: -35.95))
        oval9Path.close()
        color3.setFill()
        oval9Path.fill()

        context.restoreGState()


        //// Oval 10 Drawing
        context.saveGState()
        context.translateBy(x: 433.9, y: 490.24)
        context.rotate(by: -35.88 * CGFloat.pi/180)

        let oval10Path = UIBezierPath()
        oval10Path.move(to: CGPoint(x: -13.78, y: -35))
        oval10Path.addCurve(to: CGPoint(x: 21.53, y: -17.39), controlPoint1: CGPoint(x: -13.78, y: -26.45), controlPoint2: CGPoint(x: 0.2, y: -17.39))
        oval10Path.addCurve(to: CGPoint(x: 48.76, y: -35), controlPoint1: CGPoint(x: 42.87, y: -17.39), controlPoint2: CGPoint(x: 48.76, y: -26.45))
        oval10Path.addCurve(to: CGPoint(x: 16.75, y: -50.18), controlPoint1: CGPoint(x: 48.76, y: -43.55), controlPoint2: CGPoint(x: 33.21, y: -50.18))
        oval10Path.addCurve(to: CGPoint(x: -13.78, y: -35), controlPoint1: CGPoint(x: 0.3, y: -50.18), controlPoint2: CGPoint(x: -13.78, y: -43.55))
        oval10Path.close()
        color3.setFill()
        oval10Path.fill()

        context.restoreGState()


        //// Oval 11 Drawing
        context.saveGState()
        context.translateBy(x: 229.38, y: 511.33)
        context.rotate(by: 10.86 * CGFloat.pi/180)

        let oval11Path = UIBezierPath()
        oval11Path.move(to: CGPoint(x: -14.26, y: -35))
        oval11Path.addCurve(to: CGPoint(x: 22.29, y: -17.39), controlPoint1: CGPoint(x: -14.26, y: -26.45), controlPoint2: CGPoint(x: 0.2, y: -17.39))
        oval11Path.addCurve(to: CGPoint(x: 50.46, y: -35), controlPoint1: CGPoint(x: 44.37, y: -17.39), controlPoint2: CGPoint(x: 50.46, y: -26.45))
        oval11Path.addCurve(to: CGPoint(x: 17.34, y: -50.18), controlPoint1: CGPoint(x: 50.46, y: -43.55), controlPoint2: CGPoint(x: 34.37, y: -50.18))
        oval11Path.addCurve(to: CGPoint(x: -14.26, y: -35), controlPoint1: CGPoint(x: 0.31, y: -50.18), controlPoint2: CGPoint(x: -14.26, y: -43.55))
        oval11Path.close()
        color3.setFill()
        oval11Path.fill()

        context.restoreGState()


        //// Oval 12 Drawing
        context.saveGState()
        context.translateBy(x: 335.46, y: 547.76)
        context.rotate(by: -8.06 * CGFloat.pi/180)

        let oval12Path = UIBezierPath()
        oval12Path.move(to: CGPoint(x: -13.12, y: -27.74))
        oval12Path.addCurve(to: CGPoint(x: 20.51, y: -17.39), controlPoint1: CGPoint(x: -13.12, y: -22.71), controlPoint2: CGPoint(x: 0.19, y: -17.39))
        oval12Path.addCurve(to: CGPoint(x: 46.43, y: -27.74), controlPoint1: CGPoint(x: 40.83, y: -17.39), controlPoint2: CGPoint(x: 46.43, y: -22.71))
        oval12Path.addCurve(to: CGPoint(x: 15.95, y: -36.67), controlPoint1: CGPoint(x: 46.43, y: -32.77), controlPoint2: CGPoint(x: 31.63, y: -36.67))
        oval12Path.addCurve(to: CGPoint(x: -13.12, y: -27.74), controlPoint1: CGPoint(x: 0.28, y: -36.67), controlPoint2: CGPoint(x: -13.12, y: -32.77))
        oval12Path.close()
        color3.setFill()
        oval12Path.fill()

        context.restoreGState()






        //// Shadows
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 128, y: 188))
        bezier3Path.addCurve(to: CGPoint(x: 134.5, y: 200.5), controlPoint1: CGPoint(x: 124.55, y: 199.05), controlPoint2: CGPoint(x: 132.5, y: 194.5))
        bezier3Path.addCurve(to: CGPoint(x: 131.5, y: 244.5), controlPoint1: CGPoint(x: 136.5, y: 206.5), controlPoint2: CGPoint(x: 140.5, y: 225.5))
        bezier3Path.addCurve(to: CGPoint(x: 131.5, y: 267.5), controlPoint1: CGPoint(x: 122.5, y: 263.5), controlPoint2: CGPoint(x: 128.5, y: 267.5))
        bezier3Path.addCurve(to: CGPoint(x: 161.5, y: 197.5), controlPoint1: CGPoint(x: 134.5, y: 267.5), controlPoint2: CGPoint(x: 161.5, y: 229.5))
        bezier3Path.addCurve(to: CGPoint(x: 147.5, y: 170.5), controlPoint1: CGPoint(x: 161.5, y: 165.5), controlPoint2: CGPoint(x: 147.5, y: 170.5))
        bezier3Path.addCurve(to: CGPoint(x: 128, y: 188), controlPoint1: CGPoint(x: 147.5, y: 170.5), controlPoint2: CGPoint(x: 130.5, y: 180))
        bezier3Path.close()
        color.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        context.saveGState()
        context.translateBy(x: 429.5, y: 134.22)
        context.rotate(by: -10.05 * CGFloat.pi/180)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 33.5, y: 14.62))
        bezier4Path.addCurve(to: CGPoint(x: 27, y: 24.89), controlPoint1: CGPoint(x: 36.95, y: 23.7), controlPoint2: CGPoint(x: 29, y: 19.96))
        bezier4Path.addCurve(to: CGPoint(x: 30, y: 61.06), controlPoint1: CGPoint(x: 25, y: 29.82), controlPoint2: CGPoint(x: 21, y: 45.44))
        bezier4Path.addCurve(to: CGPoint(x: 30, y: 79.97), controlPoint1: CGPoint(x: 39, y: 76.68), controlPoint2: CGPoint(x: 33, y: 79.97))
        bezier4Path.addCurve(to: CGPoint(x: -0, y: 22.43), controlPoint1: CGPoint(x: 27, y: 79.97), controlPoint2: CGPoint(x: -0, y: 48.73))
        bezier4Path.addCurve(to: CGPoint(x: 14, y: 0.23), controlPoint1: CGPoint(x: -0, y: -3.88), controlPoint2: CGPoint(x: 14, y: 0.23))
        bezier4Path.addCurve(to: CGPoint(x: 33.5, y: 14.62), controlPoint1: CGPoint(x: 14, y: 0.23), controlPoint2: CGPoint(x: 31, y: 8.04))
        bezier4Path.close()
        color.setFill()
        bezier4Path.fill()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 220.5, y: 237.5))
        bezierPath.addCurve(to: CGPoint(x: 197.49, y: 237.5), controlPoint1: CGPoint(x: 212.54, y: 235.02), controlPoint2: CGPoint(x: 205.61, y: 235.18))
        bezierPath.addCurve(to: CGPoint(x: 176, y: 244), controlPoint1: CGPoint(x: 186.99, y: 240.5), controlPoint2: CGPoint(x: 180.31, y: 247.24))
        bezierPath.addCurve(to: CGPoint(x: 225.5, y: 210.5), controlPoint1: CGPoint(x: 172.01, y: 241), controlPoint2: CGPoint(x: 189.03, y: 205.36))
        bezierPath.addCurve(to: CGPoint(x: 253.5, y: 276.5), controlPoint1: CGPoint(x: 264.5, y: 216), controlPoint2: CGPoint(x: 261.5, y: 271.5))
        bezierPath.addCurve(to: CGPoint(x: 220.5, y: 237.5), controlPoint1: CGPoint(x: 245.5, y: 281.5), controlPoint2: CGPoint(x: 251, y: 247))
        bezierPath.close()
        color.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 258.47, y: 257.65)
        context.rotate(by: -11.16 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 55.23, y: 27.51))
        bezier2Path.addCurve(to: CGPoint(x: 27.04, y: 27.51), controlPoint1: CGPoint(x: 45.48, y: 25.03), controlPoint2: CGPoint(x: 36.99, y: 25.19))
        bezier2Path.addCurve(to: CGPoint(x: 0.7, y: 34.01), controlPoint1: CGPoint(x: 14.17, y: 30.51), controlPoint2: CGPoint(x: 5.98, y: 37.25))
        bezier2Path.addCurve(to: CGPoint(x: 61.36, y: 0.51), controlPoint1: CGPoint(x: -4.19, y: 31.01), controlPoint2: CGPoint(x: 16.67, y: -4.64))
        bezier2Path.addCurve(to: CGPoint(x: 95.68, y: 66.51), controlPoint1: CGPoint(x: 109.16, y: 6.01), controlPoint2: CGPoint(x: 105.48, y: 61.51))
        bezier2Path.addCurve(to: CGPoint(x: 55.23, y: 27.51), controlPoint1: CGPoint(x: 85.87, y: 71.51), controlPoint2: CGPoint(x: 92.61, y: 37.01))
        bezier2Path.close()
        color.setFill()
        bezier2Path.fill()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 342.4, y: 209.75)
        context.rotate(by: -29.03 * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 44.72, y: 23.57))
        bezier5Path.addCurve(to: CGPoint(x: 21.89, y: 23.57), controlPoint1: CGPoint(x: 36.82, y: 21.45), controlPoint2: CGPoint(x: 29.95, y: 21.58))
        bezier5Path.addCurve(to: CGPoint(x: 0.57, y: 29.14), controlPoint1: CGPoint(x: 11.47, y: 26.14), controlPoint2: CGPoint(x: 4.84, y: 31.92))
        bezier5Path.addCurve(to: CGPoint(x: 49.68, y: 0.43), controlPoint1: CGPoint(x: -3.4, y: 26.57), controlPoint2: CGPoint(x: 13.5, y: -3.97))
        bezier5Path.addCurve(to: CGPoint(x: 77.47, y: 56.99), controlPoint1: CGPoint(x: 88.38, y: 5.15), controlPoint2: CGPoint(x: 85.4, y: 52.7))
        bezier5Path.addCurve(to: CGPoint(x: 44.72, y: 23.57), controlPoint1: CGPoint(x: 69.53, y: 61.27), controlPoint2: CGPoint(x: 74.98, y: 31.71))
        bezier5Path.close()
        color.setFill()
        bezier5Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1461, height: 827), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1461, height: 827), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1461, y: resizedFrame.height / 827)


        //// Color Declarations
        let color6 = UIColor(red: 0.110, green: 0.451, blue: 0.698, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 704, height: 704)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        LogoStyleKit.drawCanvas1(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 90, y: 704, width: 1371, height: 123)
        let textTextContent = "WAITING FOR OPPONENT"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 107)!, NSForegroundColorAttributeName: color6, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Oval 18 Drawing
        let oval18Path = UIBezierPath(ovalIn: CGRect(x: 1164, y: 379, width: 172, height: 172))
        color6.setFill()
        oval18Path.fill()


        //// Oval 16 Drawing
        let oval16Path = UIBezierPath(ovalIn: CGRect(x: 770, y: 379, width: 172, height: 172))
        color6.setFill()
        oval16Path.fill()


        //// Oval 17 Drawing
        let oval17Path = UIBezierPath(ovalIn: CGRect(x: 967, y: 379, width: 172, height: 172))
        color6.setFill()
        oval17Path.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
