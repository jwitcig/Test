//
//  ScoreCardStyleKit.swift
//  MrPutt
//
//  Created by KTJW on 1/10/17.
//  Copyright Â© 2017 KTJW. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ScoreCardStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawMock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 79, height: 145), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 79, height: 145), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 79, y: resizedFrame.height / 145)



        //// Image Declarations
        let screen_Shot_20170109_at_20045_AM = UIImage(named: "screen_Shot_20170109_at_20045_AM.png")!

        //// Rectangle Drawing
        context.saveGState()
        context.scaleBy(x: 0.2, y: 0.2)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 390, height: 725))
        context.saveGState()
        rectanglePath.addClip()
        screen_Shot_20170109_at_20045_AM.draw(in: CGRect(x: 0, y: 0, width: screen_Shot_20170109_at_20045_AM.size.width, height: screen_Shot_20170109_at_20045_AM.size.height))
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 235, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 235, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 235, y: resizedFrame.height / 20)


        //// Color Declarations
        let gradientColor2 = UIColor(red: 0.988, green: 0.933, blue: 0.349, alpha: 1.000)
        let color3 = UIColor(red: 0.012, green: 0.549, blue: 0.875, alpha: 1.000)
        let gradient2Color = UIColor(red: 0.502, green: 0.502, blue: 0.502, alpha: 1.000)

        //// Gradient Declarations
        let gradient2 = CGGradient(colorsSpace: nil, colors: [UIColor.black.cgColor, UIColor.black.blended(withFraction: 0.5, of: gradient2Color).cgColor, gradient2Color.cgColor, gradient2Color.blended(withFraction: 0.5, of: UIColor.black).cgColor, UIColor.black.cgColor] as CFArray, locations: [0, 0.08, 0.5, 0.91, 1])!

        //// Text 3 Drawing
        let text3Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text3Style]

        "2".draw(in: text3Rect, withAttributes: text3FontAttributes)


        //// Text Drawing
        let textRect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: textStyle]

        "2".draw(in: textRect, withAttributes: textFontAttributes)


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle5Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text2Style]

        "2".draw(in: text2Rect, withAttributes: text2FontAttributes)


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text4Style]

        "2".draw(in: text4Rect, withAttributes: text4FontAttributes)
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let color3 = UIColor(red: 0.012, green: 0.549, blue: 0.875, alpha: 1.000)
        let color5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
        color3.setFill()
        ovalPath.fill()


        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 50, y: 5))
        starPath.addLine(to: CGPoint(x: 61.68, y: 33.83))
        starPath.addLine(to: CGPoint(x: 92.56, y: 36.09))
        starPath.addLine(to: CGPoint(x: 68.9, y: 56.18))
        starPath.addLine(to: CGPoint(x: 76.3, y: 86.41))
        starPath.addLine(to: CGPoint(x: 50, y: 69.98))
        starPath.addLine(to: CGPoint(x: 23.7, y: 86.41))
        starPath.addLine(to: CGPoint(x: 31.1, y: 56.18))
        starPath.addLine(to: CGPoint(x: 7.44, y: 36.09))
        starPath.addLine(to: CGPoint(x: 38.32, y: 33.83))
        starPath.close()
        color5.setFill()
        starPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas5(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 100)


        //// Color Declarations
        let gradientColor2 = UIColor(red: 0.988, green: 0.933, blue: 0.349, alpha: 1.000)

        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 49.75, y: 27))
        polygonPath.addLine(to: CGPoint(x: 3.62, y: 53.85))
        polygonPath.addLine(to: CGPoint(x: 4, y: 0))
        polygonPath.addLine(to: CGPoint(x: 49.75, y: 27))
        polygonPath.close()
        gradientColor2.setFill()
        polygonPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 4, height: 100))
        gradientColor2.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas6(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 90, height: 90), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 90, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 90, y: resizedFrame.height / 90)


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 31, y: 40))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 54))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 74))
        UIColor.white.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas7(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 235, height: 356), resizing: ResizingBehavior = .aspectFit, name1: String = "Kenny", name2: String = "Jonah") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 235, height: 356), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 235, y: resizedFrame.height / 356)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 235, resizedFrame.height / 356)


        //// Color Declarations
        let color = UIColor(red: 0.298, green: 0.847, blue: 0.400, alpha: 1.000)
        let color2 = UIColor(red: 0.012, green: 0.012, blue: 0.012, alpha: 0.862)
        let gradientColor = UIColor(red: 0.922, green: 0.631, blue: 0.000, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.988, green: 0.933, blue: 0.349, alpha: 1.000)
        let color5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color6 = UIColor(red: 0.126, green: 0.126, blue: 0.126, alpha: 1.000)
        let gradient3Color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let gradient3Color2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.630)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor.cgColor] as CFArray, locations: [0, 1])!
        let gradient3 = CGGradient(colorsSpace: nil, colors: [gradient3Color.cgColor, gradient3Color.blended(withFraction: 0.5, of: gradient3Color2).cgColor, gradient3Color2.cgColor] as CFArray, locations: [0, 0.8, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: -7, height: -2)
        shadow.shadowBlurRadius = 13

        //// Image Declarations
        let whiteCheckmark = UIImage(named: "whiteCheckmark.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 35, y: 341))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 307), controlPoint1: CGPoint(x: 35, y: 324), controlPoint2: CGPoint(x: 0, y: 325))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 182), controlPoint1: CGPoint(x: 0, y: 286), controlPoint2: CGPoint(x: 0, y: 182))
        bezier2Path.addLine(to: CGPoint(x: 35, y: 182))
        bezier2Path.addCurve(to: CGPoint(x: 35, y: 341), controlPoint1: CGPoint(x: 35, y: 182), controlPoint2: CGPoint(x: 35, y: 358))
        bezier2Path.close()
        color6.setFill()
        bezier2Path.fill()

        ////// Bezier 2 Inner Shadow
        context.saveGState()
        context.clip(to: bezier2Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier2OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: bezier2OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier2OpaqueShadow.setFill()
        bezier2Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 35, y: 66))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: 35, y: 83), controlPoint2: CGPoint(x: 0, y: 82))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 182), controlPoint1: CGPoint(x: 0, y: 121), controlPoint2: CGPoint(x: 0, y: 182))
        bezierPath.addLine(to: CGPoint(x: 35, y: 182))
        bezierPath.addCurve(to: CGPoint(x: 35, y: 66), controlPoint1: CGPoint(x: 35, y: 182), controlPoint2: CGPoint(x: 35, y: 49))
        bezierPath.close()
        color6.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context.saveGState()
        context.clip(to: bezierPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezierOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: bezierOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 35, y: 0, width: 200, height: 312), byRoundingCorners: [.topLeft, .topRight], cornerRadii: CGSize(width: 14, height: 14))
        rectanglePath.close()
        color2.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 35, y: 93, width: 100, height: 20)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 16)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = name1.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        name1.draw(in: CGRect(x: textRect.minX, y: textRect.minY + textRect.height - textTextHeight, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 135, y: 93, width: 100, height: 20)
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 16)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = name2.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        name2.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + text2Rect.height - text2TextHeight, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 135, y: 113, width: 1, height: 300))
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(gradient3,
            start: CGPoint(x: 134.37, y: -336.56),
            end: CGPoint(x: 136.11, y: 333.83),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 153, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 133, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 173, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 0, y: 233, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 0, y: 193, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 0, y: 213, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 0, y: 253, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 0, y: 273, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 0, y: 113, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 18, y: 97, width: 13, height: 13)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        ScoreCardStyleKit.drawCanvas4(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 7, y: 97, width: 7, height: 13)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        ScoreCardStyleKit.drawCanvas5(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 0, y: 292, width: 235, height: 20)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        ScoreCardStyleKit.drawCanvas3(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch)
        context.restoreGState()




        //// Group 3
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 35, y: 312, width: 200, height: 44), byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 14, height: 14))
        rectangle2Path.close()
        color.setFill()
        rectangle2Path.fill()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 125, y: 322.45)
        context.scaleBy(x: 0.5, y: 0.5)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 45, height: 45.1))
        context.saveGState()
        rectangle5Path.addClip()
        whiteCheckmark.draw(in: CGRect(x: 0, y: 0, width: whiteCheckmark.size.width, height: whiteCheckmark.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 35, y: 113, width: 200, height: 3))
        color5.setFill()
        rectangle4Path.fill()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 80, y: -442, width: 56, height: 52)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        ScoreCardStyleKit.drawCanvas6(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 70, y: 3, width: 90, height: 90)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        ScoreCardStyleKit.drawCanvas6(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 14 Drawing
        context.saveGState()
        context.translateBy(x: 201, y: 3)
        context.scaleBy(x: -1, y: 1)

        let symbol14Rect = CGRect(x: 0, y: 0, width: 90, height: 90)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        ScoreCardStyleKit.drawCanvas6(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 0, y: 157))
        ovalPath.addCurve(to: CGPoint(x: 198, y: 22), controlPoint1: CGPoint(x: 13.79, y: 131.81), controlPoint2: CGPoint(x: 148.65, y: -20.88))
        ovalPath.addCurve(to: CGPoint(x: 234, y: 327), controlPoint1: CGPoint(x: 245.6, y: 63.36), controlPoint2: CGPoint(x: 234, y: 308.57))
        ovalPath.addCurve(to: CGPoint(x: 73, y: 277), controlPoint1: CGPoint(x: 234, y: 327), controlPoint2: CGPoint(x: 125.5, y: 320.5))
        ovalPath.addCurve(to: CGPoint(x: 0, y: 157), controlPoint1: CGPoint(x: 20.5, y: 233.5), controlPoint2: CGPoint(x: 0, y: 157))
        ovalPath.close()
        context.saveGState()
        ovalPath.addClip()
        context.drawLinearGradient(gradient3, start: CGPoint(x: 117.62, y: 14.45), end: CGPoint(x: 117.62, y: 327), options: [])
        context.restoreGState()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath()
        rectangle6Path.move(to: CGPoint(x: 39, y: 9))
        rectangle6Path.addLine(to: CGPoint(x: 39, y: 6))
        rectangle6Path.addLine(to: CGPoint(x: 39, y: 6))
        rectangle6Path.addLine(to: CGPoint(x: 39, y: 5.85))
        rectangle6Path.addCurve(to: CGPoint(x: 40.84, y: 3.22), controlPoint1: CGPoint(x: 39, y: 4.68), controlPoint2: CGPoint(x: 39.73, y: 3.63))
        rectangle6Path.addCurve(to: CGPoint(x: 43.53, y: 3), controlPoint1: CGPoint(x: 41.55, y: 3), controlPoint2: CGPoint(x: 42.21, y: 3))
        rectangle6Path.addLine(to: CGPoint(x: 54.29, y: 3))
        rectangle6Path.addLine(to: CGPoint(x: 42.94, y: 3))
        rectangle6Path.addLine(to: CGPoint(x: 215.71, y: 3))
        rectangle6Path.addCurve(to: CGPoint(x: 229.05, y: 3.2), controlPoint1: CGPoint(x: 227.79, y: 3), controlPoint2: CGPoint(x: 228.45, y: 3))
        rectangle6Path.addLine(to: CGPoint(x: 229.16, y: 3.22))
        rectangle6Path.addCurve(to: CGPoint(x: 231, y: 9), controlPoint1: CGPoint(x: 230.27, y: 3.63), controlPoint2: CGPoint(x: 231, y: 7.83))
        rectangle6Path.addCurve(to: CGPoint(x: 231, y: 6), controlPoint1: CGPoint(x: 231, y: 9.15), controlPoint2: CGPoint(x: 231, y: 6))
        rectangle6Path.addLine(to: CGPoint(x: 231, y: 6))
        color2.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 39, y: 4, width: 192, height: 85), byRoundingCorners: [.topLeft, .topRight], cornerRadii: CGSize(width: 10, height: 10))
        rectangle7Path.close()
        context.saveGState()
        rectangle7Path.addClip()
        context.drawLinearGradient(gradient3, start: CGPoint(x: 135, y: 89), end: CGPoint(x: 135, y: 4), options: [])
        context.restoreGState()


        //// Group 2
        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 135.56, y: 14))
        polygonPath.addCurve(to: CGPoint(x: 167.79, y: 31), controlPoint1: CGPoint(x: 140.88, y: 14), controlPoint2: CGPoint(x: 166.35, y: 27.6))
        polygonPath.addCurve(to: CGPoint(x: 167.79, y: 65), controlPoint1: CGPoint(x: 169.23, y: 34.4), controlPoint2: CGPoint(x: 169.23, y: 61.6))
        polygonPath.addCurve(to: CGPoint(x: 135.56, y: 82), controlPoint1: CGPoint(x: 166.35, y: 68.4), controlPoint2: CGPoint(x: 144.42, y: 82))
        polygonPath.addCurve(to: CGPoint(x: 103.34, y: 65), controlPoint1: CGPoint(x: 126.71, y: 82), controlPoint2: CGPoint(x: 105.44, y: 68.4))
        polygonPath.addCurve(to: CGPoint(x: 103.34, y: 31), controlPoint1: CGPoint(x: 101.24, y: 61.6), controlPoint2: CGPoint(x: 101.9, y: 34.4))
        polygonPath.addCurve(to: CGPoint(x: 135.56, y: 14), controlPoint1: CGPoint(x: 104.78, y: 27.6), controlPoint2: CGPoint(x: 130.25, y: 14))
        polygonPath.close()
        context.saveGState()
        polygonPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 144.11, y: 16.1), end: CGPoint(x: 126.95, y: 80.13), options: [])
        context.restoreGState()
        UIColor.white.setStroke()
        polygonPath.lineWidth = 2
        polygonPath.stroke()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 117.97, y: 25, width: 35, height: 68)
        let text3TextContent = "3"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 60)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 235, height: 356), resizing: ResizingBehavior = .aspectFit, holeNumber: String = "3", name1: String = "Kenny", name2: String = "Jonah", player1Hole1: String = "2", player1Hole2: String = "2", player1Hole3: String = "2", player1Hole4: String = "2", player1Hole5: String = "2", player1Hole6: String = "2", player1Hole7: String = "2", player1Hole8: String = "2", player1Hole9: String = "2", player2Hole1: String = "2", player2Hole2: String = "2", player2Hole3: String = "2", player2Hole4: String = "2", player2Hole5: String = "2", player2Hole6: String = "2", player2Hole7: String = "2", player2Hole8: String = "2", player2Hole9: String = "2", parHole1: String = "3", parHole2: String = "3", parHole3: String = "3", parHole4: String = "3", parHole5: String = "3", parHole6: String = "3", parHole7: String = "3", parHole8: String = "3", parHole9: String = "3", player1Total: String = "18", player2Total: String = "18") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 235, height: 356), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 235, y: resizedFrame.height / 356)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 235, resizedFrame.height / 356)


        //// Color Declarations
        let color = UIColor(red: 0.298, green: 0.847, blue: 0.400, alpha: 1.000)
        let color2 = UIColor(red: 0.012, green: 0.012, blue: 0.012, alpha: 0.862)
        let gradientColor = UIColor(red: 0.922, green: 0.631, blue: 0.000, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.988, green: 0.933, blue: 0.349, alpha: 1.000)
        let color3 = UIColor(red: 0.012, green: 0.549, blue: 0.875, alpha: 1.000)
        let gradient2Color = UIColor(red: 0.502, green: 0.502, blue: 0.502, alpha: 1.000)
        let color5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color6 = UIColor(red: 0.126, green: 0.126, blue: 0.126, alpha: 1.000)
        let gradient3Color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let gradient3Color2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.630)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor2.cgColor, gradientColor.cgColor] as CFArray, locations: [0, 1])!
        let gradient2 = CGGradient(colorsSpace: nil, colors: [UIColor.black.cgColor, UIColor.black.blended(withFraction: 0.5, of: gradient2Color).cgColor, gradient2Color.cgColor, gradient2Color.blended(withFraction: 0.5, of: UIColor.black).cgColor, UIColor.black.cgColor] as CFArray, locations: [0, 0.08, 0.5, 0.91, 1])!
        let gradient3 = CGGradient(colorsSpace: nil, colors: [gradient3Color.cgColor, gradient3Color.blended(withFraction: 0.5, of: gradient3Color2).cgColor, gradient3Color2.cgColor] as CFArray, locations: [0, 0.8, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: -7, height: -2)
        shadow.shadowBlurRadius = 13

        //// Image Declarations
        let whiteCheckmark = UIImage(named: "whiteCheckmark.png")!

        //// Main Card Drawing
        let mainCardPath = UIBezierPath(roundedRect: CGRect(x: 35, y: 0, width: 200, height: 312), byRoundingCorners: [.topLeft, .topRight], cornerRadii: CGSize(width: 14, height: 14))
        mainCardPath.close()
        color2.setFill()
        mainCardPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 35, y: 293, width: 200, height: 19))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient3,
            start: CGPoint(x: 130.6, y: 124.72),
            end: CGPoint(x: 130.53, y: 321.48),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Side Card 2 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 231)
        context.scaleBy(x: 1, y: -1)

        let sideCard2Path = UIBezierPath()
        sideCard2Path.move(to: CGPoint(x: 35, y: 159))
        sideCard2Path.addCurve(to: CGPoint(x: 0, y: 130), controlPoint1: CGPoint(x: 35, y: 142), controlPoint2: CGPoint(x: 0, y: 148))
        sideCard2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 109), controlPoint2: CGPoint(x: 0, y: 0))
        sideCard2Path.addLine(to: CGPoint(x: 35, y: 0))
        sideCard2Path.addCurve(to: CGPoint(x: 35, y: 159), controlPoint1: CGPoint(x: 35, y: 0), controlPoint2: CGPoint(x: 35, y: 176))
        sideCard2Path.close()
        color6.setFill()
        sideCard2Path.fill()

        ////// Side Card 2 Inner Shadow
        context.saveGState()
        context.clip(to: sideCard2Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let sideCard2OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: sideCard2OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        sideCard2OpaqueShadow.setFill()
        sideCard2Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()


        context.restoreGState()


        //// Side Card Drawing
        let sideCardPath = UIBezierPath()
        sideCardPath.move(to: CGPoint(x: 35, y: 311))
        sideCardPath.addCurve(to: CGPoint(x: 0, y: 282), controlPoint1: CGPoint(x: 35, y: 294), controlPoint2: CGPoint(x: 0, y: 300))
        sideCardPath.addCurve(to: CGPoint(x: 0, y: 152), controlPoint1: CGPoint(x: 0, y: 261), controlPoint2: CGPoint(x: 0, y: 152))
        sideCardPath.addLine(to: CGPoint(x: 35, y: 152))
        sideCardPath.addCurve(to: CGPoint(x: 35, y: 311), controlPoint1: CGPoint(x: 35, y: 152), controlPoint2: CGPoint(x: 35, y: 328))
        sideCardPath.close()
        color6.setFill()
        sideCardPath.fill()

        ////// Side Card Inner Shadow
        context.saveGState()
        context.clip(to: sideCardPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let sideCardOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: sideCardOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        sideCardOpaqueShadow.setFill()
        sideCardPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Center Divider Drawing
        let centerDividerPath = UIBezierPath(rect: CGRect(x: 135, y: 113, width: 1, height: 300))
        context.saveGState()
        centerDividerPath.addClip()
        context.drawLinearGradient(gradient3,
            start: CGPoint(x: 134.37, y: -336.56),
            end: CGPoint(x: 136.11, y: 333.83),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Lines
        //// Line 10
        context.saveGState()
        context.translateBy(x: 0, y: 292)



        //// Text 10 Drawing
        let text10Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .center
        let text10FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text10Style]

        player1Total.draw(in: text10Rect, withAttributes: text10FontAttributes)


        //// Text 11 Drawing
        let text11Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text11Style = NSMutableParagraphStyle()
        text11Style.alignment = .center
        let text11FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text11Style]

        player2Total.draw(in: text11Rect, withAttributes: text11FontAttributes)


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle9Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()



        context.restoreGState()


        //// Line 9
        context.saveGState()
        context.translateBy(x: 0, y: 273)



        //// Text Drawing
        let textRect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: textStyle]

        player1Hole9.draw(in: textRect, withAttributes: textFontAttributes)


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text2Style]

        player2Hole9.draw(in: text2Rect, withAttributes: text2FontAttributes)


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle8Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .center
        let text8FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text8Style]

        "9".draw(in: text8Rect, withAttributes: text8FontAttributes)


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .center
        let text9FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text9Style]

        parHole9.draw(in: text9Rect, withAttributes: text9FontAttributes)



        context.restoreGState()


        //// Line 8
        context.saveGState()
        context.translateBy(x: 0, y: 253)



        //// Text 14 Drawing
        let text14Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text14Style]

        player1Hole8.draw(in: text14Rect, withAttributes: text14FontAttributes)


        //// Text 15 Drawing
        let text15Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text15Style = NSMutableParagraphStyle()
        text15Style.alignment = .center
        let text15FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text15Style]

        player2Hole8.draw(in: text15Rect, withAttributes: text15FontAttributes)


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle10Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .center
        let text16FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text16Style]

        "8".draw(in: text16Rect, withAttributes: text16FontAttributes)


        //// Text 17 Drawing
        let text17Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text17Style = NSMutableParagraphStyle()
        text17Style.alignment = .center
        let text17FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text17Style]

        parHole8.draw(in: text17Rect, withAttributes: text17FontAttributes)



        context.restoreGState()


        //// Line 7
        context.saveGState()
        context.translateBy(x: 0, y: 233)



        //// Text 18 Drawing
        let text18Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .center
        let text18FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text18Style]

        player1Hole7.draw(in: text18Rect, withAttributes: text18FontAttributes)


        //// Text 19 Drawing
        let text19Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text19Style = NSMutableParagraphStyle()
        text19Style.alignment = .center
        let text19FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text19Style]

        player2Hole7.draw(in: text19Rect, withAttributes: text19FontAttributes)


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle11Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 20 Drawing
        let text20Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .center
        let text20FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text20Style]

        "7".draw(in: text20Rect, withAttributes: text20FontAttributes)


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .center
        let text21FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text21Style]

        parHole7.draw(in: text21Rect, withAttributes: text21FontAttributes)



        context.restoreGState()


        //// Line 6
        context.saveGState()
        context.translateBy(x: 0, y: 213)



        //// Text 22 Drawing
        let text22Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .center
        let text22FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text22Style]

        player1Hole6.draw(in: text22Rect, withAttributes: text22FontAttributes)


        //// Text 23 Drawing
        let text23Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .center
        let text23FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text23Style]

        player2Hole6.draw(in: text23Rect, withAttributes: text23FontAttributes)


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle12Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 24 Drawing
        let text24Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text24Style = NSMutableParagraphStyle()
        text24Style.alignment = .center
        let text24FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text24Style]

        "6".draw(in: text24Rect, withAttributes: text24FontAttributes)


        //// Text 25 Drawing
        let text25Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text25Style = NSMutableParagraphStyle()
        text25Style.alignment = .center
        let text25FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text25Style]

        parHole6.draw(in: text25Rect, withAttributes: text25FontAttributes)



        context.restoreGState()


        //// Line 5
        context.saveGState()
        context.translateBy(x: 0, y: 193)



        //// Text 26 Drawing
        let text26Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text26Style = NSMutableParagraphStyle()
        text26Style.alignment = .center
        let text26FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text26Style]

        player1Hole5.draw(in: text26Rect, withAttributes: text26FontAttributes)


        //// Text 27 Drawing
        let text27Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text27Style = NSMutableParagraphStyle()
        text27Style.alignment = .center
        let text27FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text27Style]

        player2Hole5.draw(in: text27Rect, withAttributes: text27FontAttributes)


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle13Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 28 Drawing
        let text28Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text28Style = NSMutableParagraphStyle()
        text28Style.alignment = .center
        let text28FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text28Style]

        "5".draw(in: text28Rect, withAttributes: text28FontAttributes)


        //// Text 29 Drawing
        let text29Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text29Style = NSMutableParagraphStyle()
        text29Style.alignment = .center
        let text29FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text29Style]

        parHole5.draw(in: text29Rect, withAttributes: text29FontAttributes)



        context.restoreGState()


        //// Line 4
        context.saveGState()
        context.translateBy(x: 0, y: 173)



        //// Text 30 Drawing
        let text30Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text30Style = NSMutableParagraphStyle()
        text30Style.alignment = .center
        let text30FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text30Style]

        player1Hole4.draw(in: text30Rect, withAttributes: text30FontAttributes)


        //// Text 31 Drawing
        let text31Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text31Style = NSMutableParagraphStyle()
        text31Style.alignment = .center
        let text31FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text31Style]

        player2Hole4.draw(in: text31Rect, withAttributes: text31FontAttributes)


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle14Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 32 Drawing
        let text32Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text32Style = NSMutableParagraphStyle()
        text32Style.alignment = .center
        let text32FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text32Style]

        "4".draw(in: text32Rect, withAttributes: text32FontAttributes)


        //// Text 33 Drawing
        let text33Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text33Style = NSMutableParagraphStyle()
        text33Style.alignment = .center
        let text33FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text33Style]

        parHole4.draw(in: text33Rect, withAttributes: text33FontAttributes)



        context.restoreGState()


        //// Line 3
        context.saveGState()
        context.translateBy(x: 0, y: 153)



        //// Text 38 Drawing
        let text38Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text38Style = NSMutableParagraphStyle()
        text38Style.alignment = .center
        let text38FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text38Style]

        player1Hole3.draw(in: text38Rect, withAttributes: text38FontAttributes)


        //// Text 39 Drawing
        let text39Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text39Style = NSMutableParagraphStyle()
        text39Style.alignment = .center
        let text39FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text39Style]

        player2Hole3.draw(in: text39Rect, withAttributes: text39FontAttributes)


        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle16Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 40 Drawing
        let text40Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text40Style = NSMutableParagraphStyle()
        text40Style.alignment = .center
        let text40FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text40Style]

        "3\n".draw(in: text40Rect, withAttributes: text40FontAttributes)


        //// Text 41 Drawing
        let text41Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text41Style = NSMutableParagraphStyle()
        text41Style.alignment = .center
        let text41FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text41Style]

        parHole3.draw(in: text41Rect, withAttributes: text41FontAttributes)



        context.restoreGState()


        //// Line 2
        context.saveGState()
        context.translateBy(x: 0, y: 133)



        //// Text 34 Drawing
        let text34Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text34Style = NSMutableParagraphStyle()
        text34Style.alignment = .center
        let text34FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text34Style]

        player1Hole2.draw(in: text34Rect, withAttributes: text34FontAttributes)


        //// Text 35 Drawing
        let text35Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text35Style = NSMutableParagraphStyle()
        text35Style.alignment = .center
        let text35FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text35Style]

        player2Hole2.draw(in: text35Rect, withAttributes: text35FontAttributes)


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle15Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 36 Drawing
        let text36Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text36Style = NSMutableParagraphStyle()
        text36Style.alignment = .center
        let text36FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text36Style]

        "2".draw(in: text36Rect, withAttributes: text36FontAttributes)


        //// Text 37 Drawing
        let text37Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text37Style = NSMutableParagraphStyle()
        text37Style.alignment = .center
        let text37FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text37Style]

        parHole2.draw(in: text37Rect, withAttributes: text37FontAttributes)



        context.restoreGState()


        //// Line 1
        context.saveGState()
        context.translateBy(x: 1, y: 113)



        //// Text 4 Drawing
        let text4Rect = CGRect(x: 35, y: 4, width: 100, height: 16)
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text4Style]

        player1Hole1.draw(in: text4Rect, withAttributes: text4FontAttributes)


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 135, y: 4, width: 100, height: 16)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text5Style]

        player2Hole1.draw(in: text5Rect, withAttributes: text5FontAttributes)


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 35, y: 0, width: 200, height: 1))
        context.saveGState()
        rectangle6Path.addClip()
        context.drawLinearGradient(gradient2, start: CGPoint(x: 35, y: 0.5), end: CGPoint(x: 235, y: 0.5), options: [])
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 3, y: 4, width: 13, height: 16)
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: gradientColor2, NSParagraphStyleAttributeName: text6Style]

        "1\n".draw(in: text6Rect, withAttributes: text6FontAttributes)


        //// Text 7 Drawing
        let text7Rect = CGRect(x: 18, y: 4, width: 13, height: 16)
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .center
        let text7FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 14)!, NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: text7Style]

        parHole1.draw(in: text7Rect, withAttributes: text7FontAttributes)



        context.restoreGState()


        //// Column Icons
        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 18, y: 97, width: 13, height: 13)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        ScoreCardStyleKit.drawCanvas4(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 7, y: 97, width: 7, height: 13)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        ScoreCardStyleKit.drawCanvas5(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch)
        context.restoreGState()




        //// Names
        //// Player 2 Drawing
        let player2Rect = CGRect(x: 135, y: 93, width: 100, height: 20)
        let player2Style = NSMutableParagraphStyle()
        player2Style.alignment = .center
        let player2FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 16)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: player2Style]

        let player2TextHeight: CGFloat = name2.boundingRect(with: CGSize(width: player2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: player2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: player2Rect)
        name2.draw(in: CGRect(x: player2Rect.minX, y: player2Rect.minY + player2Rect.height - player2TextHeight, width: player2Rect.width, height: player2TextHeight), withAttributes: player2FontAttributes)
        context.restoreGState()


        //// Player 1 Drawing
        let player1Rect = CGRect(x: 35, y: 93, width: 100, height: 20)
        let player1Style = NSMutableParagraphStyle()
        player1Style.alignment = .center
        let player1FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 16)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: player1Style]

        let player1TextHeight: CGFloat = name1.boundingRect(with: CGSize(width: player1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: player1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: player1Rect)
        name1.draw(in: CGRect(x: player1Rect.minX, y: player1Rect.minY + player1Rect.height - player1TextHeight, width: player1Rect.width, height: player1TextHeight), withAttributes: player1FontAttributes)
        context.restoreGState()






        //// Button
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 35, y: 312, width: 200, height: 44), byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 14, height: 14))
        rectangle2Path.close()
        color.setFill()
        rectangle2Path.fill()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 125, y: 322.45)
        context.scaleBy(x: 0.5, y: 0.5)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 45, height: 45.1))
        context.saveGState()
        rectangle5Path.addClip()
        whiteCheckmark.draw(in: CGRect(x: 0, y: 0, width: whiteCheckmark.size.width, height: whiteCheckmark.size.height))
        context.restoreGState()

        context.restoreGState()




        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 35, y: 113, width: 200, height: 3))
        color5.setFill()
        rectangle4Path.fill()


        //// Gradients
        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 39, y: 3, width: 192, height: 85), byRoundingCorners: [.topLeft, .topRight], cornerRadii: CGSize(width: 10, height: 10))
        rectangle7Path.close()
        context.saveGState()
        rectangle7Path.addClip()
        context.drawLinearGradient(gradient3, start: CGPoint(x: 135, y: 88), end: CGPoint(x: 135, y: 3), options: [])
        context.restoreGState()




        //// Hole
        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 70, y: 3, width: 90, height: 90)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        ScoreCardStyleKit.drawCanvas6(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 14 Drawing
        context.saveGState()
        context.translateBy(x: 201, y: 3)
        context.rotate(by: -180 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: -1)

        let symbol14Rect = CGRect(x: 0, y: 0, width: 90, height: 90)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        ScoreCardStyleKit.drawCanvas6(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 136.56, y: 14))
        polygonPath.addCurve(to: CGPoint(x: 168.79, y: 31), controlPoint1: CGPoint(x: 141.88, y: 14), controlPoint2: CGPoint(x: 167.35, y: 27.6))
        polygonPath.addCurve(to: CGPoint(x: 168.79, y: 65), controlPoint1: CGPoint(x: 170.23, y: 34.4), controlPoint2: CGPoint(x: 170.23, y: 61.6))
        polygonPath.addCurve(to: CGPoint(x: 136.56, y: 82), controlPoint1: CGPoint(x: 167.35, y: 68.4), controlPoint2: CGPoint(x: 145.42, y: 82))
        polygonPath.addCurve(to: CGPoint(x: 104.34, y: 65), controlPoint1: CGPoint(x: 127.71, y: 82), controlPoint2: CGPoint(x: 106.44, y: 68.4))
        polygonPath.addCurve(to: CGPoint(x: 104.34, y: 31), controlPoint1: CGPoint(x: 102.24, y: 61.6), controlPoint2: CGPoint(x: 102.9, y: 34.4))
        polygonPath.addCurve(to: CGPoint(x: 136.56, y: 14), controlPoint1: CGPoint(x: 105.78, y: 27.6), controlPoint2: CGPoint(x: 131.25, y: 14))
        polygonPath.close()
        context.saveGState()
        polygonPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 145.11, y: 16.1), end: CGPoint(x: 127.95, y: 80.13), options: [])
        context.restoreGState()
        UIColor.white.setStroke()
        polygonPath.lineWidth = 2
        polygonPath.stroke()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 102, y: 25, width: 67, height: 52)
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 51)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: text3Style]

        holeNumber.draw(in: text3Rect, withAttributes: text3FontAttributes)
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class func imageOfCard(holeNumber: String = "3", name1: String = "Kenny", name2: String = "Jonah", player1Hole1: String = "2", player1Hole2: String = "2", player1Hole3: String = "2", player1Hole4: String = "2", player1Hole5: String = "2", player1Hole6: String = "2", player1Hole7: String = "2", player1Hole8: String = "2", player1Hole9: String = "2", player2Hole1: String = "2", player2Hole2: String = "2", player2Hole3: String = "2", player2Hole4: String = "2", player2Hole5: String = "2", player2Hole6: String = "2", player2Hole7: String = "2", player2Hole8: String = "2", player2Hole9: String = "2", parHole1: String = "3", parHole2: String = "3", parHole3: String = "3", parHole4: String = "3", parHole5: String = "3", parHole6: String = "3", parHole7: String = "3", parHole8: String = "3", parHole9: String = "3", player1Total: String = "18", player2Total: String = "18") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 235, height: 356), false, 0)
            ScoreCardStyleKit.drawCard(holeNumber: holeNumber, name1: name1, name2: name2, player1Hole1: player1Hole1, player1Hole2: player1Hole2, player1Hole3: player1Hole3, player1Hole4: player1Hole4, player1Hole5: player1Hole5, player1Hole6: player1Hole6, player1Hole7: player1Hole7, player1Hole8: player1Hole8, player1Hole9: player1Hole9, player2Hole1: player2Hole1, player2Hole2: player2Hole2, player2Hole3: player2Hole3, player2Hole4: player2Hole4, player2Hole5: player2Hole5, player2Hole6: player2Hole6, player2Hole7: player2Hole7, player2Hole8: player2Hole8, player2Hole9: player2Hole9, parHole1: parHole1, parHole2: parHole2, parHole3: parHole3, parHole4: parHole4, parHole5: parHole5, parHole6: parHole6, parHole7: parHole7, parHole8: parHole8, parHole9: parHole9, player1Total: player1Total, player2Total: player2Total)

        let imageOfCard = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCard
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
