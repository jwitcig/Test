//
//  TilesStyleKit.swift
//  MrPutt
//
//  Created by KTJW on 1/21/17.
//  Copyright Â© 2017 KTJW. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TilesStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 20), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 20)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 14))
        wallDark.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 10))
        wallMedium.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 6))
        wallLight.setFill()
        rectangle3Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawStraightWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol 3 Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol3Rect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()

        context.restoreGState()


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 100)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLighttile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 25), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 25)


        //// lighttilepiece Drawing
        let lighttilepiecePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 25, height: 25))
        lightTile.setFill()
        lighttilepiecePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawDarktile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 25), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 25)


        //// Color Declarations
        var lightTileHueComponent: CGFloat = 1
        var lightTileSaturationComponent: CGFloat = 1
        var lightTileBrightnessComponent: CGFloat = 1
        lightTile.getHue(&lightTileHueComponent, saturation: &lightTileSaturationComponent, brightness: &lightTileBrightnessComponent, alpha: nil)

        let darkTile = UIColor(hue: lightTileHueComponent, saturation: lightTileSaturationComponent, brightness: 0.5, alpha: lightTile.cgColor.alpha)

        //// darktilepiece Drawing
        let darktilepiecePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 25, height: 25))
        darkTile.setFill()
        darktilepiecePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCurvedWallShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 20), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 20)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 86, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWall(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), wallLight: wallLight)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCornerWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 14, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()


        //// Symbol 2 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 14)
        context.rotate(by: -90 * CGFloat.pi/180)
        context.scaleBy(x: -1, y: 1)

        let symbol2Rect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCurvedWall(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), wallLight: wallLight)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 5 Drawing
        context.saveGState()
        context.translateBy(x: -4, y: 14)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol5Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawOutsideCorner(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCurvedWall(frame: CGRect = CGRect(x: 0, y: 0, width: 6, height: 20), wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.minX + 6, y: frame.minY + 14))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX, y: frame.minY + 20), controlPoint1: CGPoint(x: frame.minX + 3, y: frame.minY + 14), controlPoint2: CGPoint(x: frame.minX, y: frame.minY + 17))
        bezier2Path.addLine(to: CGPoint(x: frame.minX, y: frame.minY + 14))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 6, y: frame.minY + 14))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: frame.minX, y: frame.minY + 14))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: frame.minX, y: frame.minY))
        bezier2Path.addLine(to: CGPoint(x: frame.minX, y: frame.minY + 14))
        bezier2Path.close()
        wallDark.setFill()
        bezier2Path.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: frame.minX, y: frame.minY, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: frame.minX + 5.72, y: frame.minY + 14.01))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX, y: frame.minY + 20), controlPoint1: CGPoint(x: frame.minX + 2.81, y: frame.minY + 14.19), controlPoint2: CGPoint(x: frame.minX, y: frame.minY + 17.09))
        bezier3Path.addLine(to: CGPoint(x: frame.minX, y: frame.minY + 14))
        bezier3Path.addLine(to: CGPoint(x: frame.minX + 6, y: frame.minY + 14))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 5.72, y: frame.minY + 14.01), controlPoint1: CGPoint(x: frame.minX + 5.91, y: frame.minY + 14), controlPoint2: CGPoint(x: frame.minX + 5.81, y: frame.minY + 14))
        bezier3Path.close()
        wallDark.setFill()
        bezier3Path.fill()
    }

    public dynamic class func drawTopWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol 2 Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 50)
        context.rotate(by: -90 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: -1)

        let symbol2Rect = CGRect(x: -50, y: -50, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawRoundedUp(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedTopLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawRounded(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 80, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 80, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedTopRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawRounded(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 80, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 0, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 50)
        context.scaleBy(x: -1, y: -1)

        let symbolRect = CGRect(x: -50, y: -50, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawRoundedUp(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawRounded(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 80, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedBottomLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawRounded(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 80, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 80, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 0, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 50)
        context.rotate(by: -90 * CGFloat.pi/180)
        context.scaleBy(x: -1, y: 1)

        let symbolRect = CGRect(x: -50, y: -50, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawRoundedUp(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedBottomRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawRounded(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 80, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 0, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawUWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 86, y: -4, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawOutsideCorner(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 14, y: 0, width: 72, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()


        //// Symbol 2 Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 14)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol2Rect = CGRect(x: 0, y: 0, width: 86, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCurvedWallShort(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 4 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 14)
        context.rotate(by: -90 * CGFloat.pi/180)
        context.scaleBy(x: -1, y: 1)

        let symbol4Rect = CGRect(x: 0, y: 0, width: 86, height: 20)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawCurvedWallShort(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 6 Drawing
        context.saveGState()
        context.translateBy(x: -4, y: 14)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol6Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawOutsideCorner(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawInsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 14, y: 18))
        oval2Path.addCurve(to: CGPoint(x: 0.5, y: 31), controlPoint1: CGPoint(x: 14, y: 25.46), controlPoint2: CGPoint(x: 7.96, y: 31))
        oval2Path.addCurve(to: CGPoint(x: -13, y: 17.5), controlPoint1: CGPoint(x: -6.96, y: 31), controlPoint2: CGPoint(x: -13, y: 24.96))
        oval2Path.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: -13, y: 10.04), controlPoint2: CGPoint(x: -7.46, y: 4))
        oval2Path.addCurve(to: CGPoint(x: 14, y: 18), controlPoint1: CGPoint(x: 7.46, y: 4), controlPoint2: CGPoint(x: 14, y: 10.54))
        oval2Path.close()
        wallDark.setFill()
        oval2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 10, y: 18.37))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 28), controlPoint1: CGPoint(x: 10, y: 23.89), controlPoint2: CGPoint(x: 5.52, y: 28))
        ovalPath.addCurve(to: CGPoint(x: -10, y: 18), controlPoint1: CGPoint(x: -5.52, y: 28), controlPoint2: CGPoint(x: -10, y: 23.52))
        ovalPath.addCurve(to: CGPoint(x: -0.37, y: 8), controlPoint1: CGPoint(x: -10, y: 12.48), controlPoint2: CGPoint(x: -5.89, y: 8))
        ovalPath.addCurve(to: CGPoint(x: 10, y: 18.37), controlPoint1: CGPoint(x: 5.15, y: 8), controlPoint2: CGPoint(x: 10, y: 12.85))
        ovalPath.close()
        wallMedium.setFill()
        ovalPath.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: 6, y: 18.22))
        oval3Path.addCurve(to: CGPoint(x: -0, y: 24), controlPoint1: CGPoint(x: 6, y: 21.54), controlPoint2: CGPoint(x: 3.31, y: 24))
        oval3Path.addCurve(to: CGPoint(x: -6, y: 18), controlPoint1: CGPoint(x: -3.31, y: 24), controlPoint2: CGPoint(x: -6, y: 21.31))
        oval3Path.addCurve(to: CGPoint(x: -0.22, y: 12), controlPoint1: CGPoint(x: -6, y: 14.69), controlPoint2: CGPoint(x: -3.54, y: 12))
        oval3Path.addCurve(to: CGPoint(x: 6, y: 18.22), controlPoint1: CGPoint(x: 3.09, y: 12), controlPoint2: CGPoint(x: 6, y: 14.91))
        oval3Path.close()
        wallLight.setFill()
        oval3Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -15, y: 18, width: 33, height: 14))
        UIColor.gray.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawHoleCanvasFrost(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 19), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 19)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        var wallLightHueComponent: CGFloat = 1
        var wallLightSaturationComponent: CGFloat = 1
        var wallLightBrightnessComponent: CGFloat = 1
        wallLight.getHue(&wallLightHueComponent, saturation: &wallLightSaturationComponent, brightness: &wallLightBrightnessComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallExtraDark = UIColor(hue: wallLightHueComponent, saturation: wallLightSaturationComponent, brightness: 0.3, alpha: wallLight.cgColor.alpha)

        //// Depth Drawing
        let depthPath = UIBezierPath(ovalIn: CGRect(x: -10, y: -10, width: 20, height: 19))
        wallMedium.setFill()
        depthPath.fill()


        //// Bottom Drawing
        context.saveGState()
        context.translateBy(x: -10, y: -10)

        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 19.9, y: 11))
        bottomPath.addCurve(to: CGPoint(x: 16, y: 17), controlPoint1: CGPoint(x: 19.9, y: 13), controlPoint2: CGPoint(x: 18.44, y: 15.23))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 19), controlPoint1: CGPoint(x: 14.31, y: 18.22), controlPoint2: CGPoint(x: 12.15, y: 19))
        bottomPath.addCurve(to: CGPoint(x: 4, y: 17), controlPoint1: CGPoint(x: 7.87, y: 19), controlPoint2: CGPoint(x: 5.68, y: 18.21))
        bottomPath.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 1.53, y: 15.23), controlPoint2: CGPoint(x: 0, y: 13))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 0, y: 7.64), controlPoint2: CGPoint(x: 3, y: 4))
        bottomPath.addCurve(to: CGPoint(x: 19.9, y: 11), controlPoint1: CGPoint(x: 17, y: 4), controlPoint2: CGPoint(x: 19.9, y: 7.62))
        bottomPath.close()
        wallExtraDark.setFill()
        bottomPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawOutsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 14, y: 18))
        oval2Path.addCurve(to: CGPoint(x: 0.5, y: 31), controlPoint1: CGPoint(x: 14, y: 25.46), controlPoint2: CGPoint(x: 7.96, y: 31))
        oval2Path.addCurve(to: CGPoint(x: -13, y: 17.5), controlPoint1: CGPoint(x: -6.96, y: 31), controlPoint2: CGPoint(x: -13, y: 24.96))
        oval2Path.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: -13, y: 10.04), controlPoint2: CGPoint(x: -7.46, y: 4))
        oval2Path.addCurve(to: CGPoint(x: 14, y: 18), controlPoint1: CGPoint(x: 7.46, y: 4), controlPoint2: CGPoint(x: 14, y: 10.54))
        oval2Path.close()
        wallLight.setFill()
        oval2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 8, y: 17.78))
        ovalPath.addCurve(to: CGPoint(x: 0.5, y: 25), controlPoint1: CGPoint(x: 8, y: 21.92), controlPoint2: CGPoint(x: 4.64, y: 25))
        ovalPath.addCurve(to: CGPoint(x: -7, y: 17.5), controlPoint1: CGPoint(x: -3.64, y: 25), controlPoint2: CGPoint(x: -7, y: 21.64))
        ovalPath.addCurve(to: CGPoint(x: 0.22, y: 10), controlPoint1: CGPoint(x: -7, y: 13.36), controlPoint2: CGPoint(x: -3.92, y: 10))
        ovalPath.addCurve(to: CGPoint(x: 8, y: 17.78), controlPoint1: CGPoint(x: 4.36, y: 10), controlPoint2: CGPoint(x: 8, y: 13.64))
        ovalPath.close()
        wallMedium.setFill()
        ovalPath.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: 4, y: 18.15))
        oval3Path.addCurve(to: CGPoint(x: -0, y: 22), controlPoint1: CGPoint(x: 4, y: 20.36), controlPoint2: CGPoint(x: 2.21, y: 22))
        oval3Path.addCurve(to: CGPoint(x: -4, y: 18), controlPoint1: CGPoint(x: -2.21, y: 22), controlPoint2: CGPoint(x: -4, y: 20.21))
        oval3Path.addCurve(to: CGPoint(x: -0.15, y: 14), controlPoint1: CGPoint(x: -4, y: 15.79), controlPoint2: CGPoint(x: -2.36, y: 14))
        oval3Path.addCurve(to: CGPoint(x: 4, y: 18.15), controlPoint1: CGPoint(x: 2.06, y: 14), controlPoint2: CGPoint(x: 4, y: 15.94))
        oval3Path.close()
        wallDark.setFill()
        oval3Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -15, y: 19, width: 33, height: 14))
        UIColor.gray.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCheckerSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 10, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 10, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawChecker(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 10, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 10, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 0, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 10, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 0, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 10, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 10, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 0, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 10, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 0, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 0, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: 10, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 0, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: 10, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol16Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 17 Drawing
        let symbol17Rect = CGRect(x: 10, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol17Rect)
        context.translateBy(x: symbol17Rect.minX, y: symbol17Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol17Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 18 Drawing
        let symbol18Rect = CGRect(x: 0, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol18Rect)
        context.translateBy(x: symbol18Rect.minX, y: symbol18Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol18Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 19 Drawing
        let symbol19Rect = CGRect(x: 10, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol19Rect)
        context.translateBy(x: symbol19Rect.minX, y: symbol19Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol19Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 20 Drawing
        let symbol20Rect = CGRect(x: 0, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol20Rect)
        context.translateBy(x: symbol20Rect.minX, y: symbol20Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol20Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 21 Drawing
        let symbol21Rect = CGRect(x: 30, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol21Rect)
        context.translateBy(x: symbol21Rect.minX, y: symbol21Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol21Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 22 Drawing
        let symbol22Rect = CGRect(x: 30, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol22Rect)
        context.translateBy(x: symbol22Rect.minX, y: symbol22Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol22Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 23 Drawing
        let symbol23Rect = CGRect(x: 20, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol23Rect)
        context.translateBy(x: symbol23Rect.minX, y: symbol23Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol23Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 24 Drawing
        let symbol24Rect = CGRect(x: 20, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol24Rect)
        context.translateBy(x: symbol24Rect.minX, y: symbol24Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol24Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 25 Drawing
        let symbol25Rect = CGRect(x: 30, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol25Rect)
        context.translateBy(x: symbol25Rect.minX, y: symbol25Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol25Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 26 Drawing
        let symbol26Rect = CGRect(x: 30, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol26Rect)
        context.translateBy(x: symbol26Rect.minX, y: symbol26Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol26Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 27 Drawing
        let symbol27Rect = CGRect(x: 20, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol27Rect)
        context.translateBy(x: symbol27Rect.minX, y: symbol27Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol27Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 28 Drawing
        let symbol28Rect = CGRect(x: 20, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol28Rect)
        context.translateBy(x: symbol28Rect.minX, y: symbol28Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol28Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 29 Drawing
        let symbol29Rect = CGRect(x: 20, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol29Rect)
        context.translateBy(x: symbol29Rect.minX, y: symbol29Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol29Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 30 Drawing
        let symbol30Rect = CGRect(x: 20, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol30Rect)
        context.translateBy(x: symbol30Rect.minX, y: symbol30Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol30Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 31 Drawing
        let symbol31Rect = CGRect(x: 30, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol31Rect)
        context.translateBy(x: symbol31Rect.minX, y: symbol31Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol31Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 32 Drawing
        let symbol32Rect = CGRect(x: 30, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol32Rect)
        context.translateBy(x: symbol32Rect.minX, y: symbol32Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol32Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 33 Drawing
        let symbol33Rect = CGRect(x: 30, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol33Rect)
        context.translateBy(x: symbol33Rect.minX, y: symbol33Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol33Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 34 Drawing
        let symbol34Rect = CGRect(x: 20, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol34Rect)
        context.translateBy(x: symbol34Rect.minX, y: symbol34Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol34Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 35 Drawing
        let symbol35Rect = CGRect(x: 30, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol35Rect)
        context.translateBy(x: symbol35Rect.minX, y: symbol35Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol35Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 36 Drawing
        let symbol36Rect = CGRect(x: 30, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol36Rect)
        context.translateBy(x: symbol36Rect.minX, y: symbol36Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol36Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 37 Drawing
        let symbol37Rect = CGRect(x: 20, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol37Rect)
        context.translateBy(x: symbol37Rect.minX, y: symbol37Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol37Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 38 Drawing
        let symbol38Rect = CGRect(x: 20, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol38Rect)
        context.translateBy(x: symbol38Rect.minX, y: symbol38Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol38Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 39 Drawing
        let symbol39Rect = CGRect(x: 30, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol39Rect)
        context.translateBy(x: symbol39Rect.minX, y: symbol39Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol39Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 40 Drawing
        let symbol40Rect = CGRect(x: 20, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol40Rect)
        context.translateBy(x: symbol40Rect.minX, y: symbol40Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol40Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 41 Drawing
        let symbol41Rect = CGRect(x: 40, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol41Rect)
        context.translateBy(x: symbol41Rect.minX, y: symbol41Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol41Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 42 Drawing
        let symbol42Rect = CGRect(x: 40, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol42Rect)
        context.translateBy(x: symbol42Rect.minX, y: symbol42Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol42Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 43 Drawing
        let symbol43Rect = CGRect(x: 40, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol43Rect)
        context.translateBy(x: symbol43Rect.minX, y: symbol43Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol43Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 44 Drawing
        let symbol44Rect = CGRect(x: 40, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol44Rect)
        context.translateBy(x: symbol44Rect.minX, y: symbol44Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol44Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 45 Drawing
        let symbol45Rect = CGRect(x: 50, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol45Rect)
        context.translateBy(x: symbol45Rect.minX, y: symbol45Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol45Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 46 Drawing
        let symbol46Rect = CGRect(x: 50, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol46Rect)
        context.translateBy(x: symbol46Rect.minX, y: symbol46Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol46Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 47 Drawing
        let symbol47Rect = CGRect(x: 50, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol47Rect)
        context.translateBy(x: symbol47Rect.minX, y: symbol47Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol47Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 48 Drawing
        let symbol48Rect = CGRect(x: 40, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol48Rect)
        context.translateBy(x: symbol48Rect.minX, y: symbol48Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol48Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 49 Drawing
        let symbol49Rect = CGRect(x: 50, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol49Rect)
        context.translateBy(x: symbol49Rect.minX, y: symbol49Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol49Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 50 Drawing
        let symbol50Rect = CGRect(x: 40, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol50Rect)
        context.translateBy(x: symbol50Rect.minX, y: symbol50Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol50Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 51 Drawing
        let symbol51Rect = CGRect(x: 40, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol51Rect)
        context.translateBy(x: symbol51Rect.minX, y: symbol51Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol51Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 52 Drawing
        let symbol52Rect = CGRect(x: 50, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol52Rect)
        context.translateBy(x: symbol52Rect.minX, y: symbol52Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol52Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 53 Drawing
        let symbol53Rect = CGRect(x: 40, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol53Rect)
        context.translateBy(x: symbol53Rect.minX, y: symbol53Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol53Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 54 Drawing
        let symbol54Rect = CGRect(x: 50, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol54Rect)
        context.translateBy(x: symbol54Rect.minX, y: symbol54Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol54Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 55 Drawing
        let symbol55Rect = CGRect(x: 50, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol55Rect)
        context.translateBy(x: symbol55Rect.minX, y: symbol55Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol55Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 56 Drawing
        let symbol56Rect = CGRect(x: 50, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol56Rect)
        context.translateBy(x: symbol56Rect.minX, y: symbol56Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol56Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 57 Drawing
        let symbol57Rect = CGRect(x: 40, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol57Rect)
        context.translateBy(x: symbol57Rect.minX, y: symbol57Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol57Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 58 Drawing
        let symbol58Rect = CGRect(x: 50, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol58Rect)
        context.translateBy(x: symbol58Rect.minX, y: symbol58Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol58Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 59 Drawing
        let symbol59Rect = CGRect(x: 50, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol59Rect)
        context.translateBy(x: symbol59Rect.minX, y: symbol59Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol59Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 60 Drawing
        let symbol60Rect = CGRect(x: 40, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol60Rect)
        context.translateBy(x: symbol60Rect.minX, y: symbol60Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol60Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 61 Drawing
        let symbol61Rect = CGRect(x: 70, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol61Rect)
        context.translateBy(x: symbol61Rect.minX, y: symbol61Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol61Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 62 Drawing
        let symbol62Rect = CGRect(x: 60, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol62Rect)
        context.translateBy(x: symbol62Rect.minX, y: symbol62Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol62Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 63 Drawing
        let symbol63Rect = CGRect(x: 60, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol63Rect)
        context.translateBy(x: symbol63Rect.minX, y: symbol63Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol63Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 64 Drawing
        let symbol64Rect = CGRect(x: 70, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol64Rect)
        context.translateBy(x: symbol64Rect.minX, y: symbol64Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol64Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 65 Drawing
        let symbol65Rect = CGRect(x: 60, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol65Rect)
        context.translateBy(x: symbol65Rect.minX, y: symbol65Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol65Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 66 Drawing
        let symbol66Rect = CGRect(x: 60, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol66Rect)
        context.translateBy(x: symbol66Rect.minX, y: symbol66Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol66Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 67 Drawing
        let symbol67Rect = CGRect(x: 70, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol67Rect)
        context.translateBy(x: symbol67Rect.minX, y: symbol67Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol67Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 68 Drawing
        let symbol68Rect = CGRect(x: 60, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol68Rect)
        context.translateBy(x: symbol68Rect.minX, y: symbol68Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol68Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 69 Drawing
        let symbol69Rect = CGRect(x: 70, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol69Rect)
        context.translateBy(x: symbol69Rect.minX, y: symbol69Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol69Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 70 Drawing
        let symbol70Rect = CGRect(x: 70, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol70Rect)
        context.translateBy(x: symbol70Rect.minX, y: symbol70Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol70Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 71 Drawing
        let symbol71Rect = CGRect(x: 60, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol71Rect)
        context.translateBy(x: symbol71Rect.minX, y: symbol71Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol71Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 72 Drawing
        let symbol72Rect = CGRect(x: 70, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol72Rect)
        context.translateBy(x: symbol72Rect.minX, y: symbol72Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol72Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 73 Drawing
        let symbol73Rect = CGRect(x: 60, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol73Rect)
        context.translateBy(x: symbol73Rect.minX, y: symbol73Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol73Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 74 Drawing
        let symbol74Rect = CGRect(x: 70, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol74Rect)
        context.translateBy(x: symbol74Rect.minX, y: symbol74Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol74Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 75 Drawing
        let symbol75Rect = CGRect(x: 60, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol75Rect)
        context.translateBy(x: symbol75Rect.minX, y: symbol75Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol75Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 76 Drawing
        let symbol76Rect = CGRect(x: 70, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol76Rect)
        context.translateBy(x: symbol76Rect.minX, y: symbol76Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol76Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 77 Drawing
        let symbol77Rect = CGRect(x: 60, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol77Rect)
        context.translateBy(x: symbol77Rect.minX, y: symbol77Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol77Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 78 Drawing
        let symbol78Rect = CGRect(x: 70, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol78Rect)
        context.translateBy(x: symbol78Rect.minX, y: symbol78Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol78Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 79 Drawing
        let symbol79Rect = CGRect(x: 70, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol79Rect)
        context.translateBy(x: symbol79Rect.minX, y: symbol79Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol79Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 80 Drawing
        let symbol80Rect = CGRect(x: 60, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol80Rect)
        context.translateBy(x: symbol80Rect.minX, y: symbol80Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol80Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 81 Drawing
        let symbol81Rect = CGRect(x: 90, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol81Rect)
        context.translateBy(x: symbol81Rect.minX, y: symbol81Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol81Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 82 Drawing
        let symbol82Rect = CGRect(x: 80, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol82Rect)
        context.translateBy(x: symbol82Rect.minX, y: symbol82Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol82Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 83 Drawing
        let symbol83Rect = CGRect(x: 90, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol83Rect)
        context.translateBy(x: symbol83Rect.minX, y: symbol83Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol83Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 84 Drawing
        let symbol84Rect = CGRect(x: 90, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol84Rect)
        context.translateBy(x: symbol84Rect.minX, y: symbol84Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol84Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 85 Drawing
        let symbol85Rect = CGRect(x: 80, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol85Rect)
        context.translateBy(x: symbol85Rect.minX, y: symbol85Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol85Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 86 Drawing
        let symbol86Rect = CGRect(x: 80, y: 60, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol86Rect)
        context.translateBy(x: symbol86Rect.minX, y: symbol86Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol86Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 87 Drawing
        let symbol87Rect = CGRect(x: 90, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol87Rect)
        context.translateBy(x: symbol87Rect.minX, y: symbol87Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol87Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 88 Drawing
        let symbol88Rect = CGRect(x: 90, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol88Rect)
        context.translateBy(x: symbol88Rect.minX, y: symbol88Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol88Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 89 Drawing
        let symbol89Rect = CGRect(x: 80, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol89Rect)
        context.translateBy(x: symbol89Rect.minX, y: symbol89Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol89Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 90 Drawing
        let symbol90Rect = CGRect(x: 80, y: 90, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol90Rect)
        context.translateBy(x: symbol90Rect.minX, y: symbol90Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol90Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 91 Drawing
        let symbol91Rect = CGRect(x: 90, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol91Rect)
        context.translateBy(x: symbol91Rect.minX, y: symbol91Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol91Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 92 Drawing
        let symbol92Rect = CGRect(x: 90, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol92Rect)
        context.translateBy(x: symbol92Rect.minX, y: symbol92Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol92Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 93 Drawing
        let symbol93Rect = CGRect(x: 80, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol93Rect)
        context.translateBy(x: symbol93Rect.minX, y: symbol93Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol93Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 94 Drawing
        let symbol94Rect = CGRect(x: 80, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol94Rect)
        context.translateBy(x: symbol94Rect.minX, y: symbol94Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol94Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 95 Drawing
        let symbol95Rect = CGRect(x: 90, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol95Rect)
        context.translateBy(x: symbol95Rect.minX, y: symbol95Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol95Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 96 Drawing
        let symbol96Rect = CGRect(x: 80, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol96Rect)
        context.translateBy(x: symbol96Rect.minX, y: symbol96Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol96Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 97 Drawing
        let symbol97Rect = CGRect(x: 90, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol97Rect)
        context.translateBy(x: symbol97Rect.minX, y: symbol97Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol97Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 98 Drawing
        let symbol98Rect = CGRect(x: 80, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol98Rect)
        context.translateBy(x: symbol98Rect.minX, y: symbol98Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol98Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 99 Drawing
        let symbol99Rect = CGRect(x: 80, y: 70, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol99Rect)
        context.translateBy(x: symbol99Rect.minX, y: symbol99Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol99Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 100 Drawing
        let symbol100Rect = CGRect(x: 90, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol100Rect)
        context.translateBy(x: symbol100Rect.minX, y: symbol100Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol100Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCheckerMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 10, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 10, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 0, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 10, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 0, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 10, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 20, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 30, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 30, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 20, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 30, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: 20, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 30, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: 20, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol16Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 17 Drawing
        let symbol17Rect = CGRect(x: 40, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol17Rect)
        context.translateBy(x: symbol17Rect.minX, y: symbol17Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol17Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 18 Drawing
        let symbol18Rect = CGRect(x: 40, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol18Rect)
        context.translateBy(x: symbol18Rect.minX, y: symbol18Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol18Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 19 Drawing
        let symbol19Rect = CGRect(x: 40, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol19Rect)
        context.translateBy(x: symbol19Rect.minX, y: symbol19Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol19Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 20 Drawing
        let symbol20Rect = CGRect(x: 40, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol20Rect)
        context.translateBy(x: symbol20Rect.minX, y: symbol20Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol20Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 21 Drawing
        let symbol21Rect = CGRect(x: 0, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol21Rect)
        context.translateBy(x: symbol21Rect.minX, y: symbol21Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol21Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 22 Drawing
        let symbol22Rect = CGRect(x: 20, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol22Rect)
        context.translateBy(x: symbol22Rect.minX, y: symbol22Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol22Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 23 Drawing
        let symbol23Rect = CGRect(x: 10, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol23Rect)
        context.translateBy(x: symbol23Rect.minX, y: symbol23Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol23Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 24 Drawing
        let symbol24Rect = CGRect(x: 30, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol24Rect)
        context.translateBy(x: symbol24Rect.minX, y: symbol24Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol24Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 25 Drawing
        let symbol25Rect = CGRect(x: 40, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol25Rect)
        context.translateBy(x: symbol25Rect.minX, y: symbol25Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol25Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 26 Drawing
        let symbol26Rect = CGRect(x: 10, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol26Rect)
        context.translateBy(x: symbol26Rect.minX, y: symbol26Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol26Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 27 Drawing
        let symbol27Rect = CGRect(x: 40, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol27Rect)
        context.translateBy(x: symbol27Rect.minX, y: symbol27Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol27Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 28 Drawing
        let symbol28Rect = CGRect(x: 50, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol28Rect)
        context.translateBy(x: symbol28Rect.minX, y: symbol28Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol28Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 29 Drawing
        let symbol29Rect = CGRect(x: 20, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol29Rect)
        context.translateBy(x: symbol29Rect.minX, y: symbol29Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol29Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 30 Drawing
        let symbol30Rect = CGRect(x: 30, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol30Rect)
        context.translateBy(x: symbol30Rect.minX, y: symbol30Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol30Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 31 Drawing
        let symbol31Rect = CGRect(x: 50, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol31Rect)
        context.translateBy(x: symbol31Rect.minX, y: symbol31Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol31Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 32 Drawing
        let symbol32Rect = CGRect(x: 50, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol32Rect)
        context.translateBy(x: symbol32Rect.minX, y: symbol32Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol32Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 33 Drawing
        let symbol33Rect = CGRect(x: 50, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol33Rect)
        context.translateBy(x: symbol33Rect.minX, y: symbol33Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol33Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 34 Drawing
        let symbol34Rect = CGRect(x: 50, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol34Rect)
        context.translateBy(x: symbol34Rect.minX, y: symbol34Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol34Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 35 Drawing
        let symbol35Rect = CGRect(x: 50, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol35Rect)
        context.translateBy(x: symbol35Rect.minX, y: symbol35Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol35Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 36 Drawing
        let symbol36Rect = CGRect(x: 0, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol36Rect)
        context.translateBy(x: symbol36Rect.minX, y: symbol36Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol36Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCheckerCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 10, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 0, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 10, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 0, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 10, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 20, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 30, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 30, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 20, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 30, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: 20, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 30, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: 20, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol16Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 17 Drawing
        let symbol17Rect = CGRect(x: 40, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol17Rect)
        context.translateBy(x: symbol17Rect.minX, y: symbol17Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol17Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 18 Drawing
        let symbol18Rect = CGRect(x: 40, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol18Rect)
        context.translateBy(x: symbol18Rect.minX, y: symbol18Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol18Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 19 Drawing
        let symbol19Rect = CGRect(x: 40, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol19Rect)
        context.translateBy(x: symbol19Rect.minX, y: symbol19Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol19Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 20 Drawing
        let symbol20Rect = CGRect(x: 40, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol20Rect)
        context.translateBy(x: symbol20Rect.minX, y: symbol20Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol20Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 21 Drawing
        let symbol21Rect = CGRect(x: 0, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol21Rect)
        context.translateBy(x: symbol21Rect.minX, y: symbol21Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol21Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 22 Drawing
        let symbol22Rect = CGRect(x: 20, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol22Rect)
        context.translateBy(x: symbol22Rect.minX, y: symbol22Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol22Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 23 Drawing
        let symbol23Rect = CGRect(x: 10, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol23Rect)
        context.translateBy(x: symbol23Rect.minX, y: symbol23Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol23Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 24 Drawing
        let symbol24Rect = CGRect(x: 30, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol24Rect)
        context.translateBy(x: symbol24Rect.minX, y: symbol24Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol24Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 25 Drawing
        let symbol25Rect = CGRect(x: 40, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol25Rect)
        context.translateBy(x: symbol25Rect.minX, y: symbol25Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol25Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 26 Drawing
        let symbol26Rect = CGRect(x: 10, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol26Rect)
        context.translateBy(x: symbol26Rect.minX, y: symbol26Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol26Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 27 Drawing
        let symbol27Rect = CGRect(x: 40, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol27Rect)
        context.translateBy(x: symbol27Rect.minX, y: symbol27Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol27Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 28 Drawing
        let symbol28Rect = CGRect(x: 50, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol28Rect)
        context.translateBy(x: symbol28Rect.minX, y: symbol28Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol28Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 29 Drawing
        let symbol29Rect = CGRect(x: 20, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol29Rect)
        context.translateBy(x: symbol29Rect.minX, y: symbol29Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol29Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 30 Drawing
        let symbol30Rect = CGRect(x: 30, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol30Rect)
        context.translateBy(x: symbol30Rect.minX, y: symbol30Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol30Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 31 Drawing
        let symbol31Rect = CGRect(x: 50, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol31Rect)
        context.translateBy(x: symbol31Rect.minX, y: symbol31Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol31Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 32 Drawing
        let symbol32Rect = CGRect(x: 50, y: 20, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol32Rect)
        context.translateBy(x: symbol32Rect.minX, y: symbol32Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol32Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 33 Drawing
        let symbol33Rect = CGRect(x: 50, y: 30, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol33Rect)
        context.translateBy(x: symbol33Rect.minX, y: symbol33Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol33Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 34 Drawing
        let symbol34Rect = CGRect(x: 50, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol34Rect)
        context.translateBy(x: symbol34Rect.minX, y: symbol34Rect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbol34Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 35 Drawing
        let symbol35Rect = CGRect(x: 50, y: 40, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol35Rect)
        context.translateBy(x: symbol35Rect.minX, y: symbol35Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol35Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 36 Drawing
        let symbol36Rect = CGRect(x: 0, y: 50, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol36Rect)
        context.translateBy(x: symbol36Rect.minX, y: symbol36Rect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbol36Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLighttileMini(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 10), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 10)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawLighttile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawDarktileMini(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 10), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 10)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawDarktile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRounded(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 20, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 20, y: 20, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 20, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 40, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 40, y: 20, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 60, y: 20, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 60, y: 0, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 80, y: 20, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 80, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawLighttileMini(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 80, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawDarktileMini(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 40, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 60, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 20, y: 40, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: 20, y: 60, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 20, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: 40, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol16Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 17 Drawing
        let symbol17Rect = CGRect(x: 60, y: 80, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol17Rect)
        context.translateBy(x: symbol17Rect.minX, y: symbol17Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol17Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 18 Drawing
        let symbol18Rect = CGRect(x: 60, y: 60, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol18Rect)
        context.translateBy(x: symbol18Rect.minX, y: symbol18Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol18Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 19 Drawing
        let symbol19Rect = CGRect(x: 60, y: 40, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol19Rect)
        context.translateBy(x: symbol19Rect.minX, y: symbol19Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol19Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 20 Drawing
        let symbol20Rect = CGRect(x: 80, y: 40, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol20Rect)
        context.translateBy(x: symbol20Rect.minX, y: symbol20Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol20Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 21 Drawing
        let symbol21Rect = CGRect(x: 80, y: 60, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol21Rect)
        context.translateBy(x: symbol21Rect.minX, y: symbol21Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol21Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 22 Drawing
        let symbol22Rect = CGRect(x: 40, y: 60, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol22Rect)
        context.translateBy(x: symbol22Rect.minX, y: symbol22Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol22Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 23 Drawing
        let symbol23Rect = CGRect(x: 40, y: 40, width: 20, height: 20)
        context.saveGState()
        context.clip(to: symbol23Rect)
        context.translateBy(x: symbol23Rect.minX, y: symbol23Rect.minY)

        TilesStyleKit.drawCheckerSmall(frame: CGRect(origin: .zero, size: symbol23Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 24 Drawing
        let symbol24Rect = CGRect(x: 10, y: 80, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol24Rect)
        context.translateBy(x: symbol24Rect.minX, y: symbol24Rect.minY)

        TilesStyleKit.drawDarktileMini(frame: CGRect(origin: .zero, size: symbol24Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()


        //// Symbol 25 Drawing
        let symbol25Rect = CGRect(x: 10, y: 10, width: 10, height: 10)
        context.saveGState()
        context.clip(to: symbol25Rect)
        context.translateBy(x: symbol25Rect.minX, y: symbol25Rect.minY)

        TilesStyleKit.drawLighttileMini(frame: CGRect(origin: .zero, size: symbol25Rect.size), resizing: .stretch, lightTile: lightTile)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberBlankTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        context.saveGState()
        rectanglePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRound(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 4.86, y: 0), controlPoint1: CGPoint(x: 29, y: 0), controlPoint2: CGPoint(x: 13.12, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 1.96, y: 0), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 69, y: 0), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 29, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: -0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: -0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 13.72), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 30.72))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0.26, y: 30.72), controlPoint2: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundTopLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 31))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 31.03))
        bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 14.98), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 7.58, y: 22.9))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 22.07, y: 7.41), controlPoint2: CGPoint(x: 29, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 69))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: -0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 0), controlPoint1: CGPoint(x: 100, y: 29), controlPoint2: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundTopRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 14.98), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 77.1, y: 7.58))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 92.59, y: 22.07), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundBottomLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 85.02), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 22.9, y: 92.42))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 7.41, y: 77.93), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: 0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 100))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 41.47), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberRoundBottomRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let plaid2 = UIImage(named: "plaid2.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 86.93, y: 82.98), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 93.67, y: 75.77))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 85.02), controlPoint1: CGPoint(x: 86.29, y: 83.65), controlPoint2: CGPoint(x: 85.65, y: 84.34))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 77.93, y: 92.59), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(plaid2.cgImage!, in: CGRect(x: 0, y: 0, width: plaid2.size.width, height: plaid2.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 14)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberWallCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 20)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWall(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberWallCurvedShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 20)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberUWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberCornerWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCornerWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberWallSingle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawTopWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberUpDownWalls(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawStraightWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 14)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundBottomRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 86.93, y: 82.98), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 93.67, y: 75.77))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 85.02), controlPoint1: CGPoint(x: 86.29, y: 83.65), controlPoint2: CGPoint(x: 85.65, y: 84.34))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 77.93, y: 92.59), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRound(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 100))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 41.47), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 69))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: -0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 0), controlPoint1: CGPoint(x: 100, y: 29), controlPoint2: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundBottomLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 85.02), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 22.9, y: 92.42))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 7.41, y: 77.93), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: 0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostUWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostWallCurvedShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 20)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundTopRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 14.98), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 77.1, y: 7.58))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 92.59, y: 22.07), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: -0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: -0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 13.72), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 30.72))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0.26, y: 30.72), controlPoint2: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostCornerWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCornerWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostWallSingle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawTopWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundTopLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 31))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 31.03))
        bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 14.98), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 7.58, y: 22.9))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 22.07, y: 7.41), controlPoint2: CGPoint(x: 29, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostWallCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 20)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWall(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostRoundUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 4.86, y: 0), controlPoint1: CGPoint(x: 29, y: 0), controlPoint2: CGPoint(x: 13.12, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 1.96, y: 0), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 69, y: 0), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 29, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostUpDownWalls(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawStraightWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberInsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawInsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberOutsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawOutsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostOutsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawOutsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostInsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawInsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeInsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawInsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundBottomLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 85.02), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 22.9, y: 92.42))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 7.41, y: 77.93), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: 0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 14)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeUWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundBottomRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 86.93, y: 82.98), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 93.67, y: 75.77))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 85.02), controlPoint1: CGPoint(x: 86.29, y: 83.65), controlPoint2: CGPoint(x: 85.65, y: 84.34))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 77.93, y: 92.59), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeUpDownWalls(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawStraightWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeBlankTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        context.saveGState()
        rectanglePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(coleAndSonGeometricLabyrinth935018.cgImage!, in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 4.86, y: 0), controlPoint1: CGPoint(x: 29, y: 0), controlPoint2: CGPoint(x: 13.12, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 1.96, y: 0), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 69, y: 0), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 29, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeWallSingle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawTopWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeCornerWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCornerWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 69))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: -0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 0), controlPoint1: CGPoint(x: 100, y: 29), controlPoint2: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundTopRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 14.98), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 77.1, y: 7.58))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 92.59, y: 22.07), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeWallCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 20)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWall(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundTopLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, condition: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        if (condition) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 100, y: 0))
            bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
            bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
            bezier2Path.addLine(to: CGPoint(x: 0, y: 31))
            bezier2Path.addLine(to: CGPoint(x: 0, y: 31.03))
            bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 14.98), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 7.58, y: 22.9))
            bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 22.07, y: 7.41), controlPoint2: CGPoint(x: 29, y: -0))
            bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
            bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
            bezier2Path.close()
            context.saveGState()
            bezier2Path.addClip()
            coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: -0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: -0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 13.72), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 30.72))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0.26, y: 30.72), controlPoint2: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeOutsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawOutsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRound(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeWallCurvedShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 20)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeRoundDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let coleAndSonGeometricLabyrinth935018 = UIImage(named: "coleAndSonGeometricLabyrinth935018.jpg")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 100))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 41.47), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        coleAndSonGeometricLabyrinth935018.draw(in: CGRect(x: 0, y: 0, width: coleAndSonGeometricLabyrinth935018.size.width, height: coleAndSonGeometricLabyrinth935018.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 29, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 4.86, y: 0), controlPoint1: CGPoint(x: 29, y: 0), controlPoint2: CGPoint(x: 13.12, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 1.96, y: 0), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 0))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 69, y: 0), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 29, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundTopLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 31))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 31.03))
        bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 14.98), controlPoint1: CGPoint(x: 0, y: 31), controlPoint2: CGPoint(x: 7.58, y: 22.9))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 22.07, y: 7.41), controlPoint2: CGPoint(x: 29, y: -0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaWallCurvedShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 20)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaInsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawInsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: -0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: -0, y: 100), controlPoint2: CGPoint(x: 0, y: 60.36))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 13.72), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 31), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 30.72))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 0.26, y: 30.72), controlPoint2: CGPoint(x: 29, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundTopRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 14.98), controlPoint1: CGPoint(x: 69, y: 0), controlPoint2: CGPoint(x: 77.1, y: 7.58))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 92.59, y: 22.07), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 58.53), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaWallSingle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawTopWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaUpDownWalls(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawStraightWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundBottom(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 100))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: -0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 41.47), controlPoint2: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaOutsideCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawOutsideCorner(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 14)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaWallCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 20)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCurvedWall(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaCornerWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCornerWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaBlankTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        context.saveGState()
        rectanglePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRound(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundBottomLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 14.98, y: 85.02), controlPoint1: CGPoint(x: 31, y: 100), controlPoint2: CGPoint(x: 22.9, y: 92.42))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 71), controlPoint1: CGPoint(x: 7.41, y: 77.93), controlPoint2: CGPoint(x: -0, y: 71))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 100), controlPoint1: CGPoint(x: 0, y: 71), controlPoint2: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaUWall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 100), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 69))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 69, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 29), controlPoint1: CGPoint(x: 69, y: -0), controlPoint2: CGPoint(x: 100, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 0), controlPoint1: CGPoint(x: 100, y: 29), controlPoint2: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaRoundBottomRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let woven = UIImage(named: "woven.png")!

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 100, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 69), controlPoint1: CGPoint(x: 100, y: 0), controlPoint2: CGPoint(x: 100, y: 39.64))
        bezier2Path.addCurve(to: CGPoint(x: 86.93, y: 82.98), controlPoint1: CGPoint(x: 100, y: 69), controlPoint2: CGPoint(x: 93.67, y: 75.77))
        bezier2Path.addCurve(to: CGPoint(x: 85.02, y: 85.02), controlPoint1: CGPoint(x: 86.29, y: 83.65), controlPoint2: CGPoint(x: 85.65, y: 84.34))
        bezier2Path.addCurve(to: CGPoint(x: 71, y: 100), controlPoint1: CGPoint(x: 77.93, y: 92.59), controlPoint2: CGPoint(x: 71, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 0))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(woven.cgImage!, in: CGRect(x: 0, y: 0, width: woven.size.width, height: woven.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberExample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawTimberRoundUp(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostExample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawFrostRoundUp(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeExample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 528, height: 338), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 528, height: 338), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 528, y: resizedFrame.height / 338)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)
        let color21 = UIColor(red: 0.586, green: 0.457, blue: 0.177, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 368, height: 338))
        color21.setFill()
        rectanglePath.fill()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawBlazePattern(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 100, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawBlazePattern(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 100, y: 100, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawBlazePattern(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 200, y: 100, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawBlazePattern(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 200, y: 200, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawBlazePattern(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 100, y: 100, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawBlazeWall(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 200, y: 200, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawBlazeUpDownWalls(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 10 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 200)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol10Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawBlazeCornerWall(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 11 Drawing
        context.saveGState()
        context.translateBy(x: 200, y: 200)
        context.rotate(by: 180 * CGFloat.pi/180)

        let symbol11Rect = CGRect(x: 0, y: 0, width: 100, height: 20)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawBlazeWall(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 200, y: 182, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawBlazeInsideCorner(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 13 Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 118)
        context.rotate(by: 180 * CGFloat.pi/180)

        let symbol13Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawBlazeInsideCorner(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 368, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: 368, y: 100, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 268, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: 268, y: 100, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol16Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 17 Drawing
        let symbol17Rect = CGRect(x: 368, y: 200, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol17Rect)
        context.translateBy(x: symbol17Rect.minX, y: symbol17Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol17Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 18 Drawing
        let symbol18Rect = CGRect(x: 268, y: 200, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol18Rect)
        context.translateBy(x: symbol18Rect.minX, y: symbol18Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol18Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 19 Drawing
        let symbol19Rect = CGRect(x: 468, y: 100, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol19Rect)
        context.translateBy(x: symbol19Rect.minX, y: symbol19Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol19Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 20 Drawing
        let symbol20Rect = CGRect(x: 468, y: 200, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol20Rect)
        context.translateBy(x: symbol20Rect.minX, y: symbol20Rect.minY)

        TilesStyleKit.drawCanvas8(frame: CGRect(origin: .zero, size: symbol20Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaExample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawNebulaRoundUp(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawUWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberConnectingCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 18))
        bezierPath.addLine(to: CGPoint(x: 0, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 6.69, y: 16.81), controlPoint1: CGPoint(x: 2.5, y: 17.83), controlPoint2: CGPoint(x: 4.56, y: 17.49))
        bezierPath.addCurve(to: CGPoint(x: 16.8, y: 6.7), controlPoint1: CGPoint(x: 11.39, y: 15.1), controlPoint2: CGPoint(x: 15.09, y: 11.4))
        bezierPath.addLine(to: CGPoint(x: 16.97, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 17.55, y: 4.23), controlPoint2: CGPoint(x: 17.85, y: 2.38))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 16.14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        timberWalls.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostConnectingCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 18))
        bezierPath.addLine(to: CGPoint(x: 0, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 6.69, y: 16.81), controlPoint1: CGPoint(x: 2.5, y: 17.83), controlPoint2: CGPoint(x: 4.56, y: 17.49))
        bezierPath.addCurve(to: CGPoint(x: 16.8, y: 6.7), controlPoint1: CGPoint(x: 11.39, y: 15.1), controlPoint2: CGPoint(x: 15.09, y: 11.4))
        bezierPath.addLine(to: CGPoint(x: 16.97, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 17.55, y: 4.23), controlPoint2: CGPoint(x: 17.85, y: 2.38))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 16.14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        frostWalls.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeConnectingCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 18))
        bezierPath.addLine(to: CGPoint(x: 0, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 6.69, y: 16.81), controlPoint1: CGPoint(x: 2.5, y: 17.83), controlPoint2: CGPoint(x: 4.56, y: 17.49))
        bezierPath.addCurve(to: CGPoint(x: 16.8, y: 6.7), controlPoint1: CGPoint(x: 11.39, y: 15.1), controlPoint2: CGPoint(x: 15.09, y: 11.4))
        bezierPath.addLine(to: CGPoint(x: 16.97, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 17.55, y: 4.23), controlPoint2: CGPoint(x: 17.85, y: 2.38))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 16.14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        blazeWalls.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaConnectingCorner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 18))
        bezierPath.addLine(to: CGPoint(x: 0, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 6.69, y: 16.81), controlPoint1: CGPoint(x: 2.5, y: 17.83), controlPoint2: CGPoint(x: 4.56, y: 17.49))
        bezierPath.addCurve(to: CGPoint(x: 16.8, y: 6.7), controlPoint1: CGPoint(x: 11.39, y: 15.1), controlPoint2: CGPoint(x: 15.09, y: 11.4))
        bezierPath.addLine(to: CGPoint(x: 16.97, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 17.55, y: 4.23), controlPoint2: CGPoint(x: 17.85, y: 2.38))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 18, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0, y: 0), controlPoint2: CGPoint(x: 0, y: 16.14))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.close()
        nebulaWalls.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSlabShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Group 4
        context.saveGState()
        context.translateBy(x: 89, y: 65)
        context.rotate(by: 180 * CGFloat.pi/180)



        //// Bezier 13 Drawing
        context.saveGState()
        context.translateBy(x: 78, y: -0)
        context.rotate(by: -180 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: -1)

        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 64, y: 28))
        bezier13Path.addLine(to: CGPoint(x: 14, y: 28))
        bezier13Path.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.54, y: 28), controlPoint2: CGPoint(x: 0, y: 21.46))
        bezier13Path.addCurve(to: CGPoint(x: 14, y: 14), controlPoint1: CGPoint(x: 0, y: 14), controlPoint2: CGPoint(x: 5.84, y: 14))
        bezier13Path.addLine(to: CGPoint(x: 78, y: 14))
        bezier13Path.addCurve(to: CGPoint(x: 64, y: 28), controlPoint1: CGPoint(x: 78, y: 21.46), controlPoint2: CGPoint(x: 71.46, y: 28))
        bezier13Path.close()
        bezier13Path.move(to: CGPoint(x: 14, y: 0))
        bezier13Path.addCurve(to: CGPoint(x: 64, y: 0), controlPoint1: CGPoint(x: 14, y: -0), controlPoint2: CGPoint(x: 64, y: 0))
        bezier13Path.addCurve(to: CGPoint(x: 78, y: 14), controlPoint1: CGPoint(x: 71.46, y: 0), controlPoint2: CGPoint(x: 78, y: 6.54))
        bezier13Path.addLine(to: CGPoint(x: 14, y: 14))
        bezier13Path.addLine(to: CGPoint(x: 0, y: 14))
        bezier13Path.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.54), controlPoint2: CGPoint(x: 6.54, y: 0))
        bezier13Path.addLine(to: CGPoint(x: 14, y: 0))
        bezier13Path.close()
        wallDark.setFill()
        bezier13Path.fill()

        context.restoreGState()


        //// Group 6
        context.saveGState()
        context.translateBy(x: 64, y: 0)
        context.scaleBy(x: -1, y: 1)



        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: -0, y: 24)
        context.scaleBy(x: 1, y: -1)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 50, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 59.99, y: 10), controlPoint1: CGPoint(x: 55.24, y: 0.21), controlPoint2: CGPoint(x: 59.79, y: 4.76))
        bezier3Path.addLine(to: CGPoint(x: 40, y: 10))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier3Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier3Path.close()
        wallMedium.setFill()
        bezier3Path.fill()

        context.restoreGState()


        //// Bezier 4 Drawing
        context.saveGState()
        context.translateBy(x: -0, y: 20)
        context.scaleBy(x: 1, y: -1)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 56, y: 6))
        bezier4Path.addLine(to: CGPoint(x: 44, y: 6))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 6))
        bezier4Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 6), controlPoint2: CGPoint(x: 0, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 49.78, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier4Path.addCurve(to: CGPoint(x: 56, y: 6), controlPoint1: CGPoint(x: 53.15, y: 0.13), controlPoint2: CGPoint(x: 55.87, y: 2.85))
        bezier4Path.close()
        wallLight.setFill()
        bezier4Path.fill()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 24)
        context.rotate(by: 180 * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 50, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 59.99, y: 10), controlPoint1: CGPoint(x: 55.24, y: 0.21), controlPoint2: CGPoint(x: 59.79, y: 4.76))
        bezier5Path.addLine(to: CGPoint(x: 40, y: 10))
        bezier5Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier5Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier5Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier5Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier5Path.close()
        wallMedium.setFill()
        bezier5Path.fill()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 20)
        context.rotate(by: 180 * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 56, y: 6))
        bezier6Path.addLine(to: CGPoint(x: 44, y: 6))
        bezier6Path.addLine(to: CGPoint(x: 0, y: 6))
        bezier6Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 6), controlPoint2: CGPoint(x: 0, y: 0))
        bezier6Path.addLine(to: CGPoint(x: 49.78, y: 0))
        bezier6Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier6Path.addCurve(to: CGPoint(x: 56, y: 6), controlPoint1: CGPoint(x: 53.15, y: 0.13), controlPoint2: CGPoint(x: 55.87, y: 2.85))
        bezier6Path.close()
        wallLight.setFill()
        bezier6Path.fill()

        context.restoreGState()


        //// Bezier 8 Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 4)
        context.rotate(by: -180 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: -1)

        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 50, y: 0))
        bezier8Path.addCurve(to: CGPoint(x: 59.99, y: 10), controlPoint1: CGPoint(x: 55.24, y: 0.21), controlPoint2: CGPoint(x: 59.79, y: 4.76))
        bezier8Path.addLine(to: CGPoint(x: 40, y: 10))
        bezier8Path.addLine(to: CGPoint(x: 0, y: 10))
        bezier8Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier8Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier8Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier8Path.close()
        wallMedium.setFill()
        bezier8Path.fill()

        context.restoreGState()


        //// Bezier 9 Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 8)
        context.rotate(by: -180 * CGFloat.pi/180)
        context.scaleBy(x: 1, y: -1)

        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 56, y: 6))
        bezier9Path.addLine(to: CGPoint(x: 44, y: 6))
        bezier9Path.addLine(to: CGPoint(x: 0, y: 6))
        bezier9Path.addCurve(to: CGPoint(x: 0, y: 0), controlPoint1: CGPoint(x: 0, y: 6), controlPoint2: CGPoint(x: 0, y: 0))
        bezier9Path.addLine(to: CGPoint(x: 49.78, y: 0))
        bezier9Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier9Path.addCurve(to: CGPoint(x: 56, y: 6), controlPoint1: CGPoint(x: 53.15, y: 0.13), controlPoint2: CGPoint(x: 55.87, y: 2.85))
        bezier9Path.close()
        wallLight.setFill()
        bezier9Path.fill()

        context.restoreGState()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 50, y: 4))
        bezier11Path.addCurve(to: CGPoint(x: 59.99, y: 14), controlPoint1: CGPoint(x: 55.24, y: 4.21), controlPoint2: CGPoint(x: 59.79, y: 8.76))
        bezier11Path.addLine(to: CGPoint(x: 40, y: 14))
        bezier11Path.addLine(to: CGPoint(x: 0, y: 14))
        bezier11Path.addLine(to: CGPoint(x: 0, y: 4))
        bezier11Path.addLine(to: CGPoint(x: 50, y: 4))
        bezier11Path.addLine(to: CGPoint(x: 50, y: 4))
        bezier11Path.close()
        wallMedium.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 56, y: 14))
        bezier12Path.addLine(to: CGPoint(x: 44, y: 14))
        bezier12Path.addLine(to: CGPoint(x: 0, y: 14))
        bezier12Path.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 14), controlPoint2: CGPoint(x: 0, y: 8))
        bezier12Path.addLine(to: CGPoint(x: 49.78, y: 8))
        bezier12Path.addLine(to: CGPoint(x: 50, y: 8))
        bezier12Path.addCurve(to: CGPoint(x: 56, y: 14), controlPoint1: CGPoint(x: 53.15, y: 8.13), controlPoint2: CGPoint(x: 55.87, y: 10.85))
        bezier12Path.close()
        wallLight.setFill()
        bezier12Path.fill()



        context.restoreGState()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostSlabShot(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLogoPrototype(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 39, height: 46), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 39, height: 46), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 39, y: resizedFrame.height / 46)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 39, resizedFrame.height / 46)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Shadow Declarations
        let wallShadow = NSShadow()
        wallShadow.shadowColor = UIColor.black
        wallShadow.shadowOffset = CGSize(width: 0, height: 0)
        wallShadow.shadowBlurRadius = 4

        //// Group 4
        context.saveGState()
        context.translateBy(x: 7, y: 71)
        context.rotate(by: -90 * CGFloat.pi/180)



        //// Group 3


        //// Group
        //// Group 2
        context.saveGState()
        context.translateBy(x: 93, y: 14)
        context.rotate(by: 180 * CGFloat.pi/180)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 55.99, y: -0))
        bezierPath.addLine(to: CGPoint(x: 93, y: 0))
        bezierPath.addLine(to: CGPoint(x: 93, y: 14))
        bezierPath.addLine(to: CGPoint(x: 43, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 0), controlPoint1: CGPoint(x: 35.54, y: 14), controlPoint2: CGPoint(x: 29, y: 7.46))
        bezierPath.addCurve(to: CGPoint(x: 42.5, y: -13), controlPoint1: CGPoint(x: 29, y: -7.46), controlPoint2: CGPoint(x: 35.04, y: -13))
        bezierPath.addCurve(to: CGPoint(x: 55.99, y: -0), controlPoint1: CGPoint(x: 49.79, y: -13), controlPoint2: CGPoint(x: 55.73, y: -7.22))
        bezierPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallDark.setFill()
        bezierPath.fill()
        context.restoreGState()



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 53, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 93, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 93, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 43, y: 10))
        bezier2Path.addCurve(to: CGPoint(x: 33, y: -0.37), controlPoint1: CGPoint(x: 37.63, y: 9.78), controlPoint2: CGPoint(x: 33, y: 5.03))
        bezier2Path.addCurve(to: CGPoint(x: 43, y: -10), controlPoint1: CGPoint(x: 33, y: -5.89), controlPoint2: CGPoint(x: 37.48, y: -10))
        bezier2Path.addCurve(to: CGPoint(x: 53, y: 0), controlPoint1: CGPoint(x: 48.52, y: -10), controlPoint2: CGPoint(x: 53, y: -5.52))
        bezier2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallMedium.setFill()
        bezier2Path.fill()
        context.restoreGState()



        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 49, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 93, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 93, y: 6))
        bezier3Path.addLine(to: CGPoint(x: 43.22, y: 6))
        bezier3Path.addLine(to: CGPoint(x: 43, y: 6))
        bezier3Path.addCurve(to: CGPoint(x: 37, y: -0.22), controlPoint1: CGPoint(x: 39.78, y: 5.87), controlPoint2: CGPoint(x: 37, y: 3.02))
        bezier3Path.addCurve(to: CGPoint(x: 43, y: -6), controlPoint1: CGPoint(x: 37, y: -3.54), controlPoint2: CGPoint(x: 39.69, y: -6))
        bezier3Path.addCurve(to: CGPoint(x: 49, y: 0), controlPoint1: CGPoint(x: 46.31, y: -6), controlPoint2: CGPoint(x: 49, y: -3.31))
        bezier3Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallLight.setFill()
        bezier3Path.fill()
        context.restoreGState()




        context.restoreGState()





        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLogoPrototypeColorized(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 39, height: 46), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 39, height: 46), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 39, y: resizedFrame.height / 46)


        //// Color Declarations
        let timberTiles = UIColor(red: 0.320, green: 0.800, blue: 0.373, alpha: 1.000)
        let logoGradientColor = UIColor(red: 0.620, green: 0.620, blue: 0.620, alpha: 1.000)

        //// Gradient Declarations
        let logoGradient = CGGradient(colorsSpace: nil, colors: [UIColor.white.cgColor, logoGradientColor.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 39, height: 46))
        context.saveGState()
        rectanglePath.addClip()
        context.drawRadialGradient(logoGradient,
            startCenter: CGPoint(x: 21.02, y: 21.21), startRadius: 10.11,
            endCenter: CGPoint(x: 14.45, y: 28.05), endRadius: 42.89,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 39, height: 46)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawLogoPrototype(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberTiles)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawLogoPrototypePieces(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 39, height: 46), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 39, height: 46), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 39, y: resizedFrame.height / 46)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Group 4
        context.saveGState()
        context.translateBy(x: 7, y: 71)
        context.rotate(by: -90 * CGFloat.pi/180)



        //// Group 3
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 64, y: 14))
        oval2Path.addCurve(to: CGPoint(x: 50.5, y: 27), controlPoint1: CGPoint(x: 64, y: 21.46), controlPoint2: CGPoint(x: 57.96, y: 27))
        oval2Path.addCurve(to: CGPoint(x: 37, y: 13.5), controlPoint1: CGPoint(x: 43.04, y: 27), controlPoint2: CGPoint(x: 37, y: 20.96))
        oval2Path.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 37, y: 6.04), controlPoint2: CGPoint(x: 42.54, y: 0))
        oval2Path.addCurve(to: CGPoint(x: 64, y: 14), controlPoint1: CGPoint(x: 57.46, y: 0), controlPoint2: CGPoint(x: 64, y: 6.54))
        oval2Path.close()
        wallDark.setFill()
        oval2Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 60, y: 14.37))
        ovalPath.addCurve(to: CGPoint(x: 50, y: 24), controlPoint1: CGPoint(x: 60, y: 19.89), controlPoint2: CGPoint(x: 55.52, y: 24))
        ovalPath.addCurve(to: CGPoint(x: 40, y: 14), controlPoint1: CGPoint(x: 44.48, y: 24), controlPoint2: CGPoint(x: 40, y: 19.52))
        ovalPath.addCurve(to: CGPoint(x: 49.63, y: 4), controlPoint1: CGPoint(x: 40, y: 8.48), controlPoint2: CGPoint(x: 44.11, y: 4))
        ovalPath.addCurve(to: CGPoint(x: 60, y: 14.37), controlPoint1: CGPoint(x: 55.15, y: 4), controlPoint2: CGPoint(x: 60, y: 8.85))
        ovalPath.close()
        wallMedium.setFill()
        ovalPath.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.move(to: CGPoint(x: 56, y: 14.22))
        oval3Path.addCurve(to: CGPoint(x: 50, y: 20), controlPoint1: CGPoint(x: 56, y: 17.54), controlPoint2: CGPoint(x: 53.31, y: 20))
        oval3Path.addCurve(to: CGPoint(x: 44, y: 14), controlPoint1: CGPoint(x: 46.69, y: 20), controlPoint2: CGPoint(x: 44, y: 17.31))
        oval3Path.addCurve(to: CGPoint(x: 49.78, y: 8), controlPoint1: CGPoint(x: 44, y: 10.69), controlPoint2: CGPoint(x: 46.46, y: 8))
        oval3Path.addCurve(to: CGPoint(x: 56, y: 14.22), controlPoint1: CGPoint(x: 53.09, y: 8), controlPoint2: CGPoint(x: 56, y: 10.91))
        oval3Path.close()
        wallLight.setFill()
        oval3Path.fill()




        //// Group
        //// Group 2
        context.saveGState()
        context.translateBy(x: 93, y: 14)
        context.rotate(by: 180 * CGFloat.pi/180)



        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 43, y: 0, width: 50, height: 14))
        wallDark.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 43, y: 0, width: 50, height: 10))
        wallMedium.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 43, y: -0, width: 50, height: 6))
        wallLight.setFill()
        rectangle3Path.fill()



        context.restoreGState()





        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawWallShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 72, height: 20), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 72, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 72, y: resizedFrame.height / 20)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 14))
        wallDark.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 10))
        wallMedium.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 6))
        wallLight.setFill()
        rectangle3Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberWallShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 72, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 72, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 72, y: resizedFrame.height / 20)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 72, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostWallShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 72, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 72, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 72, y: resizedFrame.height / 20)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 72, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeWallShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 72, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 72, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 72, y: resizedFrame.height / 20)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 72, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaWallShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 72, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 72, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 72, y: resizedFrame.height / 20)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 72, height: 20)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawWallShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 500, height: 500), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 500, height: 500), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 500, y: resizedFrame.height / 500)


        //// Color Declarations
        let wallColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color19 = UIColor(red: 0.269, green: 0.558, blue: 0.689, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -31, y: 0, width: 524, height: 500))
        color19.setFill()
        rectanglePath.fill()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 132, y: 140, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawFrostBlankTile(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 132, y: 140, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawFrostSlabShot(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 232, y: 140, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawFrostRoundTopRight(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 132, y: 240, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawFrostBlankTile(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 32, y: 140, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawFrostRoundTopLeft(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 232, y: 240, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawFrostRoundBottomRight(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 10 Drawing
        context.saveGState()
        context.translateBy(x: 332, y: 140)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol10Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawFrostCornerWall(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 32, y: 240, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawFrostRoundBottomLeft(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 13 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 340)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol13Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawFrostCornerWall(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: 132, y: 40, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        TilesStyleKit.drawFrostRoundUp(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 132, y: 340, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        TilesStyleKit.drawFrostRoundDown(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 26 Drawing
        context.saveGState()
        context.translateBy(x: 232, y: 240)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol26Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol26Rect)
        context.translateBy(x: symbol26Rect.minX, y: symbol26Rect.minY)

        TilesStyleKit.drawFrostVelocityTile(frame: CGRect(origin: .zero, size: symbol26Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 332, y: 340)
        context.rotate(by: -180 * CGFloat.pi/180)

        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawFrostCornerWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: 132, y: 40, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        TilesStyleKit.drawFrostUWall(frame: CGRect(origin: .zero, size: symbol16Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 32, y: 140, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawFrostCornerWall(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 17 Drawing
        context.saveGState()
        context.translateBy(x: 232, y: 440)
        context.rotate(by: 180 * CGFloat.pi/180)

        let symbol17Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol17Rect)
        context.translateBy(x: symbol17Rect.minX, y: symbol17Rect.minY)

        TilesStyleKit.drawFrostUWall(frame: CGRect(origin: .zero, size: symbol17Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 18 Drawing
        let symbol18Rect = CGRect(x: 132, y: 322, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol18Rect)
        context.translateBy(x: symbol18Rect.minX, y: symbol18Rect.minY)

        TilesStyleKit.drawFrostInsideCorner(frame: CGRect(origin: .zero, size: symbol18Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 19 Drawing
        context.saveGState()
        context.translateBy(x: 150, y: 140)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol19Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol19Rect)
        context.translateBy(x: symbol19Rect.minX, y: symbol19Rect.minY)

        TilesStyleKit.drawFrostInsideCorner(frame: CGRect(origin: .zero, size: symbol19Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 20 Drawing
        context.saveGState()
        context.translateBy(x: 232, y: 158)
        context.rotate(by: -180 * CGFloat.pi/180)

        let symbol20Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol20Rect)
        context.translateBy(x: symbol20Rect.minX, y: symbol20Rect.minY)

        TilesStyleKit.drawFrostInsideCorner(frame: CGRect(origin: .zero, size: symbol20Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 21 Drawing
        context.saveGState()
        context.translateBy(x: 214, y: 340)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol21Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol21Rect)
        context.translateBy(x: symbol21Rect.minX, y: symbol21Rect.minY)

        TilesStyleKit.drawFrostInsideCorner(frame: CGRect(origin: .zero, size: symbol21Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 22 Drawing
        let symbol22Rect = CGRect(x: 114, y: 122, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol22Rect)
        context.translateBy(x: symbol22Rect.minX, y: symbol22Rect.minY)

        TilesStyleKit.drawFrostConnectingCorner(frame: CGRect(origin: .zero, size: symbol22Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 23 Drawing
        context.saveGState()
        context.translateBy(x: 250, y: 122)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol23Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol23Rect)
        context.translateBy(x: symbol23Rect.minX, y: symbol23Rect.minY)

        TilesStyleKit.drawFrostConnectingCorner(frame: CGRect(origin: .zero, size: symbol23Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 24 Drawing
        context.saveGState()
        context.translateBy(x: 250, y: 358)
        context.rotate(by: 180 * CGFloat.pi/180)

        let symbol24Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol24Rect)
        context.translateBy(x: symbol24Rect.minX, y: symbol24Rect.minY)

        TilesStyleKit.drawFrostConnectingCorner(frame: CGRect(origin: .zero, size: symbol24Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 25 Drawing
        context.saveGState()
        context.translateBy(x: 114, y: 358)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol25Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol25Rect)
        context.translateBy(x: symbol25Rect.minX, y: symbol25Rect.minY)

        TilesStyleKit.drawFrostConnectingCorner(frame: CGRect(origin: .zero, size: symbol25Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 282, y: 136))
        bezierPath.addLine(to: CGPoint(x: 282.14, y: 136.02))
        bezierPath.addCurve(to: CGPoint(x: 316.91, y: 138), controlPoint1: CGPoint(x: 297.02, y: 136.15), controlPoint2: CGPoint(x: 309.78, y: 136.92))
        bezierPath.addCurve(to: CGPoint(x: 322.24, y: 139.27), controlPoint1: CGPoint(x: 319.5, y: 138.4), controlPoint2: CGPoint(x: 321.29, y: 138.82))
        bezierPath.addCurve(to: CGPoint(x: 323, y: 140), controlPoint1: CGPoint(x: 322.74, y: 139.51), controlPoint2: CGPoint(x: 323, y: 139.75))
        bezierPath.addCurve(to: CGPoint(x: 304.62, y: 143.21), controlPoint1: CGPoint(x: 323, y: 141.32), controlPoint2: CGPoint(x: 315.78, y: 142.48))
        bezierPath.addCurve(to: CGPoint(x: 298.62, y: 145.4), controlPoint1: CGPoint(x: 302.74, y: 144.16), controlPoint2: CGPoint(x: 300.41, y: 145.17))
        bezierPath.addCurve(to: CGPoint(x: 294.47, y: 143.71), controlPoint1: CGPoint(x: 295.55, y: 145.8), controlPoint2: CGPoint(x: 295.85, y: 144.7))
        bezierPath.addCurve(to: CGPoint(x: 293.19, y: 143.76), controlPoint1: CGPoint(x: 294.05, y: 143.73), controlPoint2: CGPoint(x: 293.62, y: 143.74))
        bezierPath.addCurve(to: CGPoint(x: 285.62, y: 152.6), controlPoint1: CGPoint(x: 290.88, y: 146.98), controlPoint2: CGPoint(x: 289.72, y: 152.98))
        bezierPath.addCurve(to: CGPoint(x: 277.52, y: 144), controlPoint1: CGPoint(x: 282.62, y: 152.32), controlPoint2: CGPoint(x: 279.28, y: 147.14))
        bezierPath.addCurve(to: CGPoint(x: 273.82, y: 143.99), controlPoint1: CGPoint(x: 276.26, y: 144), controlPoint2: CGPoint(x: 275.04, y: 144))
        bezierPath.addCurve(to: CGPoint(x: 267.87, y: 158), controlPoint1: CGPoint(x: 272.82, y: 148.39), controlPoint2: CGPoint(x: 270.35, y: 158))
        bezierPath.addCurve(to: CGPoint(x: 261.87, y: 143.76), controlPoint1: CGPoint(x: 265.35, y: 158), controlPoint2: CGPoint(x: 262.84, y: 148.05))
        bezierPath.addCurve(to: CGPoint(x: 254.99, y: 143.48), controlPoint1: CGPoint(x: 259.47, y: 143.68), controlPoint2: CGPoint(x: 257.17, y: 143.59))
        bezierPath.addCurve(to: CGPoint(x: 252, y: 145.7), controlPoint1: CGPoint(x: 254.18, y: 144.58), controlPoint2: CGPoint(x: 253.09, y: 145.7))
        bezierPath.addCurve(to: CGPoint(x: 248.75, y: 143.1), controlPoint1: CGPoint(x: 250.79, y: 145.7), controlPoint2: CGPoint(x: 249.57, y: 144.31))
        bezierPath.addCurve(to: CGPoint(x: 245.14, y: 142.81), controlPoint1: CGPoint(x: 247.49, y: 143.01), controlPoint2: CGPoint(x: 246.28, y: 142.91))
        bezierPath.addCurve(to: CGPoint(x: 242.62, y: 147.2), controlPoint1: CGPoint(x: 244.45, y: 144.97), controlPoint2: CGPoint(x: 244.01, y: 147.49))
        bezierPath.addCurve(to: CGPoint(x: 240.33, y: 144.05), controlPoint1: CGPoint(x: 241.83, y: 147.03), controlPoint2: CGPoint(x: 241.01, y: 145.61))
        bezierPath.addCurve(to: CGPoint(x: 232, y: 140), controlPoint1: CGPoint(x: 236.97, y: 145.28), controlPoint2: CGPoint(x: 232, y: 143.26))
        bezierPath.addCurve(to: CGPoint(x: 250, y: 129), controlPoint1: CGPoint(x: 232, y: 136.13), controlPoint2: CGPoint(x: 240.06, y: 129))
        bezierPath.addCurve(to: CGPoint(x: 282, y: 136), controlPoint1: CGPoint(x: 259.94, y: 129), controlPoint2: CGPoint(x: 268, y: 134))
        bezierPath.close()
        UIColor.white.setFill()
        bezierPath.fill()


        //// Oval Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 307, y: 347))
        ovalPath.addCurve(to: CGPoint(x: 251, y: 354), controlPoint1: CGPoint(x: 289, y: 357), controlPoint2: CGPoint(x: 274, y: 349))
        ovalPath.addCurve(to: CGPoint(x: 229, y: 368), controlPoint1: CGPoint(x: 228, y: 359), controlPoint2: CGPoint(x: 229, y: 381))
        ovalPath.addCurve(to: CGPoint(x: 261, y: 341), controlPoint1: CGPoint(x: 229, y: 355), controlPoint2: CGPoint(x: 234.49, y: 341))
        ovalPath.addCurve(to: CGPoint(x: 307, y: 347), controlPoint1: CGPoint(x: 287.51, y: 341), controlPoint2: CGPoint(x: 325, y: 337))
        ovalPath.close()
        wallColor.setFill()
        ovalPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSlabCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 100, resizedFrame.height / 100)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Group 2
        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 36, y: 36, width: 28, height: 28))
        wallDark.setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 40, y: 40, width: 20, height: 20))
        wallMedium.setFill()
        oval5Path.fill()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 44, y: 44, width: 12, height: 12))
        wallLight.setFill()
        oval6Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeSlabShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaSlabShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberSlabShort(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabShort(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCornerBlock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCornerWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 400, height: 358), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 400, height: 358), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 400, y: resizedFrame.height / 358)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 51, y: 50, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawPlaid(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 151, y: 50, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawTimberSolidTile(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 251, y: 50, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawTimberSolidTile(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 151, y: 150, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawPlaid(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        context.saveGState()
        context.translateBy(x: 51, y: 150)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol6Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawTimberUWall(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 7 Drawing
        context.saveGState()
        context.translateBy(x: 351, y: 150)
        context.rotate(by: 180 * CGFloat.pi/180)

        let symbol7Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawPlaid(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 251, y: 150, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawTimberSolidTile(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        context.saveGState()
        context.translateBy(x: 351, y: 250)
        context.rotate(by: -180 * CGFloat.pi/180)

        let symbol4Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawPlaid(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 151, y: 50, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawPlaid(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 151, y: 250, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawPlaid(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()




        //// Symbol 11 Drawing
        context.saveGState()
        context.translateBy(x: 151, y: 250)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol11Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawTimberWallSingle(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 12 Drawing
        context.saveGState()
        context.translateBy(x: 251, y: 350)
        context.rotate(by: 180 * CGFloat.pi/180)

        let symbol12Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawTimberUWall(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberHole(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 20)


        //// Color Declarations
        let timberTiles = UIColor(red: 0.320, green: 0.800, blue: 0.373, alpha: 1.000)
        let color13 = UIColor(red: 0.341, green: 0.212, blue: 0.055, alpha: 1.000)

        //// Group
        //// Depth Drawing
        let depthPath = UIBezierPath(ovalIn: CGRect(x: -9.5, y: -9.5, width: 20, height: 19))
        timberTiles.setFill()
        depthPath.fill()


        //// Bottom Drawing
        context.saveGState()
        context.translateBy(x: -9.5, y: -9.5)

        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 19.9, y: 11))
        bottomPath.addCurve(to: CGPoint(x: 16, y: 17), controlPoint1: CGPoint(x: 19.9, y: 13), controlPoint2: CGPoint(x: 18.44, y: 15.23))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 19), controlPoint1: CGPoint(x: 14.31, y: 18.22), controlPoint2: CGPoint(x: 12.15, y: 19))
        bottomPath.addCurve(to: CGPoint(x: 4, y: 17), controlPoint1: CGPoint(x: 7.87, y: 19), controlPoint2: CGPoint(x: 5.68, y: 18.21))
        bottomPath.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 1.53, y: 15.23), controlPoint2: CGPoint(x: 0, y: 13))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 0, y: 7.64), controlPoint2: CGPoint(x: 3, y: 4))
        bottomPath.addCurve(to: CGPoint(x: 19.9, y: 11), controlPoint1: CGPoint(x: 17, y: 4), controlPoint2: CGPoint(x: 19.9, y: 7.62))
        bottomPath.close()
        color13.setFill()
        bottomPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostHole(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 20)


        //// Color Declarations
        let frostTiles = UIColor(red: 0.286, green: 0.980, blue: 0.910, alpha: 1.000)
        let color14 = UIColor(red: 0.000, green: 0.457, blue: 0.599, alpha: 1.000)

        //// Group
        //// Depth Drawing
        let depthPath = UIBezierPath(ovalIn: CGRect(x: -9.5, y: -9.5, width: 20, height: 19))
        frostTiles.setFill()
        depthPath.fill()


        //// Bottom Drawing
        context.saveGState()
        context.translateBy(x: -9.5, y: -9.5)

        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 19.9, y: 11))
        bottomPath.addCurve(to: CGPoint(x: 16, y: 17), controlPoint1: CGPoint(x: 19.9, y: 13), controlPoint2: CGPoint(x: 18.44, y: 15.23))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 19), controlPoint1: CGPoint(x: 14.31, y: 18.22), controlPoint2: CGPoint(x: 12.15, y: 19))
        bottomPath.addCurve(to: CGPoint(x: 4, y: 17), controlPoint1: CGPoint(x: 7.87, y: 19), controlPoint2: CGPoint(x: 5.68, y: 18.21))
        bottomPath.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 1.53, y: 15.23), controlPoint2: CGPoint(x: 0, y: 13))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 0, y: 7.64), controlPoint2: CGPoint(x: 3, y: 4))
        bottomPath.addCurve(to: CGPoint(x: 19.9, y: 11), controlPoint1: CGPoint(x: 17, y: 4), controlPoint2: CGPoint(x: 19.9, y: 7.62))
        bottomPath.close()
        color14.setFill()
        bottomPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeHole(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 20)


        //// Color Declarations
        let blazeTiles = UIColor(red: 0.989, green: 0.944, blue: 0.570, alpha: 1.000)
        let color15 = UIColor(red: 0.666, green: 0.634, blue: 0.357, alpha: 1.000)

        //// Group
        //// Depth Drawing
        let depthPath = UIBezierPath(ovalIn: CGRect(x: -9, y: -9.5, width: 20, height: 19))
        blazeTiles.setFill()
        depthPath.fill()


        //// Bottom Drawing
        context.saveGState()
        context.translateBy(x: -9, y: -9.5)

        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 19.9, y: 11))
        bottomPath.addCurve(to: CGPoint(x: 16, y: 17), controlPoint1: CGPoint(x: 19.9, y: 13), controlPoint2: CGPoint(x: 18.44, y: 15.23))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 19), controlPoint1: CGPoint(x: 14.31, y: 18.22), controlPoint2: CGPoint(x: 12.15, y: 19))
        bottomPath.addCurve(to: CGPoint(x: 4, y: 17), controlPoint1: CGPoint(x: 7.87, y: 19), controlPoint2: CGPoint(x: 5.68, y: 18.21))
        bottomPath.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 1.53, y: 15.23), controlPoint2: CGPoint(x: 0, y: 13))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 0, y: 7.64), controlPoint2: CGPoint(x: 3, y: 4))
        bottomPath.addCurve(to: CGPoint(x: 19.9, y: 11), controlPoint1: CGPoint(x: 17, y: 4), controlPoint2: CGPoint(x: 19.9, y: 7.62))
        bottomPath.close()
        color15.setFill()
        bottomPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaHole(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let nebulaTiles = UIColor(red: 0.645, green: 0.508, blue: 0.810, alpha: 1.000)
        let color16 = UIColor(red: 0.255, green: 0.192, blue: 0.463, alpha: 1.000)

        //// Group
        //// Depth Drawing
        let depthPath = UIBezierPath(ovalIn: CGRect(x: -10, y: -9.5, width: 20, height: 19))
        nebulaTiles.setFill()
        depthPath.fill()


        //// Bottom Drawing
        context.saveGState()
        context.translateBy(x: -10, y: -9.5)

        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 19.9, y: 11))
        bottomPath.addCurve(to: CGPoint(x: 16, y: 17), controlPoint1: CGPoint(x: 19.9, y: 13), controlPoint2: CGPoint(x: 18.44, y: 15.23))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 19), controlPoint1: CGPoint(x: 14.31, y: 18.22), controlPoint2: CGPoint(x: 12.15, y: 19))
        bottomPath.addCurve(to: CGPoint(x: 4, y: 17), controlPoint1: CGPoint(x: 7.87, y: 19), controlPoint2: CGPoint(x: 5.68, y: 18.21))
        bottomPath.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 1.53, y: 15.23), controlPoint2: CGPoint(x: 0, y: 13))
        bottomPath.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 0, y: 7.64), controlPoint2: CGPoint(x: 3, y: 4))
        bottomPath.addCurve(to: CGPoint(x: 19.9, y: 11), controlPoint1: CGPoint(x: 17, y: 4), controlPoint2: CGPoint(x: 19.9, y: 7.62))
        bottomPath.close()
        color16.setFill()
        bottomPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberSlabCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabCircle(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostSlabCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabCircle(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeSlabCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabCircle(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaSlabCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSlabCircle(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSolidTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        lightTile.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberSolidTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberTiles = UIColor(red: 0.320, green: 0.800, blue: 0.373, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSolidTile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: timberTiles)
        context.restoreGState()


        //// Symbol 2 Drawing
        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let symbol2Rect = CGRect(x: 0, y: 0, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawTimberSolidTile2(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Symbol 3 Drawing
        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let symbol3Rect = CGRect(x: 50, y: 0, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawTimberSolidTile2(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()


        //// Symbol 4 Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 50)
        context.rotate(by: 90 * CGFloat.pi/180)

        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let symbol4Rect = CGRect(x: 0, y: 0, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawTimberSolidTile2(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// Symbol 5 Drawing
        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let symbol5Rect = CGRect(x: 50, y: 50, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawTimberSolidTile2(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberSolidTile2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let color20 = UIColor(red: 0.299, green: 0.299, blue: 0.299, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 25, height: 25))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 25, y: 0, width: 25, height: 25))
        UIColor.gray.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 50, y: 0, width: 25, height: 25))
        color20.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 75, y: 0, width: 25, height: 25))
        UIColor.black.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 50, y: 25, width: 25, height: 25))
        UIColor.gray.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 25, y: 25, width: 25, height: 25))
        UIColor.black.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 25, y: 50, width: 25, height: 25))
        UIColor.gray.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 0, y: 25, width: 25, height: 25))
        UIColor.white.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 50, y: 50, width: 25, height: 25))
        UIColor.white.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 75, y: 25, width: 25, height: 25))
        UIColor.white.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 75, y: 50, width: 25, height: 25))
        color20.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: 50, y: 75, width: 25, height: 25))
        UIColor.black.setFill()
        rectangle12Path.fill()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 25, y: 75, width: 25, height: 25))
        UIColor.white.setFill()
        rectangle13Path.fill()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: 0, y: 50, width: 25, height: 25))
        UIColor.gray.setFill()
        rectangle14Path.fill()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: 0, y: 75, width: 25, height: 25))
        UIColor.gray.setFill()
        rectangle15Path.fill()


        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(rect: CGRect(x: 0, y: 25, width: 25, height: 25))
        color20.setFill()
        rectangle16Path.fill()


        //// Rectangle 17 Drawing
        let rectangle17Path = UIBezierPath(rect: CGRect(x: 25, y: 25, width: 25, height: 25))
        UIColor.black.setFill()
        rectangle17Path.fill()


        //// Rectangle 18 Drawing
        let rectangle18Path = UIBezierPath(rect: CGRect(x: 75, y: 75, width: 25, height: 25))
        UIColor.gray.setFill()
        rectangle18Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaBlankTemplate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaTiles = UIColor(red: 0.645, green: 0.508, blue: 0.810, alpha: 1.000)

        //// Image Declarations
        let _56b3d5296c3823d83d4b02e41a06567a = UIImage(named: "_56b3d5296c3823d83d4b02e41a06567a.jpg")!

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        nebulaTiles.setFill()
        rectangle2Path.fill()


        //// Rectangle Drawing
        context.saveGState()
        context.setBlendMode(.multiply)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        context.saveGState()
        context.setPatternPhase(CGSize(width: 0, height: 478))
        UIColor(patternImage: _56b3d5296c3823d83d4b02e41a06567a).setFill()
        rectanglePath.fill()
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazePattern(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeTiles = UIColor(red: 0.989, green: 0.944, blue: 0.570, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        blazeTiles.setFill()
        rectanglePath.fill()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.setBlendMode(.multiply)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        UIColor.red.setFill()
        rectangle5Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Group


        //// Group 2
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 25, y: 0, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 25, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 25, y: 25, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()




        //// Group 3
        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 50, y: 0, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 75, y: 0, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 50, y: 25, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 75, y: 25, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch)
        context.restoreGState()




        //// Group 4
        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 0, y: 50, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 25, y: 50, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 0, y: 75, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 25, y: 75, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch)
        context.restoreGState()




        //// Group 5
        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 50, y: 50, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: 75, y: 50, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol14Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: 50, y: 75, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol15Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: 75, y: 75, width: 25, height: 25)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbol16Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawRoundedOnceTemplate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, lightTile: UIColor = UIColor(red: 0.653, green: 0.653, blue: 0.653, alpha: 1.000), wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.move(to: CGPoint(x: 69, y: 0))
        rectanglePath.addLine(to: CGPoint(x: 0, y: 0))
        rectanglePath.addLine(to: CGPoint(x: 0, y: 100))
        rectanglePath.addLine(to: CGPoint(x: 100, y: 100))
        rectanglePath.addLine(to: CGPoint(x: 100, y: 29))
        UIColor.black.setFill()
        rectanglePath.fill()


        //// Symbol 2 Drawing
        context.saveGState()
        context.translateBy(x: 100, y: -0)
        context.rotate(by: 90 * CGFloat.pi/180)

        context.saveGState()
        context.setAlpha(0.8)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let symbol2Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawCornerWall(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostBlankTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)



        //// Image Declarations
        let frostPattern8 = UIImage(named: "frostPattern8.png")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        context.saveGState()
        rectanglePath.addClip()
        frostPattern8.draw(in: CGRect(x: 0, y: 0, width: frostPattern8.size.width, height: frostPattern8.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberSolidTile3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberTiles = UIColor(red: 0.320, green: 0.800, blue: 0.373, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawSolidTile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightTile: timberTiles)
        context.restoreGState()


        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawTimberSolidTile(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 50, y: 0, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawTimberSolidTile(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 0, y: 50, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawTimberSolidTile(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 50, y: 50, width: 50, height: 50)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawTimberSolidTile(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas5(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 374, height: 241), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 374, height: 241), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 374, y: resizedFrame.height / 241)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 22, y: 19, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNebulaBlankTemplate(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 22, y: 19, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        TilesStyleKit.drawNebulaRoundUp(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 22, y: 119, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        TilesStyleKit.drawNebulaRoundBottomLeft(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 122, y: 119, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        TilesStyleKit.drawNebulaBlankTile(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 222, y: 119, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        TilesStyleKit.drawNebulaRoundBottomRight(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 222, y: 19, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        TilesStyleKit.drawNebulaRoundUp(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 222, y: 19, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        TilesStyleKit.drawNebulaUWall(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 8 Drawing
        context.saveGState()
        context.translateBy(x: 222, y: 119)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol8Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        TilesStyleKit.drawNebulaUpDownWalls(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 9 Drawing
        context.saveGState()
        context.translateBy(x: 322, y: 219)
        context.rotate(by: -180 * CGFloat.pi/180)

        let symbol9Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        TilesStyleKit.drawNebulaCornerWall(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 10 Drawing
        context.saveGState()
        context.translateBy(x: 22, y: 219)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol10Rect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        TilesStyleKit.drawNebulaCornerWall(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 11 Drawing
        context.saveGState()
        context.translateBy(x: 122, y: 137)
        context.rotate(by: 180 * CGFloat.pi/180)

        let symbol11Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        TilesStyleKit.drawNebulaInsideCorner(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 12 Drawing
        context.saveGState()
        context.translateBy(x: 240, y: 119)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbol12Rect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        TilesStyleKit.drawNebulaInsideCorner(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 22, y: 19, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        TilesStyleKit.drawNebulaUWall(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawVelocityTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 100, resizedFrame.height / 100)


        //// Color Declarations
        let color26 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color27 = UIColor(red: 0.333, green: 0.333, blue: 0.333, alpha: 0.532)

        //// Shadow Declarations
        let velocityShadow = NSShadow()
        velocityShadow.shadowColor = UIColor.black.withAlphaComponent(0.85)
        velocityShadow.shadowOffset = CGSize(width: 0, height: 0)
        velocityShadow.shadowBlurRadius = 2

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 49, y: 30, width: 9, height: 40))
        color26.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context.saveGState()
        context.clip(to: rectanglePath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((velocityShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (velocityShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: velocityShadow.shadowOffset.width * resizedShadowScale, height: velocityShadow.shadowOffset.height * resizedShadowScale), blur: velocityShadow.shadowBlurRadius * resizedShadowScale, color: rectangleOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        color27.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 29, y: 50))
        polygonPath.addLine(to: CGPoint(x: 46, y: 30))
        polygonPath.addLine(to: CGPoint(x: 46, y: 70))
        polygonPath.addLine(to: CGPoint(x: 29, y: 50))
        polygonPath.close()
        color26.setFill()
        polygonPath.fill()

        ////// Polygon Inner Shadow
        context.saveGState()
        context.clip(to: polygonPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((velocityShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let polygonOpaqueShadow = (velocityShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: velocityShadow.shadowOffset.width * resizedShadowScale, height: velocityShadow.shadowOffset.height * resizedShadowScale), blur: velocityShadow.shadowBlurRadius * resizedShadowScale, color: polygonOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        polygonOpaqueShadow.setFill()
        polygonPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        color27.setStroke()
        polygonPath.lineWidth = 1
        polygonPath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 61, y: 30, width: 9, height: 40))
        color26.setFill()
        rectangle2Path.fill()

        ////// Rectangle 2 Inner Shadow
        context.saveGState()
        context.clip(to: rectangle2Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((velocityShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle2OpaqueShadow = (velocityShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: velocityShadow.shadowOffset.width * resizedShadowScale, height: velocityShadow.shadowOffset.height * resizedShadowScale), blur: velocityShadow.shadowBlurRadius * resizedShadowScale, color: rectangle2OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle2OpaqueShadow.setFill()
        rectangle2Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        color27.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostVelocityTile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawVelocityTile(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas6(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1688, height: 629), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1688, height: 629), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1688, y: resizedFrame.height / 629)


        //// Color Declarations
        let color14 = UIColor(red: 0.000, green: 0.457, blue: 0.599, alpha: 1.000)
        let gradientColor = UIColor(red: 0.026, green: 0.328, blue: 0.840, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, UIColor.white.cgColor] as CFArray, locations: [0, 1])!

        //// Image Declarations
        let icePattern = UIImage(named: "icePattern.png")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2479, height: 629))
        context.saveGState()
        rectanglePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(icePattern.cgImage!, in: CGRect(x: 0, y: 0, width: icePattern.size.width, height: icePattern.size.height), byTiling: true)
        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.setBlendMode(.multiply)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2479, height: 629))
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: 1214.57, y: 768.68),
            end: CGPoint(x: 1212.95, y: 341.05),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 204, y: 88, width: 1361, height: 453)
        let textTextContent = "FROST"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Neutraface2Display-Titling", size: 230)!, NSForegroundColorAttributeName: color14, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 91, y: 173, width: 113, height: 200)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawHoleFlag(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, holeNumber: "9")
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostPattern(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let color12 = UIColor(red: 0.165, green: 0.661, blue: 0.823, alpha: 1.000)
        let color14 = UIColor(red: 0.000, green: 0.457, blue: 0.599, alpha: 1.000)
        let color19 = UIColor(red: 0.269, green: 0.558, blue: 0.689, alpha: 1.000)
        let color4 = UIColor(red: 0.055, green: 0.774, blue: 0.968, alpha: 1.000)
        let color17 = UIColor(red: 0.165, green: 0.663, blue: 0.824, alpha: 1.000)
        let color29 = UIColor(red: 0.194, green: 0.838, blue: 0.936, alpha: 1.000)
        let color30 = UIColor(red: 0.431, green: 0.935, blue: 1.000, alpha: 1.000)
        let color31 = UIColor(red: 0.206, green: 0.768, blue: 0.894, alpha: 1.000)
        let color32 = UIColor(red: 0.000, green: 0.701, blue: 0.924, alpha: 1.000)
        let color33 = UIColor(red: 0.171, green: 0.718, blue: 0.801, alpha: 1.000)
        let color34 = UIColor(red: 0.320, green: 0.588, blue: 0.800, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        color17.setFill()
        rectanglePath.fill()


        //// Group 36
        //// Group 7
        //// Group 8
        //// Group 2
        //// Group 3
        //// Polygon 2 Drawing
        context.saveGState()
        context.translateBy(x: 27, y: -8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon2Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon2Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon2Path.close()
        color12.setFill()
        polygon2Path.fill()

        context.restoreGState()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 27, y: 8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 8.5, y: 0))
        polygonPath.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygonPath.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygonPath.close()
        color12.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Polygon 3 Drawing
        context.saveGState()
        context.translateBy(x: 27, y: 25)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon3Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon3Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon3Path.close()
        color31.setFill()
        polygon3Path.fill()

        context.restoreGState()


        //// Polygon 4 Drawing
        context.saveGState()
        context.translateBy(x: 27, y: 41.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon4Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon4Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon4Path.close()
        color14.setFill()
        polygon4Path.fill()

        context.restoreGState()


        //// Polygon 5 Drawing
        context.saveGState()
        context.translateBy(x: 27, y: 58.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon5Path = UIBezierPath()
        polygon5Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon5Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon5Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon5Path.close()
        color12.setFill()
        polygon5Path.fill()

        context.restoreGState()


        //// Polygon 6 Drawing
        context.saveGState()
        context.translateBy(x: 27, y: 75)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon6Path = UIBezierPath()
        polygon6Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon6Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon6Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon6Path.close()
        color31.setFill()
        polygon6Path.fill()

        context.restoreGState()


        //// Polygon 7 Drawing
        context.saveGState()
        context.translateBy(x: 27, y: 91.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon7Path = UIBezierPath()
        polygon7Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon7Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon7Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon7Path.close()
        color12.setFill()
        polygon7Path.fill()

        context.restoreGState()




        //// Group
        //// Polygon 8 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: -17)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon8Path = UIBezierPath()
        polygon8Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon8Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon8Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon8Path.close()
        UIColor.gray.setFill()
        polygon8Path.fill()

        context.restoreGState()


        //// Polygon 9 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 0)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon9Path = UIBezierPath()
        polygon9Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon9Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon9Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon9Path.close()
        color4.setFill()
        polygon9Path.fill()

        context.restoreGState()


        //// Polygon 10 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 16.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon10Path = UIBezierPath()
        polygon10Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon10Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon10Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon10Path.close()
        color33.setFill()
        polygon10Path.fill()

        context.restoreGState()


        //// Polygon 11 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 33)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon11Path = UIBezierPath()
        polygon11Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon11Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon11Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon11Path.close()
        color19.setFill()
        polygon11Path.fill()

        context.restoreGState()


        //// Polygon 12 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 50)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon12Path = UIBezierPath()
        polygon12Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon12Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon12Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon12Path.close()
        color33.setFill()
        polygon12Path.fill()

        context.restoreGState()


        //// Polygon 13 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 66.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon13Path = UIBezierPath()
        polygon13Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon13Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon13Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon13Path.close()
        color29.setFill()
        polygon13Path.fill()

        context.restoreGState()


        //// Polygon 14 Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 83)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon14Path = UIBezierPath()
        polygon14Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon14Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon14Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon14Path.close()
        color12.setFill()
        polygon14Path.fill()

        context.restoreGState()






        //// Group 4
        //// Group 5
        //// Polygon 15 Drawing
        context.saveGState()
        context.translateBy(x: 41, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon15Path = UIBezierPath()
        polygon15Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon15Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon15Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon15Path.close()
        color12.setFill()
        polygon15Path.fill()

        context.restoreGState()


        //// Polygon 16 Drawing
        context.saveGState()
        context.translateBy(x: 41, y: 17)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon16Path = UIBezierPath()
        polygon16Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon16Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon16Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon16Path.close()
        color32.setFill()
        polygon16Path.fill()

        context.restoreGState()


        //// Polygon 17 Drawing
        context.saveGState()
        context.translateBy(x: 41, y: 33.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon17Path = UIBezierPath()
        polygon17Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon17Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon17Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon17Path.close()
        color34.setFill()
        polygon17Path.fill()

        context.restoreGState()


        //// Polygon 18 Drawing
        context.saveGState()
        context.translateBy(x: 41, y: 50)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon18Path = UIBezierPath()
        polygon18Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon18Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon18Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon18Path.close()
        color14.setFill()
        polygon18Path.fill()

        context.restoreGState()


        //// Polygon 19 Drawing
        context.saveGState()
        context.translateBy(x: 41, y: 67)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon19Path = UIBezierPath()
        polygon19Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon19Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon19Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon19Path.close()
        color12.setFill()
        polygon19Path.fill()

        context.restoreGState()


        //// Polygon 20 Drawing
        context.saveGState()
        context.translateBy(x: 41, y: 83.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon20Path = UIBezierPath()
        polygon20Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon20Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon20Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon20Path.close()
        color31.setFill()
        polygon20Path.fill()

        context.restoreGState()


        //// Polygon 21 Drawing
        context.saveGState()
        context.translateBy(x: 41, y: 100)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon21Path = UIBezierPath()
        polygon21Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon21Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon21Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon21Path.close()
        UIColor.gray.setFill()
        polygon21Path.fill()

        context.restoreGState()




        //// Group 6
        //// Polygon 22 Drawing
        context.saveGState()
        context.translateBy(x: 46, y: -8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon22Path = UIBezierPath()
        polygon22Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon22Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon22Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon22Path.close()
        color12.setFill()
        polygon22Path.fill()

        context.restoreGState()


        //// Polygon 23 Drawing
        context.saveGState()
        context.translateBy(x: 46, y: 8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon23Path = UIBezierPath()
        polygon23Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon23Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon23Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon23Path.close()
        color29.setFill()
        polygon23Path.fill()

        context.restoreGState()


        //// Polygon 24 Drawing
        context.saveGState()
        context.translateBy(x: 46, y: 25)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon24Path = UIBezierPath()
        polygon24Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon24Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon24Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon24Path.close()
        color29.setFill()
        polygon24Path.fill()

        context.restoreGState()


        //// Polygon 25 Drawing
        context.saveGState()
        context.translateBy(x: 46, y: 41.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon25Path = UIBezierPath()
        polygon25Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon25Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon25Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon25Path.close()
        color32.setFill()
        polygon25Path.fill()

        context.restoreGState()


        //// Polygon 26 Drawing
        context.saveGState()
        context.translateBy(x: 46, y: 58.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon26Path = UIBezierPath()
        polygon26Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon26Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon26Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon26Path.close()
        color12.setFill()
        polygon26Path.fill()

        context.restoreGState()


        //// Polygon 27 Drawing
        context.saveGState()
        context.translateBy(x: 46, y: 75)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon27Path = UIBezierPath()
        polygon27Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon27Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon27Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon27Path.close()
        color34.setFill()
        polygon27Path.fill()

        context.restoreGState()


        //// Polygon 28 Drawing
        context.saveGState()
        context.translateBy(x: 46, y: 91.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon28Path = UIBezierPath()
        polygon28Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon28Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon28Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon28Path.close()
        color12.setFill()
        polygon28Path.fill()

        context.restoreGState()








        //// Group 9
        //// Group 10
        //// Group 11
        //// Polygon 29 Drawing
        context.saveGState()
        context.translateBy(x: 55.5, y: -8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon29Path = UIBezierPath()
        polygon29Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon29Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon29Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon29Path.close()
        color12.setFill()
        polygon29Path.fill()

        context.restoreGState()


        //// Polygon 30 Drawing
        context.saveGState()
        context.translateBy(x: 55.5, y: 8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon30Path = UIBezierPath()
        polygon30Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon30Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon30Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon30Path.close()
        color19.setFill()
        polygon30Path.fill()

        context.restoreGState()


        //// Polygon 31 Drawing
        context.saveGState()
        context.translateBy(x: 55.5, y: 25)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon31Path = UIBezierPath()
        polygon31Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon31Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon31Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon31Path.close()
        color33.setFill()
        polygon31Path.fill()

        context.restoreGState()


        //// Polygon 32 Drawing
        context.saveGState()
        context.translateBy(x: 55.5, y: 41.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon32Path = UIBezierPath()
        polygon32Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon32Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon32Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon32Path.close()
        color30.setFill()
        polygon32Path.fill()

        context.restoreGState()


        //// Polygon 33 Drawing
        context.saveGState()
        context.translateBy(x: 55.5, y: 58.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon33Path = UIBezierPath()
        polygon33Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon33Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon33Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon33Path.close()
        color4.setFill()
        polygon33Path.fill()

        context.restoreGState()


        //// Polygon 34 Drawing
        context.saveGState()
        context.translateBy(x: 55.5, y: 75)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon34Path = UIBezierPath()
        polygon34Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon34Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon34Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon34Path.close()
        color29.setFill()
        polygon34Path.fill()

        context.restoreGState()


        //// Polygon 35 Drawing
        context.saveGState()
        context.translateBy(x: 55.5, y: 91.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon35Path = UIBezierPath()
        polygon35Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon35Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon35Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon35Path.close()
        color12.setFill()
        polygon35Path.fill()

        context.restoreGState()




        //// Group 12
        //// Polygon 36 Drawing
        context.saveGState()
        context.translateBy(x: 60.5, y: -17)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon36Path = UIBezierPath()
        polygon36Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon36Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon36Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon36Path.close()
        UIColor.gray.setFill()
        polygon36Path.fill()

        context.restoreGState()


        //// Polygon 37 Drawing
        context.saveGState()
        context.translateBy(x: 60.5, y: 0)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon37Path = UIBezierPath()
        polygon37Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon37Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon37Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon37Path.close()
        color12.setFill()
        polygon37Path.fill()

        context.restoreGState()


        //// Polygon 38 Drawing
        context.saveGState()
        context.translateBy(x: 60.5, y: 16.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon38Path = UIBezierPath()
        polygon38Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon38Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon38Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon38Path.close()
        color12.setFill()
        polygon38Path.fill()

        context.restoreGState()


        //// Polygon 39 Drawing
        context.saveGState()
        context.translateBy(x: 60.5, y: 33)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon39Path = UIBezierPath()
        polygon39Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon39Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon39Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon39Path.close()
        color19.setFill()
        polygon39Path.fill()

        context.restoreGState()


        //// Polygon 40 Drawing
        context.saveGState()
        context.translateBy(x: 60.5, y: 50)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon40Path = UIBezierPath()
        polygon40Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon40Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon40Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon40Path.close()
        color12.setFill()
        polygon40Path.fill()

        context.restoreGState()


        //// Polygon 41 Drawing
        context.saveGState()
        context.translateBy(x: 60.5, y: 66.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon41Path = UIBezierPath()
        polygon41Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon41Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon41Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon41Path.close()
        color12.setFill()
        polygon41Path.fill()

        context.restoreGState()


        //// Polygon 42 Drawing
        context.saveGState()
        context.translateBy(x: 60.5, y: 83)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon42Path = UIBezierPath()
        polygon42Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon42Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon42Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon42Path.close()
        color12.setFill()
        polygon42Path.fill()

        context.restoreGState()






        //// Group 13
        //// Group 14
        //// Polygon 43 Drawing
        context.saveGState()
        context.translateBy(x: 69.5, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon43Path = UIBezierPath()
        polygon43Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon43Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon43Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon43Path.close()
        color14.setFill()
        polygon43Path.fill()

        context.restoreGState()


        //// Polygon 44 Drawing
        context.saveGState()
        context.translateBy(x: 69.5, y: 17)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon44Path = UIBezierPath()
        polygon44Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon44Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon44Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon44Path.close()
        color4.setFill()
        polygon44Path.fill()

        context.restoreGState()


        //// Polygon 45 Drawing
        context.saveGState()
        context.translateBy(x: 69.5, y: 33.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon45Path = UIBezierPath()
        polygon45Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon45Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon45Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon45Path.close()
        color29.setFill()
        polygon45Path.fill()

        context.restoreGState()


        //// Polygon 46 Drawing
        context.saveGState()
        context.translateBy(x: 69.5, y: 50)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon46Path = UIBezierPath()
        polygon46Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon46Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon46Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon46Path.close()
        color4.setFill()
        polygon46Path.fill()

        context.restoreGState()


        //// Polygon 47 Drawing
        context.saveGState()
        context.translateBy(x: 69.5, y: 67)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon47Path = UIBezierPath()
        polygon47Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon47Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon47Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon47Path.close()
        color31.setFill()
        polygon47Path.fill()

        context.restoreGState()


        //// Polygon 48 Drawing
        context.saveGState()
        context.translateBy(x: 69.5, y: 83.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon48Path = UIBezierPath()
        polygon48Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon48Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon48Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon48Path.close()
        color19.setFill()
        polygon48Path.fill()

        context.restoreGState()


        //// Polygon 49 Drawing
        context.saveGState()
        context.translateBy(x: 69.5, y: 100)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon49Path = UIBezierPath()
        polygon49Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon49Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon49Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon49Path.close()
        UIColor.gray.setFill()
        polygon49Path.fill()

        context.restoreGState()




        //// Group 15
        //// Polygon 50 Drawing
        context.saveGState()
        context.translateBy(x: 74.5, y: -8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon50Path = UIBezierPath()
        polygon50Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon50Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon50Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon50Path.close()
        color29.setFill()
        polygon50Path.fill()

        context.restoreGState()


        //// Polygon 51 Drawing
        context.saveGState()
        context.translateBy(x: 74.5, y: 8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon51Path = UIBezierPath()
        polygon51Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon51Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon51Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon51Path.close()
        color34.setFill()
        polygon51Path.fill()

        context.restoreGState()


        //// Polygon 52 Drawing
        context.saveGState()
        context.translateBy(x: 74.5, y: 25)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon52Path = UIBezierPath()
        polygon52Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon52Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon52Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon52Path.close()
        color12.setFill()
        polygon52Path.fill()

        context.restoreGState()


        //// Polygon 53 Drawing
        context.saveGState()
        context.translateBy(x: 74.5, y: 41.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon53Path = UIBezierPath()
        polygon53Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon53Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon53Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon53Path.close()
        color32.setFill()
        polygon53Path.fill()

        context.restoreGState()


        //// Polygon 54 Drawing
        context.saveGState()
        context.translateBy(x: 74.5, y: 58.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon54Path = UIBezierPath()
        polygon54Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon54Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon54Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon54Path.close()
        color12.setFill()
        polygon54Path.fill()

        context.restoreGState()


        //// Polygon 55 Drawing
        context.saveGState()
        context.translateBy(x: 74.5, y: 75)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon55Path = UIBezierPath()
        polygon55Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon55Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon55Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon55Path.close()
        color12.setFill()
        polygon55Path.fill()

        context.restoreGState()


        //// Polygon 56 Drawing
        context.saveGState()
        context.translateBy(x: 74.5, y: 91.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon56Path = UIBezierPath()
        polygon56Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon56Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon56Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon56Path.close()
        color29.setFill()
        polygon56Path.fill()

        context.restoreGState()








        //// Group 16
        //// Group 17
        //// Group 18
        //// Polygon 57 Drawing
        context.saveGState()
        context.translateBy(x: 84, y: -8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon57Path = UIBezierPath()
        polygon57Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon57Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon57Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon57Path.close()
        color4.setFill()
        polygon57Path.fill()

        context.restoreGState()


        //// Polygon 58 Drawing
        context.saveGState()
        context.translateBy(x: 84, y: 8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon58Path = UIBezierPath()
        polygon58Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon58Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon58Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon58Path.close()
        color12.setFill()
        polygon58Path.fill()

        context.restoreGState()


        //// Polygon 59 Drawing
        context.saveGState()
        context.translateBy(x: 84, y: 25)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon59Path = UIBezierPath()
        polygon59Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon59Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon59Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon59Path.close()
        color12.setFill()
        polygon59Path.fill()

        context.restoreGState()


        //// Polygon 60 Drawing
        context.saveGState()
        context.translateBy(x: 84, y: 41.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon60Path = UIBezierPath()
        polygon60Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon60Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon60Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon60Path.close()
        color14.setFill()
        polygon60Path.fill()

        context.restoreGState()


        //// Polygon 61 Drawing
        context.saveGState()
        context.translateBy(x: 84, y: 58.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon61Path = UIBezierPath()
        polygon61Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon61Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon61Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon61Path.close()
        color19.setFill()
        polygon61Path.fill()

        context.restoreGState()


        //// Polygon 62 Drawing
        context.saveGState()
        context.translateBy(x: 84, y: 75)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon62Path = UIBezierPath()
        polygon62Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon62Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon62Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon62Path.close()
        color19.setFill()
        polygon62Path.fill()

        context.restoreGState()


        //// Polygon 63 Drawing
        context.saveGState()
        context.translateBy(x: 84, y: 91.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon63Path = UIBezierPath()
        polygon63Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon63Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon63Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon63Path.close()
        color4.setFill()
        polygon63Path.fill()

        context.restoreGState()




        //// Group 19
        //// Polygon 64 Drawing
        context.saveGState()
        context.translateBy(x: 89, y: -17)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon64Path = UIBezierPath()
        polygon64Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon64Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon64Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon64Path.close()
        UIColor.gray.setFill()
        polygon64Path.fill()

        context.restoreGState()


        //// Polygon 65 Drawing
        context.saveGState()
        context.translateBy(x: 89, y: 0)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon65Path = UIBezierPath()
        polygon65Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon65Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon65Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon65Path.close()
        color29.setFill()
        polygon65Path.fill()

        context.restoreGState()


        //// Polygon 66 Drawing
        context.saveGState()
        context.translateBy(x: 89, y: 16.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon66Path = UIBezierPath()
        polygon66Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon66Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon66Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon66Path.close()
        color12.setFill()
        polygon66Path.fill()

        context.restoreGState()


        //// Polygon 67 Drawing
        context.saveGState()
        context.translateBy(x: 89, y: 33)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon67Path = UIBezierPath()
        polygon67Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon67Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon67Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon67Path.close()
        color14.setFill()
        polygon67Path.fill()

        context.restoreGState()


        //// Polygon 68 Drawing
        context.saveGState()
        context.translateBy(x: 89, y: 50)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon68Path = UIBezierPath()
        polygon68Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon68Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon68Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon68Path.close()
        color12.setFill()
        polygon68Path.fill()

        context.restoreGState()


        //// Polygon 69 Drawing
        context.saveGState()
        context.translateBy(x: 89, y: 66.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon69Path = UIBezierPath()
        polygon69Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon69Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon69Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon69Path.close()
        color12.setFill()
        polygon69Path.fill()

        context.restoreGState()


        //// Polygon 70 Drawing
        context.saveGState()
        context.translateBy(x: 89, y: 83)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon70Path = UIBezierPath()
        polygon70Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon70Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon70Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon70Path.close()
        color12.setFill()
        polygon70Path.fill()

        context.restoreGState()






        //// Group 20
        //// Group 21
        //// Polygon 71 Drawing
        context.saveGState()
        context.translateBy(x: 98, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon71Path = UIBezierPath()
        polygon71Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon71Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon71Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon71Path.close()
        color12.setFill()
        polygon71Path.fill()

        context.restoreGState()


        //// Polygon 72 Drawing
        context.saveGState()
        context.translateBy(x: 98, y: 17)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon72Path = UIBezierPath()
        polygon72Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon72Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon72Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon72Path.close()
        color29.setFill()
        polygon72Path.fill()

        context.restoreGState()


        //// Polygon 73 Drawing
        context.saveGState()
        context.translateBy(x: 98, y: 33.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon73Path = UIBezierPath()
        polygon73Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon73Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon73Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon73Path.close()
        color12.setFill()
        polygon73Path.fill()

        context.restoreGState()


        //// Polygon 74 Drawing
        context.saveGState()
        context.translateBy(x: 98, y: 50)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon74Path = UIBezierPath()
        polygon74Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon74Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon74Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon74Path.close()
        color29.setFill()
        polygon74Path.fill()

        context.restoreGState()


        //// Polygon 75 Drawing
        context.saveGState()
        context.translateBy(x: 98, y: 67)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon75Path = UIBezierPath()
        polygon75Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon75Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon75Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon75Path.close()
        color31.setFill()
        polygon75Path.fill()

        context.restoreGState()


        //// Polygon 76 Drawing
        context.saveGState()
        context.translateBy(x: 98, y: 83.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon76Path = UIBezierPath()
        polygon76Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon76Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon76Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon76Path.close()
        color31.setFill()
        polygon76Path.fill()

        context.restoreGState()


        //// Polygon 77 Drawing
        context.saveGState()
        context.translateBy(x: 98, y: 100)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon77Path = UIBezierPath()
        polygon77Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon77Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon77Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon77Path.close()
        UIColor.gray.setFill()
        polygon77Path.fill()

        context.restoreGState()




        //// Group 22
        //// Polygon 78 Drawing
        context.saveGState()
        context.translateBy(x: 103, y: -8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon78Path = UIBezierPath()
        polygon78Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon78Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon78Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon78Path.close()
        color12.setFill()
        polygon78Path.fill()

        context.restoreGState()


        //// Polygon 79 Drawing
        context.saveGState()
        context.translateBy(x: 103, y: 8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon79Path = UIBezierPath()
        polygon79Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon79Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon79Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon79Path.close()
        color4.setFill()
        polygon79Path.fill()

        context.restoreGState()


        //// Polygon 80 Drawing
        context.saveGState()
        context.translateBy(x: 103, y: 25)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon80Path = UIBezierPath()
        polygon80Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon80Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon80Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon80Path.close()
        color32.setFill()
        polygon80Path.fill()

        context.restoreGState()


        //// Polygon 81 Drawing
        context.saveGState()
        context.translateBy(x: 103, y: 41.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon81Path = UIBezierPath()
        polygon81Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon81Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon81Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon81Path.close()
        color12.setFill()
        polygon81Path.fill()

        context.restoreGState()


        //// Polygon 82 Drawing
        context.saveGState()
        context.translateBy(x: 103, y: 58.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon82Path = UIBezierPath()
        polygon82Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon82Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon82Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon82Path.close()
        color12.setFill()
        polygon82Path.fill()

        context.restoreGState()


        //// Polygon 83 Drawing
        context.saveGState()
        context.translateBy(x: 103, y: 75)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon83Path = UIBezierPath()
        polygon83Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon83Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon83Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon83Path.close()
        color12.setFill()
        polygon83Path.fill()

        context.restoreGState()


        //// Polygon 84 Drawing
        context.saveGState()
        context.translateBy(x: 103, y: 91.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon84Path = UIBezierPath()
        polygon84Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon84Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon84Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon84Path.close()
        color12.setFill()
        polygon84Path.fill()

        context.restoreGState()








        //// Group 23
        //// Group 24
        //// Group 25
        //// Polygon 85 Drawing
        context.saveGState()
        context.translateBy(x: -1.5, y: -8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon85Path = UIBezierPath()
        polygon85Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon85Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon85Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon85Path.close()
        color19.setFill()
        polygon85Path.fill()

        context.restoreGState()


        //// Polygon 86 Drawing
        context.saveGState()
        context.translateBy(x: -1.5, y: 8.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon86Path = UIBezierPath()
        polygon86Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon86Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon86Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon86Path.close()
        color12.setFill()
        polygon86Path.fill()

        context.restoreGState()


        //// Polygon 87 Drawing
        context.saveGState()
        context.translateBy(x: -1.5, y: 25)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon87Path = UIBezierPath()
        polygon87Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon87Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon87Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon87Path.close()
        color12.setFill()
        polygon87Path.fill()

        context.restoreGState()


        //// Polygon 88 Drawing
        context.saveGState()
        context.translateBy(x: -1.5, y: 41.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon88Path = UIBezierPath()
        polygon88Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon88Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon88Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon88Path.close()
        color12.setFill()
        polygon88Path.fill()

        context.restoreGState()


        //// Polygon 89 Drawing
        context.saveGState()
        context.translateBy(x: -1.5, y: 58.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon89Path = UIBezierPath()
        polygon89Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon89Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon89Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon89Path.close()
        color12.setFill()
        polygon89Path.fill()

        context.restoreGState()


        //// Polygon 90 Drawing
        context.saveGState()
        context.translateBy(x: -1.5, y: 75)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon90Path = UIBezierPath()
        polygon90Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon90Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon90Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon90Path.close()
        color12.setFill()
        polygon90Path.fill()

        context.restoreGState()


        //// Polygon 91 Drawing
        context.saveGState()
        context.translateBy(x: -1.5, y: 91.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon91Path = UIBezierPath()
        polygon91Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon91Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon91Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon91Path.close()
        color12.setFill()
        polygon91Path.fill()

        context.restoreGState()




        //// Group 26
        //// Polygon 92 Drawing
        context.saveGState()
        context.translateBy(x: 3.5, y: -17)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon92Path = UIBezierPath()
        polygon92Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon92Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon92Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon92Path.close()
        UIColor.gray.setFill()
        polygon92Path.fill()

        context.restoreGState()


        //// Polygon 93 Drawing
        context.saveGState()
        context.translateBy(x: 3.5, y: 0)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon93Path = UIBezierPath()
        polygon93Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon93Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon93Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon93Path.close()
        color12.setFill()
        polygon93Path.fill()

        context.restoreGState()


        //// Polygon 94 Drawing
        context.saveGState()
        context.translateBy(x: 3.5, y: 16.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon94Path = UIBezierPath()
        polygon94Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon94Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon94Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon94Path.close()
        color12.setFill()
        polygon94Path.fill()

        context.restoreGState()


        //// Polygon 95 Drawing
        context.saveGState()
        context.translateBy(x: 3.5, y: 33)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon95Path = UIBezierPath()
        polygon95Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon95Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon95Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon95Path.close()
        color12.setFill()
        polygon95Path.fill()

        context.restoreGState()


        //// Polygon 96 Drawing
        context.saveGState()
        context.translateBy(x: 3.5, y: 50)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon96Path = UIBezierPath()
        polygon96Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon96Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon96Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon96Path.close()
        color12.setFill()
        polygon96Path.fill()

        context.restoreGState()


        //// Polygon 97 Drawing
        context.saveGState()
        context.translateBy(x: 3.5, y: 66.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon97Path = UIBezierPath()
        polygon97Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon97Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon97Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon97Path.close()
        color12.setFill()
        polygon97Path.fill()

        context.restoreGState()


        //// Polygon 98 Drawing
        context.saveGState()
        context.translateBy(x: 3.5, y: 83)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon98Path = UIBezierPath()
        polygon98Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon98Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon98Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon98Path.close()
        color12.setFill()
        polygon98Path.fill()

        context.restoreGState()






        //// Group 27
        //// Group 28
        //// Polygon 99 Drawing
        context.saveGState()
        context.translateBy(x: 12.5, y: 0)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon99Path = UIBezierPath()
        polygon99Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon99Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon99Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon99Path.close()
        color33.setFill()
        polygon99Path.fill()

        context.restoreGState()


        //// Polygon 100 Drawing
        context.saveGState()
        context.translateBy(x: 12.5, y: 17)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon100Path = UIBezierPath()
        polygon100Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon100Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon100Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon100Path.close()
        color12.setFill()
        polygon100Path.fill()

        context.restoreGState()


        //// Polygon 101 Drawing
        context.saveGState()
        context.translateBy(x: 12.5, y: 33.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon101Path = UIBezierPath()
        polygon101Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon101Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon101Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon101Path.close()
        color12.setFill()
        polygon101Path.fill()

        context.restoreGState()


        //// Polygon 102 Drawing
        context.saveGState()
        context.translateBy(x: 12.5, y: 50)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon102Path = UIBezierPath()
        polygon102Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon102Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon102Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon102Path.close()
        color12.setFill()
        polygon102Path.fill()

        context.restoreGState()


        //// Polygon 103 Drawing
        context.saveGState()
        context.translateBy(x: 12.5, y: 67)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon103Path = UIBezierPath()
        polygon103Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon103Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon103Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon103Path.close()
        color4.setFill()
        polygon103Path.fill()

        context.restoreGState()


        //// Polygon 104 Drawing
        context.saveGState()
        context.translateBy(x: 12.5, y: 83.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon104Path = UIBezierPath()
        polygon104Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon104Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon104Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon104Path.close()
        color32.setFill()
        polygon104Path.fill()

        context.restoreGState()


        //// Polygon 105 Drawing
        context.saveGState()
        context.translateBy(x: 12.5, y: 100)
        context.rotate(by: 90 * CGFloat.pi/180)

        let polygon105Path = UIBezierPath()
        polygon105Path.move(to: CGPoint(x: 8.5, y: 0))
        polygon105Path.addLine(to: CGPoint(x: 15.86, y: 11.63))
        polygon105Path.addLine(to: CGPoint(x: 1.14, y: 11.63))
        polygon105Path.close()
        UIColor.gray.setFill()
        polygon105Path.fill()

        context.restoreGState()




        //// Group 29
        //// Polygon 106 Drawing
        context.saveGState()
        context.translateBy(x: 17.5, y: -8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon106Path = UIBezierPath()
        polygon106Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon106Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon106Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon106Path.close()
        color12.setFill()
        polygon106Path.fill()

        context.restoreGState()


        //// Polygon 107 Drawing
        context.saveGState()
        context.translateBy(x: 17.5, y: 8.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon107Path = UIBezierPath()
        polygon107Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon107Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon107Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon107Path.close()
        color14.setFill()
        polygon107Path.fill()

        context.restoreGState()


        //// Polygon 108 Drawing
        context.saveGState()
        context.translateBy(x: 17.5, y: 25)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon108Path = UIBezierPath()
        polygon108Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon108Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon108Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon108Path.close()
        color29.setFill()
        polygon108Path.fill()

        context.restoreGState()


        //// Polygon 109 Drawing
        context.saveGState()
        context.translateBy(x: 17.5, y: 41.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon109Path = UIBezierPath()
        polygon109Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon109Path.addLine(to: CGPoint(x: -15.86, y: -3.87))
        polygon109Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon109Path.close()
        color4.setFill()
        polygon109Path.fill()

        context.restoreGState()


        //// Polygon 110 Drawing
        context.saveGState()
        context.translateBy(x: 17.5, y: 58.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon110Path = UIBezierPath()
        polygon110Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon110Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon110Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon110Path.close()
        color14.setFill()
        polygon110Path.fill()

        context.restoreGState()


        //// Polygon 111 Drawing
        context.saveGState()
        context.translateBy(x: 17.5, y: 75)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon111Path = UIBezierPath()
        polygon111Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon111Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon111Path.addLine(to: CGPoint(x: -1.14, y: -3.87))
        polygon111Path.close()
        color19.setFill()
        polygon111Path.fill()

        context.restoreGState()


        //// Polygon 112 Drawing
        context.saveGState()
        context.translateBy(x: 17.5, y: 91.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let polygon112Path = UIBezierPath()
        polygon112Path.move(to: CGPoint(x: -8.5, y: -15.5))
        polygon112Path.addLine(to: CGPoint(x: -15.86, y: -3.88))
        polygon112Path.addLine(to: CGPoint(x: -1.14, y: -3.88))
        polygon112Path.close()
        color12.setFill()
        polygon112Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostOutsidePattern(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let outsideWallFrost = UIColor(red: 0.462, green: 0.813, blue: 0.859, alpha: 1.000)
        let color6 = UIColor(red: 0.078, green: 0.451, blue: 0.502, alpha: 1.000)
        let color7 = UIColor(red: 0.184, green: 0.649, blue: 0.711, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        outsideWallFrost.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 10, y: 10, width: 80, height: 80), cornerRadius: 6)
        color6.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 18, y: 18, width: 64, height: 64), cornerRadius: 6)
        color7.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 25, y: 25, width: 50, height: 50), cornerRadius: 6)
        outsideWallFrost.setFill()
        rectangle4Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas7(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeTiles = UIColor(red: 0.989, green: 0.944, blue: 0.570, alpha: 1.000)
        let nebula4Color = UIColor(red: 0.962, green: 0.965, blue: 0.179, alpha: 1.000)

        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 11.5, y: 0))
        polygonPath.addLine(to: CGPoint(x: 23, y: 11.5))
        polygonPath.addLine(to: CGPoint(x: 11.5, y: 23))
        polygonPath.addLine(to: CGPoint(x: 0, y: 11.5))
        polygonPath.addLine(to: CGPoint(x: 11.5, y: 0))
        polygonPath.close()
        nebula4Color.setFill()
        polygonPath.fill()


        //// Polygon 2 Drawing
        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 23, y: 11.5))
        polygon2Path.addLine(to: CGPoint(x: 34.5, y: 23))
        polygon2Path.addLine(to: CGPoint(x: 23, y: 34.5))
        polygon2Path.addLine(to: CGPoint(x: 11.5, y: 23))
        polygon2Path.addLine(to: CGPoint(x: 23, y: 11.5))
        polygon2Path.close()
        UIColor.gray.setFill()
        polygon2Path.fill()


        //// Polygon 3 Drawing
        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 11.5, y: 23))
        polygon3Path.addLine(to: CGPoint(x: 23, y: 34.5))
        polygon3Path.addLine(to: CGPoint(x: 11.5, y: 46))
        polygon3Path.addLine(to: CGPoint(x: 0, y: 34.5))
        polygon3Path.addLine(to: CGPoint(x: 11.5, y: 23))
        polygon3Path.close()
        nebula4Color.setFill()
        polygon3Path.fill()


        //// Polygon 4 Drawing
        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 0, y: 11.5))
        polygon4Path.addLine(to: CGPoint(x: 11.5, y: 23))
        polygon4Path.addLine(to: CGPoint(x: 0, y: 34.5))
        polygon4Path.addLine(to: CGPoint(x: -11.5, y: 23))
        polygon4Path.addLine(to: CGPoint(x: 0, y: 11.5))
        polygon4Path.close()
        UIColor.gray.setFill()
        polygon4Path.fill()


        //// Polygon 5 Drawing
        let polygon5Path = UIBezierPath()
        polygon5Path.move(to: CGPoint(x: 34.5, y: 23))
        polygon5Path.addLine(to: CGPoint(x: 46, y: 34.5))
        polygon5Path.addLine(to: CGPoint(x: 34.5, y: 46))
        polygon5Path.addLine(to: CGPoint(x: 23, y: 34.5))
        polygon5Path.addLine(to: CGPoint(x: 34.5, y: 23))
        polygon5Path.close()
        UIColor.gray.setFill()
        polygon5Path.fill()


        //// Polygon 6 Drawing
        let polygon6Path = UIBezierPath()
        polygon6Path.move(to: CGPoint(x: 23, y: 34.5))
        polygon6Path.addLine(to: CGPoint(x: 34.5, y: 46))
        polygon6Path.addLine(to: CGPoint(x: 23, y: 57.5))
        polygon6Path.addLine(to: CGPoint(x: 11.5, y: 46))
        polygon6Path.addLine(to: CGPoint(x: 23, y: 34.5))
        polygon6Path.close()
        UIColor.gray.setFill()
        polygon6Path.fill()


        //// Polygon 7 Drawing
        let polygon7Path = UIBezierPath()
        polygon7Path.move(to: CGPoint(x: 23, y: -11.5))
        polygon7Path.addLine(to: CGPoint(x: 34.5, y: 0))
        polygon7Path.addLine(to: CGPoint(x: 23, y: 11.5))
        polygon7Path.addLine(to: CGPoint(x: 11.5, y: 0))
        polygon7Path.addLine(to: CGPoint(x: 23, y: -11.5))
        polygon7Path.close()
        UIColor.gray.setFill()
        polygon7Path.fill()


        //// Polygon 8 Drawing
        let polygon8Path = UIBezierPath()
        polygon8Path.move(to: CGPoint(x: 34.5, y: 0))
        polygon8Path.addLine(to: CGPoint(x: 46, y: 11.5))
        polygon8Path.addLine(to: CGPoint(x: 34.5, y: 23))
        polygon8Path.addLine(to: CGPoint(x: 23, y: 11.5))
        polygon8Path.addLine(to: CGPoint(x: 34.5, y: 0))
        polygon8Path.close()
        UIColor.gray.setFill()
        polygon8Path.fill()


        //// Polygon 9 Drawing
        let polygon9Path = UIBezierPath()
        polygon9Path.move(to: CGPoint(x: 46, y: 11.5))
        polygon9Path.addLine(to: CGPoint(x: 57.5, y: 23))
        polygon9Path.addLine(to: CGPoint(x: 46, y: 34.5))
        polygon9Path.addLine(to: CGPoint(x: 34.5, y: 23))
        polygon9Path.addLine(to: CGPoint(x: 46, y: 11.5))
        polygon9Path.close()
        nebula4Color.setFill()
        polygon9Path.fill()


        //// Polygon 10 Drawing
        let polygon10Path = UIBezierPath()
        polygon10Path.move(to: CGPoint(x: 0, y: 34.5))
        polygon10Path.addLine(to: CGPoint(x: 11.5, y: 46))
        polygon10Path.addLine(to: CGPoint(x: 0, y: 57.5))
        polygon10Path.addLine(to: CGPoint(x: -11.5, y: 46))
        polygon10Path.addLine(to: CGPoint(x: 0, y: 34.5))
        polygon10Path.close()
        UIColor.gray.setFill()
        polygon10Path.fill()


        //// Polygon 11 Drawing
        let polygon11Path = UIBezierPath()
        polygon11Path.move(to: CGPoint(x: 11.5, y: 46))
        polygon11Path.addLine(to: CGPoint(x: 23, y: 57.5))
        polygon11Path.addLine(to: CGPoint(x: 11.5, y: 69))
        polygon11Path.addLine(to: CGPoint(x: 0, y: 57.5))
        polygon11Path.addLine(to: CGPoint(x: 11.5, y: 46))
        polygon11Path.close()
        blazeTiles.setFill()
        polygon11Path.fill()


        //// Polygon 12 Drawing
        let polygon12Path = UIBezierPath()
        polygon12Path.move(to: CGPoint(x: 57.5, y: 23))
        polygon12Path.addLine(to: CGPoint(x: 69, y: 34.5))
        polygon12Path.addLine(to: CGPoint(x: 57.5, y: 46))
        polygon12Path.addLine(to: CGPoint(x: 46, y: 34.5))
        polygon12Path.addLine(to: CGPoint(x: 57.5, y: 23))
        polygon12Path.close()
        UIColor.gray.setFill()
        polygon12Path.fill()


        //// Polygon 13 Drawing
        let polygon13Path = UIBezierPath()
        polygon13Path.move(to: CGPoint(x: 0, y: -11.5))
        polygon13Path.addLine(to: CGPoint(x: 11.5, y: 0))
        polygon13Path.addLine(to: CGPoint(x: 0, y: 11.5))
        polygon13Path.addLine(to: CGPoint(x: -11.5, y: 0))
        polygon13Path.addLine(to: CGPoint(x: 0, y: -11.5))
        polygon13Path.close()
        UIColor.gray.setFill()
        polygon13Path.fill()


        //// Polygon 14 Drawing
        let polygon14Path = UIBezierPath()
        polygon14Path.move(to: CGPoint(x: 46, y: 34.5))
        polygon14Path.addLine(to: CGPoint(x: 57.5, y: 46))
        polygon14Path.addLine(to: CGPoint(x: 46, y: 57.5))
        polygon14Path.addLine(to: CGPoint(x: 34.5, y: 46))
        polygon14Path.addLine(to: CGPoint(x: 46, y: 34.5))
        polygon14Path.close()
        UIColor.gray.setFill()
        polygon14Path.fill()


        //// Polygon 15 Drawing
        let polygon15Path = UIBezierPath()
        polygon15Path.move(to: CGPoint(x: 34.5, y: 46))
        polygon15Path.addLine(to: CGPoint(x: 46, y: 57.5))
        polygon15Path.addLine(to: CGPoint(x: 34.5, y: 69))
        polygon15Path.addLine(to: CGPoint(x: 23, y: 57.5))
        polygon15Path.addLine(to: CGPoint(x: 34.5, y: 46))
        polygon15Path.close()
        nebula4Color.setFill()
        polygon15Path.fill()


        //// Polygon 16 Drawing
        let polygon16Path = UIBezierPath()
        polygon16Path.move(to: CGPoint(x: 23, y: 57.5))
        polygon16Path.addLine(to: CGPoint(x: 34.5, y: 69))
        polygon16Path.addLine(to: CGPoint(x: 23, y: 80.5))
        polygon16Path.addLine(to: CGPoint(x: 11.5, y: 69))
        polygon16Path.addLine(to: CGPoint(x: 23, y: 57.5))
        polygon16Path.close()
        nebula4Color.setFill()
        polygon16Path.fill()


        //// Polygon 17 Drawing
        let polygon17Path = UIBezierPath()
        polygon17Path.move(to: CGPoint(x: 0, y: 57.5))
        polygon17Path.addLine(to: CGPoint(x: 11.5, y: 69))
        polygon17Path.addLine(to: CGPoint(x: 0, y: 80.5))
        polygon17Path.addLine(to: CGPoint(x: -11.5, y: 69))
        polygon17Path.addLine(to: CGPoint(x: 0, y: 57.5))
        polygon17Path.close()
        UIColor.gray.setFill()
        polygon17Path.fill()


        //// Polygon 18 Drawing
        let polygon18Path = UIBezierPath()
        polygon18Path.move(to: CGPoint(x: 11.5, y: 69))
        polygon18Path.addLine(to: CGPoint(x: 23, y: 80.5))
        polygon18Path.addLine(to: CGPoint(x: 11.5, y: 92))
        polygon18Path.addLine(to: CGPoint(x: 0, y: 80.5))
        polygon18Path.addLine(to: CGPoint(x: 11.5, y: 69))
        polygon18Path.close()
        UIColor.gray.setFill()
        polygon18Path.fill()


        //// Polygon 19 Drawing
        let polygon19Path = UIBezierPath()
        polygon19Path.move(to: CGPoint(x: 0, y: 80.5))
        polygon19Path.addLine(to: CGPoint(x: 11.5, y: 92))
        polygon19Path.addLine(to: CGPoint(x: 0, y: 103.5))
        polygon19Path.addLine(to: CGPoint(x: -11.5, y: 92))
        polygon19Path.addLine(to: CGPoint(x: 0, y: 80.5))
        polygon19Path.close()
        nebula4Color.setFill()
        polygon19Path.fill()


        //// Polygon 20 Drawing
        let polygon20Path = UIBezierPath()
        polygon20Path.move(to: CGPoint(x: 11.5, y: 92))
        polygon20Path.addLine(to: CGPoint(x: 23, y: 103.5))
        polygon20Path.addLine(to: CGPoint(x: 11.5, y: 115))
        polygon20Path.addLine(to: CGPoint(x: 0, y: 103.5))
        polygon20Path.addLine(to: CGPoint(x: 11.5, y: 92))
        polygon20Path.close()
        UIColor.gray.setFill()
        polygon20Path.fill()


        //// Polygon 21 Drawing
        let polygon21Path = UIBezierPath()
        polygon21Path.move(to: CGPoint(x: 23, y: 80.5))
        polygon21Path.addLine(to: CGPoint(x: 34.5, y: 92))
        polygon21Path.addLine(to: CGPoint(x: 23, y: 103.5))
        polygon21Path.addLine(to: CGPoint(x: 11.5, y: 92))
        polygon21Path.addLine(to: CGPoint(x: 23, y: 80.5))
        polygon21Path.close()
        UIColor.gray.setFill()
        polygon21Path.fill()


        //// Polygon 22 Drawing
        let polygon22Path = UIBezierPath()
        polygon22Path.move(to: CGPoint(x: 34.5, y: 69))
        polygon22Path.addLine(to: CGPoint(x: 46, y: 80.5))
        polygon22Path.addLine(to: CGPoint(x: 34.5, y: 92))
        polygon22Path.addLine(to: CGPoint(x: 23, y: 80.5))
        polygon22Path.addLine(to: CGPoint(x: 34.5, y: 69))
        polygon22Path.close()
        blazeTiles.setFill()
        polygon22Path.fill()


        //// Polygon 23 Drawing
        let polygon23Path = UIBezierPath()
        polygon23Path.move(to: CGPoint(x: 46, y: 57.5))
        polygon23Path.addLine(to: CGPoint(x: 57.5, y: 69))
        polygon23Path.addLine(to: CGPoint(x: 46, y: 80.5))
        polygon23Path.addLine(to: CGPoint(x: 34.5, y: 69))
        polygon23Path.addLine(to: CGPoint(x: 46, y: 57.5))
        polygon23Path.close()
        UIColor.gray.setFill()
        polygon23Path.fill()


        //// Polygon 24 Drawing
        let polygon24Path = UIBezierPath()
        polygon24Path.move(to: CGPoint(x: 57.5, y: 46))
        polygon24Path.addLine(to: CGPoint(x: 69, y: 57.5))
        polygon24Path.addLine(to: CGPoint(x: 57.5, y: 69))
        polygon24Path.addLine(to: CGPoint(x: 46, y: 57.5))
        polygon24Path.addLine(to: CGPoint(x: 57.5, y: 46))
        polygon24Path.close()
        blazeTiles.setFill()
        polygon24Path.fill()


        //// Polygon 25 Drawing
        let polygon25Path = UIBezierPath()
        polygon25Path.move(to: CGPoint(x: 69, y: 34.5))
        polygon25Path.addLine(to: CGPoint(x: 80.5, y: 46))
        polygon25Path.addLine(to: CGPoint(x: 69, y: 57.5))
        polygon25Path.addLine(to: CGPoint(x: 57.5, y: 46))
        polygon25Path.addLine(to: CGPoint(x: 69, y: 34.5))
        polygon25Path.close()
        UIColor.gray.setFill()
        polygon25Path.fill()


        //// Polygon 26 Drawing
        let polygon26Path = UIBezierPath()
        polygon26Path.move(to: CGPoint(x: 46, y: -11.5))
        polygon26Path.addLine(to: CGPoint(x: 57.5, y: 0))
        polygon26Path.addLine(to: CGPoint(x: 46, y: 11.5))
        polygon26Path.addLine(to: CGPoint(x: 34.5, y: 0))
        polygon26Path.addLine(to: CGPoint(x: 46, y: -11.5))
        polygon26Path.close()
        UIColor.gray.setFill()
        polygon26Path.fill()


        //// Polygon 27 Drawing
        let polygon27Path = UIBezierPath()
        polygon27Path.move(to: CGPoint(x: 57.5, y: 0))
        polygon27Path.addLine(to: CGPoint(x: 69, y: 11.5))
        polygon27Path.addLine(to: CGPoint(x: 57.5, y: 23))
        polygon27Path.addLine(to: CGPoint(x: 46, y: 11.5))
        polygon27Path.addLine(to: CGPoint(x: 57.5, y: 0))
        polygon27Path.close()
        UIColor.gray.setFill()
        polygon27Path.fill()


        //// Polygon 28 Drawing
        let polygon28Path = UIBezierPath()
        polygon28Path.move(to: CGPoint(x: 69, y: 11.5))
        polygon28Path.addLine(to: CGPoint(x: 80.5, y: 23))
        polygon28Path.addLine(to: CGPoint(x: 69, y: 34.5))
        polygon28Path.addLine(to: CGPoint(x: 57.5, y: 23))
        polygon28Path.addLine(to: CGPoint(x: 69, y: 11.5))
        polygon28Path.close()
        UIColor.gray.setFill()
        polygon28Path.fill()


        //// Polygon 29 Drawing
        let polygon29Path = UIBezierPath()
        polygon29Path.move(to: CGPoint(x: 80.5, y: 23))
        polygon29Path.addLine(to: CGPoint(x: 92, y: 34.5))
        polygon29Path.addLine(to: CGPoint(x: 80.5, y: 46))
        polygon29Path.addLine(to: CGPoint(x: 69, y: 34.5))
        polygon29Path.addLine(to: CGPoint(x: 80.5, y: 23))
        polygon29Path.close()
        UIColor.gray.setFill()
        polygon29Path.fill()


        //// Polygon 30 Drawing
        let polygon30Path = UIBezierPath()
        polygon30Path.move(to: CGPoint(x: 69, y: -11.5))
        polygon30Path.addLine(to: CGPoint(x: 80.5, y: 0))
        polygon30Path.addLine(to: CGPoint(x: 69, y: 11.5))
        polygon30Path.addLine(to: CGPoint(x: 57.5, y: 0))
        polygon30Path.addLine(to: CGPoint(x: 69, y: -11.5))
        polygon30Path.close()
        UIColor.gray.setFill()
        polygon30Path.fill()


        //// Polygon 31 Drawing
        let polygon31Path = UIBezierPath()
        polygon31Path.move(to: CGPoint(x: 80.5, y: 0))
        polygon31Path.addLine(to: CGPoint(x: 92, y: 11.5))
        polygon31Path.addLine(to: CGPoint(x: 80.5, y: 23))
        polygon31Path.addLine(to: CGPoint(x: 69, y: 11.5))
        polygon31Path.addLine(to: CGPoint(x: 80.5, y: 0))
        polygon31Path.close()
        nebula4Color.setFill()
        polygon31Path.fill()


        //// Polygon 32 Drawing
        let polygon32Path = UIBezierPath()
        polygon32Path.move(to: CGPoint(x: 92, y: -11.5))
        polygon32Path.addLine(to: CGPoint(x: 103.5, y: 0))
        polygon32Path.addLine(to: CGPoint(x: 92, y: 11.5))
        polygon32Path.addLine(to: CGPoint(x: 80.5, y: 0))
        polygon32Path.addLine(to: CGPoint(x: 92, y: -11.5))
        polygon32Path.close()
        UIColor.gray.setFill()
        polygon32Path.fill()


        //// Polygon 33 Drawing
        let polygon33Path = UIBezierPath()
        polygon33Path.move(to: CGPoint(x: 103.5, y: 0))
        polygon33Path.addLine(to: CGPoint(x: 115, y: 11.5))
        polygon33Path.addLine(to: CGPoint(x: 103.5, y: 23))
        polygon33Path.addLine(to: CGPoint(x: 92, y: 11.5))
        polygon33Path.addLine(to: CGPoint(x: 103.5, y: 0))
        polygon33Path.close()
        UIColor.gray.setFill()
        polygon33Path.fill()


        //// Polygon 34 Drawing
        let polygon34Path = UIBezierPath()
        polygon34Path.move(to: CGPoint(x: 92, y: 11.5))
        polygon34Path.addLine(to: CGPoint(x: 103.5, y: 23))
        polygon34Path.addLine(to: CGPoint(x: 92, y: 34.5))
        polygon34Path.addLine(to: CGPoint(x: 80.5, y: 23))
        polygon34Path.addLine(to: CGPoint(x: 92, y: 11.5))
        polygon34Path.close()
        UIColor.gray.setFill()
        polygon34Path.fill()


        //// Polygon 35 Drawing
        let polygon35Path = UIBezierPath()
        polygon35Path.move(to: CGPoint(x: 103.5, y: 23))
        polygon35Path.addLine(to: CGPoint(x: 115, y: 34.5))
        polygon35Path.addLine(to: CGPoint(x: 103.5, y: 46))
        polygon35Path.addLine(to: CGPoint(x: 92, y: 34.5))
        polygon35Path.addLine(to: CGPoint(x: 103.5, y: 23))
        polygon35Path.close()
        UIColor.gray.setFill()
        polygon35Path.fill()


        //// Polygon 36 Drawing
        let polygon36Path = UIBezierPath()
        polygon36Path.move(to: CGPoint(x: 92, y: 34.5))
        polygon36Path.addLine(to: CGPoint(x: 103.5, y: 46))
        polygon36Path.addLine(to: CGPoint(x: 92, y: 57.5))
        polygon36Path.addLine(to: CGPoint(x: 80.5, y: 46))
        polygon36Path.addLine(to: CGPoint(x: 92, y: 34.5))
        polygon36Path.close()
        UIColor.gray.setFill()
        polygon36Path.fill()


        //// Polygon 37 Drawing
        let polygon37Path = UIBezierPath()
        polygon37Path.move(to: CGPoint(x: 103.5, y: 46))
        polygon37Path.addLine(to: CGPoint(x: 115, y: 57.5))
        polygon37Path.addLine(to: CGPoint(x: 103.5, y: 69))
        polygon37Path.addLine(to: CGPoint(x: 92, y: 57.5))
        polygon37Path.addLine(to: CGPoint(x: 103.5, y: 46))
        polygon37Path.close()
        UIColor.gray.setFill()
        polygon37Path.fill()


        //// Polygon 38 Drawing
        let polygon38Path = UIBezierPath()
        polygon38Path.move(to: CGPoint(x: 92, y: 57.5))
        polygon38Path.addLine(to: CGPoint(x: 103.5, y: 69))
        polygon38Path.addLine(to: CGPoint(x: 92, y: 80.5))
        polygon38Path.addLine(to: CGPoint(x: 80.5, y: 69))
        polygon38Path.addLine(to: CGPoint(x: 92, y: 57.5))
        polygon38Path.close()
        UIColor.gray.setFill()
        polygon38Path.fill()


        //// Polygon 39 Drawing
        let polygon39Path = UIBezierPath()
        polygon39Path.move(to: CGPoint(x: 80.5, y: 46))
        polygon39Path.addLine(to: CGPoint(x: 92, y: 57.5))
        polygon39Path.addLine(to: CGPoint(x: 80.5, y: 69))
        polygon39Path.addLine(to: CGPoint(x: 69, y: 57.5))
        polygon39Path.addLine(to: CGPoint(x: 80.5, y: 46))
        polygon39Path.close()
        nebula4Color.setFill()
        polygon39Path.fill()


        //// Polygon 40 Drawing
        let polygon40Path = UIBezierPath()
        polygon40Path.move(to: CGPoint(x: 69, y: 57.5))
        polygon40Path.addLine(to: CGPoint(x: 80.5, y: 69))
        polygon40Path.addLine(to: CGPoint(x: 69, y: 80.5))
        polygon40Path.addLine(to: CGPoint(x: 57.5, y: 69))
        polygon40Path.addLine(to: CGPoint(x: 69, y: 57.5))
        polygon40Path.close()
        UIColor.gray.setFill()
        polygon40Path.fill()


        //// Polygon 41 Drawing
        let polygon41Path = UIBezierPath()
        polygon41Path.move(to: CGPoint(x: 57.5, y: 69))
        polygon41Path.addLine(to: CGPoint(x: 69, y: 80.5))
        polygon41Path.addLine(to: CGPoint(x: 57.5, y: 92))
        polygon41Path.addLine(to: CGPoint(x: 46, y: 80.5))
        polygon41Path.addLine(to: CGPoint(x: 57.5, y: 69))
        polygon41Path.close()
        UIColor.gray.setFill()
        polygon41Path.fill()


        //// Polygon 42 Drawing
        let polygon42Path = UIBezierPath()
        polygon42Path.move(to: CGPoint(x: 46, y: 80.5))
        polygon42Path.addLine(to: CGPoint(x: 57.5, y: 92))
        polygon42Path.addLine(to: CGPoint(x: 46, y: 103.5))
        polygon42Path.addLine(to: CGPoint(x: 34.5, y: 92))
        polygon42Path.addLine(to: CGPoint(x: 46, y: 80.5))
        polygon42Path.close()
        nebula4Color.setFill()
        polygon42Path.fill()


        //// Polygon 43 Drawing
        let polygon43Path = UIBezierPath()
        polygon43Path.move(to: CGPoint(x: 34.5, y: 92))
        polygon43Path.addLine(to: CGPoint(x: 46, y: 103.5))
        polygon43Path.addLine(to: CGPoint(x: 34.5, y: 115))
        polygon43Path.addLine(to: CGPoint(x: 23, y: 103.5))
        polygon43Path.addLine(to: CGPoint(x: 34.5, y: 92))
        polygon43Path.close()
        UIColor.gray.setFill()
        polygon43Path.fill()


        //// Polygon 44 Drawing
        let polygon44Path = UIBezierPath()
        polygon44Path.move(to: CGPoint(x: 80.5, y: 69))
        polygon44Path.addLine(to: CGPoint(x: 92, y: 80.5))
        polygon44Path.addLine(to: CGPoint(x: 80.5, y: 92))
        polygon44Path.addLine(to: CGPoint(x: 69, y: 80.5))
        polygon44Path.addLine(to: CGPoint(x: 80.5, y: 69))
        polygon44Path.close()
        UIColor.gray.setFill()
        polygon44Path.fill()


        //// Polygon 45 Drawing
        let polygon45Path = UIBezierPath()
        polygon45Path.move(to: CGPoint(x: 69, y: 80.5))
        polygon45Path.addLine(to: CGPoint(x: 80.5, y: 92))
        polygon45Path.addLine(to: CGPoint(x: 69, y: 103.5))
        polygon45Path.addLine(to: CGPoint(x: 57.5, y: 92))
        polygon45Path.addLine(to: CGPoint(x: 69, y: 80.5))
        polygon45Path.close()
        UIColor.gray.setFill()
        polygon45Path.fill()


        //// Polygon 46 Drawing
        let polygon46Path = UIBezierPath()
        polygon46Path.move(to: CGPoint(x: 57.5, y: 92))
        polygon46Path.addLine(to: CGPoint(x: 69, y: 103.5))
        polygon46Path.addLine(to: CGPoint(x: 57.5, y: 115))
        polygon46Path.addLine(to: CGPoint(x: 46, y: 103.5))
        polygon46Path.addLine(to: CGPoint(x: 57.5, y: 92))
        polygon46Path.close()
        UIColor.gray.setFill()
        polygon46Path.fill()


        //// Polygon 47 Drawing
        let polygon47Path = UIBezierPath()
        polygon47Path.move(to: CGPoint(x: 103.5, y: 69))
        polygon47Path.addLine(to: CGPoint(x: 115, y: 80.5))
        polygon47Path.addLine(to: CGPoint(x: 103.5, y: 92))
        polygon47Path.addLine(to: CGPoint(x: 92, y: 80.5))
        polygon47Path.addLine(to: CGPoint(x: 103.5, y: 69))
        polygon47Path.close()
        UIColor.gray.setFill()
        polygon47Path.fill()


        //// Polygon 48 Drawing
        let polygon48Path = UIBezierPath()
        polygon48Path.move(to: CGPoint(x: 92, y: 80.5))
        polygon48Path.addLine(to: CGPoint(x: 103.5, y: 92))
        polygon48Path.addLine(to: CGPoint(x: 92, y: 103.5))
        polygon48Path.addLine(to: CGPoint(x: 80.5, y: 92))
        polygon48Path.addLine(to: CGPoint(x: 92, y: 80.5))
        polygon48Path.close()
        UIColor.gray.setFill()
        polygon48Path.fill()


        //// Polygon 49 Drawing
        let polygon49Path = UIBezierPath()
        polygon49Path.move(to: CGPoint(x: 80.5, y: 92))
        polygon49Path.addLine(to: CGPoint(x: 92, y: 103.5))
        polygon49Path.addLine(to: CGPoint(x: 80.5, y: 115))
        polygon49Path.addLine(to: CGPoint(x: 69, y: 103.5))
        polygon49Path.addLine(to: CGPoint(x: 80.5, y: 92))
        polygon49Path.close()
        UIColor.gray.setFill()
        polygon49Path.fill()


        //// Polygon 50 Drawing
        let polygon50Path = UIBezierPath()
        polygon50Path.move(to: CGPoint(x: 103.5, y: 92))
        polygon50Path.addLine(to: CGPoint(x: 115, y: 103.5))
        polygon50Path.addLine(to: CGPoint(x: 103.5, y: 115))
        polygon50Path.addLine(to: CGPoint(x: 92, y: 103.5))
        polygon50Path.addLine(to: CGPoint(x: 103.5, y: 92))
        polygon50Path.close()
        UIColor.gray.setFill()
        polygon50Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas8(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let color11 = UIColor(red: 1.000, green: 0.894, blue: 0.722, alpha: 1.000)
        let color13 = UIColor(red: 0.341, green: 0.212, blue: 0.055, alpha: 1.000)
        let color21 = UIColor(red: 0.586, green: 0.457, blue: 0.177, alpha: 1.000)
        let color22 = UIColor(red: 0.705, green: 0.212, blue: 0.212, alpha: 1.000)
        let color2 = UIColor(red: 0.784, green: 0.749, blue: 0.686, alpha: 1.000)

        //// Group
        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 10, y: 23))
        polygonPath.addLine(to: CGPoint(x: 20, y: 17.25))
        polygonPath.addLine(to: CGPoint(x: 20, y: 5.75))
        polygonPath.addLine(to: CGPoint(x: 10, y: 0))
        polygonPath.addLine(to: CGPoint(x: 0, y: 5.75))
        polygonPath.addLine(to: CGPoint(x: 0, y: 17.25))
        polygonPath.addLine(to: CGPoint(x: 10, y: 23))
        polygonPath.close()
        color11.setFill()
        polygonPath.fill()


        //// Polygon 2 Drawing
        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 30, y: 23))
        polygon2Path.addLine(to: CGPoint(x: 40, y: 17.25))
        polygon2Path.addLine(to: CGPoint(x: 40, y: 5.75))
        polygon2Path.addLine(to: CGPoint(x: 30, y: 0))
        polygon2Path.addLine(to: CGPoint(x: 20, y: 5.75))
        polygon2Path.addLine(to: CGPoint(x: 20, y: 17.25))
        polygon2Path.addLine(to: CGPoint(x: 30, y: 23))
        polygon2Path.close()
        color21.setFill()
        polygon2Path.fill()


        //// Polygon 3 Drawing
        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 50, y: 23))
        polygon3Path.addLine(to: CGPoint(x: 60, y: 17.25))
        polygon3Path.addLine(to: CGPoint(x: 60, y: 5.75))
        polygon3Path.addLine(to: CGPoint(x: 50, y: 0))
        polygon3Path.addLine(to: CGPoint(x: 40, y: 5.75))
        polygon3Path.addLine(to: CGPoint(x: 40, y: 17.25))
        polygon3Path.addLine(to: CGPoint(x: 50, y: 23))
        polygon3Path.close()
        color13.setFill()
        polygon3Path.fill()


        //// Polygon 4 Drawing
        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 70, y: 23))
        polygon4Path.addLine(to: CGPoint(x: 80, y: 17.25))
        polygon4Path.addLine(to: CGPoint(x: 80, y: 5.75))
        polygon4Path.addLine(to: CGPoint(x: 70, y: 0))
        polygon4Path.addLine(to: CGPoint(x: 60, y: 5.75))
        polygon4Path.addLine(to: CGPoint(x: 60, y: 17.25))
        polygon4Path.addLine(to: CGPoint(x: 70, y: 23))
        polygon4Path.close()
        color21.setFill()
        polygon4Path.fill()


        //// Polygon 5 Drawing
        let polygon5Path = UIBezierPath()
        polygon5Path.move(to: CGPoint(x: 90, y: 23))
        polygon5Path.addLine(to: CGPoint(x: 100, y: 17.25))
        polygon5Path.addLine(to: CGPoint(x: 100, y: 5.75))
        polygon5Path.addLine(to: CGPoint(x: 90, y: 0))
        polygon5Path.addLine(to: CGPoint(x: 80, y: 5.75))
        polygon5Path.addLine(to: CGPoint(x: 80, y: 17.25))
        polygon5Path.addLine(to: CGPoint(x: 90, y: 23))
        polygon5Path.close()
        color11.setFill()
        polygon5Path.fill()


        //// Polygon 6 Drawing
        let polygon6Path = UIBezierPath()
        polygon6Path.move(to: CGPoint(x: 110, y: 23))
        polygon6Path.addLine(to: CGPoint(x: 120, y: 17.25))
        polygon6Path.addLine(to: CGPoint(x: 120, y: 5.75))
        polygon6Path.addLine(to: CGPoint(x: 110, y: 0))
        polygon6Path.addLine(to: CGPoint(x: 100, y: 5.75))
        polygon6Path.addLine(to: CGPoint(x: 100, y: 17.25))
        polygon6Path.addLine(to: CGPoint(x: 110, y: 23))
        polygon6Path.close()
        UIColor.gray.setFill()
        polygon6Path.fill()


        //// Polygon 7 Drawing
        let polygon7Path = UIBezierPath()
        polygon7Path.move(to: CGPoint(x: -10, y: 23))
        polygon7Path.addLine(to: CGPoint(x: 0, y: 17.25))
        polygon7Path.addLine(to: CGPoint(x: 0, y: 5.75))
        polygon7Path.addLine(to: CGPoint(x: -10, y: 0))
        polygon7Path.addLine(to: CGPoint(x: -20, y: 5.75))
        polygon7Path.addLine(to: CGPoint(x: -20, y: 17.25))
        polygon7Path.addLine(to: CGPoint(x: -10, y: 23))
        polygon7Path.close()
        UIColor.gray.setFill()
        polygon7Path.fill()




        //// Group 2
        //// Polygon 8 Drawing
        let polygon8Path = UIBezierPath()
        polygon8Path.move(to: CGPoint(x: 0, y: 40))
        polygon8Path.addLine(to: CGPoint(x: 10, y: 34.25))
        polygon8Path.addLine(to: CGPoint(x: 10, y: 22.75))
        polygon8Path.addLine(to: CGPoint(x: 0, y: 17))
        polygon8Path.addLine(to: CGPoint(x: -10, y: 22.75))
        polygon8Path.addLine(to: CGPoint(x: -10, y: 34.25))
        polygon8Path.addLine(to: CGPoint(x: 0, y: 40))
        polygon8Path.close()
        color11.setFill()
        polygon8Path.fill()


        //// Polygon 9 Drawing
        let polygon9Path = UIBezierPath()
        polygon9Path.move(to: CGPoint(x: 20, y: 40))
        polygon9Path.addLine(to: CGPoint(x: 30, y: 34.25))
        polygon9Path.addLine(to: CGPoint(x: 30, y: 22.75))
        polygon9Path.addLine(to: CGPoint(x: 20, y: 17))
        polygon9Path.addLine(to: CGPoint(x: 10, y: 22.75))
        polygon9Path.addLine(to: CGPoint(x: 10, y: 34.25))
        polygon9Path.addLine(to: CGPoint(x: 20, y: 40))
        polygon9Path.close()
        color21.setFill()
        polygon9Path.fill()


        //// Polygon 10 Drawing
        let polygon10Path = UIBezierPath()
        polygon10Path.move(to: CGPoint(x: 40, y: 40))
        polygon10Path.addLine(to: CGPoint(x: 50, y: 34.25))
        polygon10Path.addLine(to: CGPoint(x: 50, y: 22.75))
        polygon10Path.addLine(to: CGPoint(x: 40, y: 17))
        polygon10Path.addLine(to: CGPoint(x: 30, y: 22.75))
        polygon10Path.addLine(to: CGPoint(x: 30, y: 34.25))
        polygon10Path.addLine(to: CGPoint(x: 40, y: 40))
        polygon10Path.close()
        color2.setFill()
        polygon10Path.fill()


        //// Polygon 11 Drawing
        let polygon11Path = UIBezierPath()
        polygon11Path.move(to: CGPoint(x: 60, y: 40))
        polygon11Path.addLine(to: CGPoint(x: 70, y: 34.25))
        polygon11Path.addLine(to: CGPoint(x: 70, y: 22.75))
        polygon11Path.addLine(to: CGPoint(x: 60, y: 17))
        polygon11Path.addLine(to: CGPoint(x: 50, y: 22.75))
        polygon11Path.addLine(to: CGPoint(x: 50, y: 34.25))
        polygon11Path.addLine(to: CGPoint(x: 60, y: 40))
        polygon11Path.close()
        color2.setFill()
        polygon11Path.fill()


        //// Polygon 12 Drawing
        let polygon12Path = UIBezierPath()
        polygon12Path.move(to: CGPoint(x: 80, y: 40))
        polygon12Path.addLine(to: CGPoint(x: 90, y: 34.25))
        polygon12Path.addLine(to: CGPoint(x: 90, y: 22.75))
        polygon12Path.addLine(to: CGPoint(x: 80, y: 17))
        polygon12Path.addLine(to: CGPoint(x: 70, y: 22.75))
        polygon12Path.addLine(to: CGPoint(x: 70, y: 34.25))
        polygon12Path.addLine(to: CGPoint(x: 80, y: 40))
        polygon12Path.close()
        color21.setFill()
        polygon12Path.fill()


        //// Polygon 13 Drawing
        let polygon13Path = UIBezierPath()
        polygon13Path.move(to: CGPoint(x: 100, y: 40))
        polygon13Path.addLine(to: CGPoint(x: 110, y: 34.25))
        polygon13Path.addLine(to: CGPoint(x: 110, y: 22.75))
        polygon13Path.addLine(to: CGPoint(x: 100, y: 17))
        polygon13Path.addLine(to: CGPoint(x: 90, y: 22.75))
        polygon13Path.addLine(to: CGPoint(x: 90, y: 34.25))
        polygon13Path.addLine(to: CGPoint(x: 100, y: 40))
        polygon13Path.close()
        color11.setFill()
        polygon13Path.fill()


        //// Polygon 14 Drawing
        let polygon14Path = UIBezierPath()
        polygon14Path.move(to: CGPoint(x: -20, y: 40))
        polygon14Path.addLine(to: CGPoint(x: -10, y: 34.25))
        polygon14Path.addLine(to: CGPoint(x: -10, y: 22.75))
        polygon14Path.addLine(to: CGPoint(x: -20, y: 17))
        polygon14Path.addLine(to: CGPoint(x: -30, y: 22.75))
        polygon14Path.addLine(to: CGPoint(x: -30, y: 34.25))
        polygon14Path.addLine(to: CGPoint(x: -20, y: 40))
        polygon14Path.close()
        UIColor.gray.setFill()
        polygon14Path.fill()




        //// Group 3
        //// Polygon 15 Drawing
        let polygon15Path = UIBezierPath()
        polygon15Path.move(to: CGPoint(x: 10, y: 57))
        polygon15Path.addLine(to: CGPoint(x: 20, y: 51.25))
        polygon15Path.addLine(to: CGPoint(x: 20, y: 39.75))
        polygon15Path.addLine(to: CGPoint(x: 10, y: 34))
        polygon15Path.addLine(to: CGPoint(x: 0, y: 39.75))
        polygon15Path.addLine(to: CGPoint(x: 0, y: 51.25))
        polygon15Path.addLine(to: CGPoint(x: 10, y: 57))
        polygon15Path.close()
        color11.setFill()
        polygon15Path.fill()


        //// Polygon 16 Drawing
        let polygon16Path = UIBezierPath()
        polygon16Path.move(to: CGPoint(x: 30, y: 57))
        polygon16Path.addLine(to: CGPoint(x: 40, y: 51.25))
        polygon16Path.addLine(to: CGPoint(x: 40, y: 39.75))
        polygon16Path.addLine(to: CGPoint(x: 30, y: 34))
        polygon16Path.addLine(to: CGPoint(x: 20, y: 39.75))
        polygon16Path.addLine(to: CGPoint(x: 20, y: 51.25))
        polygon16Path.addLine(to: CGPoint(x: 30, y: 57))
        polygon16Path.close()
        color2.setFill()
        polygon16Path.fill()


        //// Polygon 17 Drawing
        let polygon17Path = UIBezierPath()
        polygon17Path.move(to: CGPoint(x: 50, y: 57))
        polygon17Path.addLine(to: CGPoint(x: 60, y: 51.25))
        polygon17Path.addLine(to: CGPoint(x: 60, y: 39.75))
        polygon17Path.addLine(to: CGPoint(x: 50, y: 34))
        polygon17Path.addLine(to: CGPoint(x: 40, y: 39.75))
        polygon17Path.addLine(to: CGPoint(x: 40, y: 51.25))
        polygon17Path.addLine(to: CGPoint(x: 50, y: 57))
        polygon17Path.close()
        color22.setFill()
        polygon17Path.fill()


        //// Polygon 18 Drawing
        let polygon18Path = UIBezierPath()
        polygon18Path.move(to: CGPoint(x: 70, y: 57))
        polygon18Path.addLine(to: CGPoint(x: 80, y: 51.25))
        polygon18Path.addLine(to: CGPoint(x: 80, y: 39.75))
        polygon18Path.addLine(to: CGPoint(x: 70, y: 34))
        polygon18Path.addLine(to: CGPoint(x: 60, y: 39.75))
        polygon18Path.addLine(to: CGPoint(x: 60, y: 51.25))
        polygon18Path.addLine(to: CGPoint(x: 70, y: 57))
        polygon18Path.close()
        color2.setFill()
        polygon18Path.fill()


        //// Polygon 19 Drawing
        let polygon19Path = UIBezierPath()
        polygon19Path.move(to: CGPoint(x: 90, y: 57))
        polygon19Path.addLine(to: CGPoint(x: 100, y: 51.25))
        polygon19Path.addLine(to: CGPoint(x: 100, y: 39.75))
        polygon19Path.addLine(to: CGPoint(x: 90, y: 34))
        polygon19Path.addLine(to: CGPoint(x: 80, y: 39.75))
        polygon19Path.addLine(to: CGPoint(x: 80, y: 51.25))
        polygon19Path.addLine(to: CGPoint(x: 90, y: 57))
        polygon19Path.close()
        color11.setFill()
        polygon19Path.fill()


        //// Polygon 20 Drawing
        let polygon20Path = UIBezierPath()
        polygon20Path.move(to: CGPoint(x: 110, y: 57))
        polygon20Path.addLine(to: CGPoint(x: 120, y: 51.25))
        polygon20Path.addLine(to: CGPoint(x: 120, y: 39.75))
        polygon20Path.addLine(to: CGPoint(x: 110, y: 34))
        polygon20Path.addLine(to: CGPoint(x: 100, y: 39.75))
        polygon20Path.addLine(to: CGPoint(x: 100, y: 51.25))
        polygon20Path.addLine(to: CGPoint(x: 110, y: 57))
        polygon20Path.close()
        UIColor.gray.setFill()
        polygon20Path.fill()


        //// Polygon 21 Drawing
        let polygon21Path = UIBezierPath()
        polygon21Path.move(to: CGPoint(x: -10, y: 57))
        polygon21Path.addLine(to: CGPoint(x: 0, y: 51.25))
        polygon21Path.addLine(to: CGPoint(x: 0, y: 39.75))
        polygon21Path.addLine(to: CGPoint(x: -10, y: 34))
        polygon21Path.addLine(to: CGPoint(x: -20, y: 39.75))
        polygon21Path.addLine(to: CGPoint(x: -20, y: 51.25))
        polygon21Path.addLine(to: CGPoint(x: -10, y: 57))
        polygon21Path.close()
        UIColor.gray.setFill()
        polygon21Path.fill()




        //// Group 4
        //// Polygon 22 Drawing
        let polygon22Path = UIBezierPath()
        polygon22Path.move(to: CGPoint(x: 0, y: 74))
        polygon22Path.addLine(to: CGPoint(x: 10, y: 68.25))
        polygon22Path.addLine(to: CGPoint(x: 10, y: 56.75))
        polygon22Path.addLine(to: CGPoint(x: 0, y: 51))
        polygon22Path.addLine(to: CGPoint(x: -10, y: 56.75))
        polygon22Path.addLine(to: CGPoint(x: -10, y: 68.25))
        polygon22Path.addLine(to: CGPoint(x: 0, y: 74))
        polygon22Path.close()
        color11.setFill()
        polygon22Path.fill()


        //// Polygon 23 Drawing
        let polygon23Path = UIBezierPath()
        polygon23Path.move(to: CGPoint(x: 20, y: 74))
        polygon23Path.addLine(to: CGPoint(x: 30, y: 68.25))
        polygon23Path.addLine(to: CGPoint(x: 30, y: 56.75))
        polygon23Path.addLine(to: CGPoint(x: 20, y: 51))
        polygon23Path.addLine(to: CGPoint(x: 10, y: 56.75))
        polygon23Path.addLine(to: CGPoint(x: 10, y: 68.25))
        polygon23Path.addLine(to: CGPoint(x: 20, y: 74))
        polygon23Path.close()
        color21.setFill()
        polygon23Path.fill()


        //// Polygon 24 Drawing
        let polygon24Path = UIBezierPath()
        polygon24Path.move(to: CGPoint(x: 40, y: 74))
        polygon24Path.addLine(to: CGPoint(x: 50, y: 68.25))
        polygon24Path.addLine(to: CGPoint(x: 50, y: 56.75))
        polygon24Path.addLine(to: CGPoint(x: 40, y: 51))
        polygon24Path.addLine(to: CGPoint(x: 30, y: 56.75))
        polygon24Path.addLine(to: CGPoint(x: 30, y: 68.25))
        polygon24Path.addLine(to: CGPoint(x: 40, y: 74))
        polygon24Path.close()
        color2.setFill()
        polygon24Path.fill()


        //// Polygon 25 Drawing
        let polygon25Path = UIBezierPath()
        polygon25Path.move(to: CGPoint(x: 60, y: 74))
        polygon25Path.addLine(to: CGPoint(x: 70, y: 68.25))
        polygon25Path.addLine(to: CGPoint(x: 70, y: 56.75))
        polygon25Path.addLine(to: CGPoint(x: 60, y: 51))
        polygon25Path.addLine(to: CGPoint(x: 50, y: 56.75))
        polygon25Path.addLine(to: CGPoint(x: 50, y: 68.25))
        polygon25Path.addLine(to: CGPoint(x: 60, y: 74))
        polygon25Path.close()
        color2.setFill()
        polygon25Path.fill()


        //// Polygon 26 Drawing
        let polygon26Path = UIBezierPath()
        polygon26Path.move(to: CGPoint(x: 80, y: 74))
        polygon26Path.addLine(to: CGPoint(x: 90, y: 68.25))
        polygon26Path.addLine(to: CGPoint(x: 90, y: 56.75))
        polygon26Path.addLine(to: CGPoint(x: 80, y: 51))
        polygon26Path.addLine(to: CGPoint(x: 70, y: 56.75))
        polygon26Path.addLine(to: CGPoint(x: 70, y: 68.25))
        polygon26Path.addLine(to: CGPoint(x: 80, y: 74))
        polygon26Path.close()
        color21.setFill()
        polygon26Path.fill()


        //// Polygon 27 Drawing
        let polygon27Path = UIBezierPath()
        polygon27Path.move(to: CGPoint(x: 100, y: 74))
        polygon27Path.addLine(to: CGPoint(x: 110, y: 68.25))
        polygon27Path.addLine(to: CGPoint(x: 110, y: 56.75))
        polygon27Path.addLine(to: CGPoint(x: 100, y: 51))
        polygon27Path.addLine(to: CGPoint(x: 90, y: 56.75))
        polygon27Path.addLine(to: CGPoint(x: 90, y: 68.25))
        polygon27Path.addLine(to: CGPoint(x: 100, y: 74))
        polygon27Path.close()
        color11.setFill()
        polygon27Path.fill()


        //// Polygon 28 Drawing
        let polygon28Path = UIBezierPath()
        polygon28Path.move(to: CGPoint(x: -20, y: 74))
        polygon28Path.addLine(to: CGPoint(x: -10, y: 68.25))
        polygon28Path.addLine(to: CGPoint(x: -10, y: 56.75))
        polygon28Path.addLine(to: CGPoint(x: -20, y: 51))
        polygon28Path.addLine(to: CGPoint(x: -30, y: 56.75))
        polygon28Path.addLine(to: CGPoint(x: -30, y: 68.25))
        polygon28Path.addLine(to: CGPoint(x: -20, y: 74))
        polygon28Path.close()
        UIColor.gray.setFill()
        polygon28Path.fill()




        //// Group 5
        //// Polygon 29 Drawing
        let polygon29Path = UIBezierPath()
        polygon29Path.move(to: CGPoint(x: 10, y: 91))
        polygon29Path.addLine(to: CGPoint(x: 20, y: 85.25))
        polygon29Path.addLine(to: CGPoint(x: 20, y: 73.75))
        polygon29Path.addLine(to: CGPoint(x: 10, y: 68))
        polygon29Path.addLine(to: CGPoint(x: 0, y: 73.75))
        polygon29Path.addLine(to: CGPoint(x: 0, y: 85.25))
        polygon29Path.addLine(to: CGPoint(x: 10, y: 91))
        polygon29Path.close()
        color11.setFill()
        polygon29Path.fill()


        //// Polygon 30 Drawing
        let polygon30Path = UIBezierPath()
        polygon30Path.move(to: CGPoint(x: 30, y: 91))
        polygon30Path.addLine(to: CGPoint(x: 40, y: 85.25))
        polygon30Path.addLine(to: CGPoint(x: 40, y: 73.75))
        polygon30Path.addLine(to: CGPoint(x: 30, y: 68))
        polygon30Path.addLine(to: CGPoint(x: 20, y: 73.75))
        polygon30Path.addLine(to: CGPoint(x: 20, y: 85.25))
        polygon30Path.addLine(to: CGPoint(x: 30, y: 91))
        polygon30Path.close()
        color21.setFill()
        polygon30Path.fill()


        //// Polygon 31 Drawing
        let polygon31Path = UIBezierPath()
        polygon31Path.move(to: CGPoint(x: 50, y: 91))
        polygon31Path.addLine(to: CGPoint(x: 60, y: 85.25))
        polygon31Path.addLine(to: CGPoint(x: 60, y: 73.75))
        polygon31Path.addLine(to: CGPoint(x: 50, y: 68))
        polygon31Path.addLine(to: CGPoint(x: 40, y: 73.75))
        polygon31Path.addLine(to: CGPoint(x: 40, y: 85.25))
        polygon31Path.addLine(to: CGPoint(x: 50, y: 91))
        polygon31Path.close()
        color13.setFill()
        polygon31Path.fill()


        //// Polygon 32 Drawing
        let polygon32Path = UIBezierPath()
        polygon32Path.move(to: CGPoint(x: 70, y: 91))
        polygon32Path.addLine(to: CGPoint(x: 80, y: 85.25))
        polygon32Path.addLine(to: CGPoint(x: 80, y: 73.75))
        polygon32Path.addLine(to: CGPoint(x: 70, y: 68))
        polygon32Path.addLine(to: CGPoint(x: 60, y: 73.75))
        polygon32Path.addLine(to: CGPoint(x: 60, y: 85.25))
        polygon32Path.addLine(to: CGPoint(x: 70, y: 91))
        polygon32Path.close()
        color21.setFill()
        polygon32Path.fill()


        //// Polygon 33 Drawing
        let polygon33Path = UIBezierPath()
        polygon33Path.move(to: CGPoint(x: 90, y: 91))
        polygon33Path.addLine(to: CGPoint(x: 100, y: 85.25))
        polygon33Path.addLine(to: CGPoint(x: 100, y: 73.75))
        polygon33Path.addLine(to: CGPoint(x: 90, y: 68))
        polygon33Path.addLine(to: CGPoint(x: 80, y: 73.75))
        polygon33Path.addLine(to: CGPoint(x: 80, y: 85.25))
        polygon33Path.addLine(to: CGPoint(x: 90, y: 91))
        polygon33Path.close()
        color11.setFill()
        polygon33Path.fill()


        //// Polygon 34 Drawing
        let polygon34Path = UIBezierPath()
        polygon34Path.move(to: CGPoint(x: 110, y: 91))
        polygon34Path.addLine(to: CGPoint(x: 120, y: 85.25))
        polygon34Path.addLine(to: CGPoint(x: 120, y: 73.75))
        polygon34Path.addLine(to: CGPoint(x: 110, y: 68))
        polygon34Path.addLine(to: CGPoint(x: 100, y: 73.75))
        polygon34Path.addLine(to: CGPoint(x: 100, y: 85.25))
        polygon34Path.addLine(to: CGPoint(x: 110, y: 91))
        polygon34Path.close()
        UIColor.gray.setFill()
        polygon34Path.fill()


        //// Polygon 35 Drawing
        let polygon35Path = UIBezierPath()
        polygon35Path.move(to: CGPoint(x: -10, y: 91))
        polygon35Path.addLine(to: CGPoint(x: 0, y: 85.25))
        polygon35Path.addLine(to: CGPoint(x: 0, y: 73.75))
        polygon35Path.addLine(to: CGPoint(x: -10, y: 68))
        polygon35Path.addLine(to: CGPoint(x: -20, y: 73.75))
        polygon35Path.addLine(to: CGPoint(x: -20, y: 85.25))
        polygon35Path.addLine(to: CGPoint(x: -10, y: 91))
        polygon35Path.close()
        UIColor.gray.setFill()
        polygon35Path.fill()




        //// Group 6
        //// Polygon 36 Drawing
        let polygon36Path = UIBezierPath()
        polygon36Path.move(to: CGPoint(x: 0, y: 108))
        polygon36Path.addLine(to: CGPoint(x: 10, y: 102.25))
        polygon36Path.addLine(to: CGPoint(x: 10, y: 90.75))
        polygon36Path.addLine(to: CGPoint(x: 0, y: 85))
        polygon36Path.addLine(to: CGPoint(x: -10, y: 90.75))
        polygon36Path.addLine(to: CGPoint(x: -10, y: 102.25))
        polygon36Path.addLine(to: CGPoint(x: 0, y: 108))
        polygon36Path.close()
        color11.setFill()
        polygon36Path.fill()


        //// Polygon 37 Drawing
        let polygon37Path = UIBezierPath()
        polygon37Path.move(to: CGPoint(x: 20, y: 108))
        polygon37Path.addLine(to: CGPoint(x: 30, y: 102.25))
        polygon37Path.addLine(to: CGPoint(x: 30, y: 90.75))
        polygon37Path.addLine(to: CGPoint(x: 20, y: 85))
        polygon37Path.addLine(to: CGPoint(x: 10, y: 90.75))
        polygon37Path.addLine(to: CGPoint(x: 10, y: 102.25))
        polygon37Path.addLine(to: CGPoint(x: 20, y: 108))
        polygon37Path.close()
        color11.setFill()
        polygon37Path.fill()


        //// Polygon 38 Drawing
        let polygon38Path = UIBezierPath()
        polygon38Path.move(to: CGPoint(x: 40, y: 108))
        polygon38Path.addLine(to: CGPoint(x: 50, y: 102.25))
        polygon38Path.addLine(to: CGPoint(x: 50, y: 90.75))
        polygon38Path.addLine(to: CGPoint(x: 40, y: 85))
        polygon38Path.addLine(to: CGPoint(x: 30, y: 90.75))
        polygon38Path.addLine(to: CGPoint(x: 30, y: 102.25))
        polygon38Path.addLine(to: CGPoint(x: 40, y: 108))
        polygon38Path.close()
        color11.setFill()
        polygon38Path.fill()


        //// Polygon 39 Drawing
        let polygon39Path = UIBezierPath()
        polygon39Path.move(to: CGPoint(x: 60, y: 108))
        polygon39Path.addLine(to: CGPoint(x: 70, y: 102.25))
        polygon39Path.addLine(to: CGPoint(x: 70, y: 90.75))
        polygon39Path.addLine(to: CGPoint(x: 60, y: 85))
        polygon39Path.addLine(to: CGPoint(x: 50, y: 90.75))
        polygon39Path.addLine(to: CGPoint(x: 50, y: 102.25))
        polygon39Path.addLine(to: CGPoint(x: 60, y: 108))
        polygon39Path.close()
        color11.setFill()
        polygon39Path.fill()


        //// Polygon 40 Drawing
        let polygon40Path = UIBezierPath()
        polygon40Path.move(to: CGPoint(x: 80, y: 108))
        polygon40Path.addLine(to: CGPoint(x: 90, y: 102.25))
        polygon40Path.addLine(to: CGPoint(x: 90, y: 90.75))
        polygon40Path.addLine(to: CGPoint(x: 80, y: 85))
        polygon40Path.addLine(to: CGPoint(x: 70, y: 90.75))
        polygon40Path.addLine(to: CGPoint(x: 70, y: 102.25))
        polygon40Path.addLine(to: CGPoint(x: 80, y: 108))
        polygon40Path.close()
        color11.setFill()
        polygon40Path.fill()


        //// Polygon 41 Drawing
        let polygon41Path = UIBezierPath()
        polygon41Path.move(to: CGPoint(x: 100, y: 108))
        polygon41Path.addLine(to: CGPoint(x: 110, y: 102.25))
        polygon41Path.addLine(to: CGPoint(x: 110, y: 90.75))
        polygon41Path.addLine(to: CGPoint(x: 100, y: 85))
        polygon41Path.addLine(to: CGPoint(x: 90, y: 90.75))
        polygon41Path.addLine(to: CGPoint(x: 90, y: 102.25))
        polygon41Path.addLine(to: CGPoint(x: 100, y: 108))
        polygon41Path.close()
        color11.setFill()
        polygon41Path.fill()


        //// Polygon 42 Drawing
        let polygon42Path = UIBezierPath()
        polygon42Path.move(to: CGPoint(x: -20, y: 108))
        polygon42Path.addLine(to: CGPoint(x: -10, y: 102.25))
        polygon42Path.addLine(to: CGPoint(x: -10, y: 90.75))
        polygon42Path.addLine(to: CGPoint(x: -20, y: 85))
        polygon42Path.addLine(to: CGPoint(x: -30, y: 90.75))
        polygon42Path.addLine(to: CGPoint(x: -30, y: 102.25))
        polygon42Path.addLine(to: CGPoint(x: -20, y: 108))
        polygon42Path.close()
        UIColor.gray.setFill()
        polygon42Path.fill()




        //// Group 7
        //// Polygon 43 Drawing
        let polygon43Path = UIBezierPath()
        polygon43Path.move(to: CGPoint(x: 0, y: 6))
        polygon43Path.addLine(to: CGPoint(x: 10, y: 0.25))
        polygon43Path.addLine(to: CGPoint(x: 10, y: -11.25))
        polygon43Path.addLine(to: CGPoint(x: 0, y: -17))
        polygon43Path.addLine(to: CGPoint(x: -10, y: -11.25))
        polygon43Path.addLine(to: CGPoint(x: -10, y: 0.25))
        polygon43Path.addLine(to: CGPoint(x: 0, y: 6))
        polygon43Path.close()
        color11.setFill()
        polygon43Path.fill()


        //// Polygon 44 Drawing
        let polygon44Path = UIBezierPath()
        polygon44Path.move(to: CGPoint(x: 20, y: 6))
        polygon44Path.addLine(to: CGPoint(x: 30, y: 0.25))
        polygon44Path.addLine(to: CGPoint(x: 30, y: -11.25))
        polygon44Path.addLine(to: CGPoint(x: 20, y: -17))
        polygon44Path.addLine(to: CGPoint(x: 10, y: -11.25))
        polygon44Path.addLine(to: CGPoint(x: 10, y: 0.25))
        polygon44Path.addLine(to: CGPoint(x: 20, y: 6))
        polygon44Path.close()
        color11.setFill()
        polygon44Path.fill()


        //// Polygon 45 Drawing
        let polygon45Path = UIBezierPath()
        polygon45Path.move(to: CGPoint(x: 40, y: 6))
        polygon45Path.addLine(to: CGPoint(x: 50, y: 0.25))
        polygon45Path.addLine(to: CGPoint(x: 50, y: -11.25))
        polygon45Path.addLine(to: CGPoint(x: 40, y: -17))
        polygon45Path.addLine(to: CGPoint(x: 30, y: -11.25))
        polygon45Path.addLine(to: CGPoint(x: 30, y: 0.25))
        polygon45Path.addLine(to: CGPoint(x: 40, y: 6))
        polygon45Path.close()
        color11.setFill()
        polygon45Path.fill()


        //// Polygon 46 Drawing
        let polygon46Path = UIBezierPath()
        polygon46Path.move(to: CGPoint(x: 60, y: 6))
        polygon46Path.addLine(to: CGPoint(x: 70, y: 0.25))
        polygon46Path.addLine(to: CGPoint(x: 70, y: -11.25))
        polygon46Path.addLine(to: CGPoint(x: 60, y: -17))
        polygon46Path.addLine(to: CGPoint(x: 50, y: -11.25))
        polygon46Path.addLine(to: CGPoint(x: 50, y: 0.25))
        polygon46Path.addLine(to: CGPoint(x: 60, y: 6))
        polygon46Path.close()
        color11.setFill()
        polygon46Path.fill()


        //// Polygon 47 Drawing
        let polygon47Path = UIBezierPath()
        polygon47Path.move(to: CGPoint(x: 80, y: 6))
        polygon47Path.addLine(to: CGPoint(x: 90, y: 0.25))
        polygon47Path.addLine(to: CGPoint(x: 90, y: -11.25))
        polygon47Path.addLine(to: CGPoint(x: 80, y: -17))
        polygon47Path.addLine(to: CGPoint(x: 70, y: -11.25))
        polygon47Path.addLine(to: CGPoint(x: 70, y: 0.25))
        polygon47Path.addLine(to: CGPoint(x: 80, y: 6))
        polygon47Path.close()
        color11.setFill()
        polygon47Path.fill()


        //// Polygon 48 Drawing
        let polygon48Path = UIBezierPath()
        polygon48Path.move(to: CGPoint(x: 100, y: 6))
        polygon48Path.addLine(to: CGPoint(x: 110, y: 0.25))
        polygon48Path.addLine(to: CGPoint(x: 110, y: -11.25))
        polygon48Path.addLine(to: CGPoint(x: 100, y: -17))
        polygon48Path.addLine(to: CGPoint(x: 90, y: -11.25))
        polygon48Path.addLine(to: CGPoint(x: 90, y: 0.25))
        polygon48Path.addLine(to: CGPoint(x: 100, y: 6))
        polygon48Path.close()
        color11.setFill()
        polygon48Path.fill()


        //// Polygon 49 Drawing
        let polygon49Path = UIBezierPath()
        polygon49Path.move(to: CGPoint(x: -20, y: 6))
        polygon49Path.addLine(to: CGPoint(x: -10, y: 0.25))
        polygon49Path.addLine(to: CGPoint(x: -10, y: -11.25))
        polygon49Path.addLine(to: CGPoint(x: -20, y: -17))
        polygon49Path.addLine(to: CGPoint(x: -30, y: -11.25))
        polygon49Path.addLine(to: CGPoint(x: -30, y: 0.25))
        polygon49Path.addLine(to: CGPoint(x: -20, y: 6))
        polygon49Path.close()
        UIColor.gray.setFill()
        polygon49Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawPlaid(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let color8 = UIColor(red: 0.000, green: 0.525, blue: 0.000, alpha: 1.000)
        let color9 = UIColor(red: 0.000, green: 0.420, blue: 0.000, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 100, height: 100))
        color8.setFill()
        rectanglePath.fill()


        //// dark
        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 25, y: 50))
        polygonPath.addLine(to: CGPoint(x: 50, y: 100))
        polygonPath.addLine(to: CGPoint(x: 0, y: 100))
        polygonPath.addLine(to: CGPoint(x: 25, y: 50))
        polygonPath.close()
        color9.setFill()
        polygonPath.fill()


        //// Polygon 2 Drawing
        context.saveGState()
        context.translateBy(x: 50, y: 50)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 25, y: 0))
        polygon2Path.addLine(to: CGPoint(x: 50, y: 50))
        polygon2Path.addLine(to: CGPoint(x: 0, y: 50))
        polygon2Path.addLine(to: CGPoint(x: 25, y: 0))
        polygon2Path.close()
        color9.setFill()
        polygon2Path.fill()

        context.restoreGState()


        //// Polygon 3 Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 50)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 25, y: 0))
        polygon3Path.addLine(to: CGPoint(x: 50, y: 50))
        polygon3Path.addLine(to: CGPoint(x: 0, y: 50))
        polygon3Path.addLine(to: CGPoint(x: 25, y: 0))
        polygon3Path.close()
        color9.setFill()
        polygon3Path.fill()

        context.restoreGState()


        //// Polygon 4 Drawing
        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 75, y: 50))
        polygon4Path.addLine(to: CGPoint(x: 100, y: 100))
        polygon4Path.addLine(to: CGPoint(x: 50, y: 100))
        polygon4Path.addLine(to: CGPoint(x: 75, y: 50))
        polygon4Path.close()
        color9.setFill()
        polygon4Path.fill()




        //// Bezier Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 75, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 75, y: 0), controlPoint2: CGPoint(x: 100, y: 50))
        bezierPath.addLine(to: CGPoint(x: 75, y: 100))
        bezierPath.addLine(to: CGPoint(x: 50, y: 50))
        bezierPath.addLine(to: CGPoint(x: 75, y: 0))
        bezierPath.addLine(to: CGPoint(x: 75, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 50), controlPoint1: CGPoint(x: 25, y: 0), controlPoint2: CGPoint(x: 50, y: 50))
        bezierPath.addLine(to: CGPoint(x: 25, y: 100))
        bezierPath.addLine(to: CGPoint(x: 0, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 11.06, y: 27.88), controlPoint1: CGPoint(x: 0, y: 50), controlPoint2: CGPoint(x: 5.33, y: 39.35))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 0), controlPoint1: CGPoint(x: 17.75, y: 14.5), controlPoint2: CGPoint(x: 25, y: 0))
        bezierPath.addLine(to: CGPoint(x: 25, y: 0))
        bezierPath.close()
        UIColor.white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNarrowCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 85.99, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 25), controlPoint1: CGPoint(x: 86, y: 0), controlPoint2: CGPoint(x: 86, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 81), controlPoint1: CGPoint(x: 54, y: 34), controlPoint2: CGPoint(x: 54, y: 72))
        bezier2Path.addCurve(to: CGPoint(x: 86, y: 100), controlPoint1: CGPoint(x: 86, y: 90), controlPoint2: CGPoint(x: 86, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 86, y: 0), controlPoint1: CGPoint(x: 86, y: 73.96), controlPoint2: CGPoint(x: 86, y: 27.17))
        bezier2Path.addLine(to: CGPoint(x: 85.99, y: 0))
        bezier2Path.close()
        wallDark.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 89.99, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 73.43, y: 25), controlPoint1: CGPoint(x: 90, y: 0), controlPoint2: CGPoint(x: 90, y: 16))
        bezier3Path.addCurve(to: CGPoint(x: 73.43, y: 81), controlPoint1: CGPoint(x: 56.86, y: 34), controlPoint2: CGPoint(x: 56.86, y: 72))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 100), controlPoint1: CGPoint(x: 90, y: 90), controlPoint2: CGPoint(x: 90, y: 100))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 0), controlPoint1: CGPoint(x: 90, y: 73.96), controlPoint2: CGPoint(x: 90, y: 27.17))
        bezier3Path.addLine(to: CGPoint(x: 89.99, y: 0))
        bezier3Path.close()
        wallMedium.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 93.99, y: 0))
        bezier4Path.addCurve(to: CGPoint(x: 76.29, y: 25), controlPoint1: CGPoint(x: 94, y: 0), controlPoint2: CGPoint(x: 94, y: 16))
        bezier4Path.addCurve(to: CGPoint(x: 76.29, y: 81), controlPoint1: CGPoint(x: 58.57, y: 34), controlPoint2: CGPoint(x: 58.57, y: 72))
        bezier4Path.addCurve(to: CGPoint(x: 94, y: 100), controlPoint1: CGPoint(x: 94, y: 90), controlPoint2: CGPoint(x: 94, y: 100))
        bezier4Path.addCurve(to: CGPoint(x: 94, y: 0), controlPoint1: CGPoint(x: 94, y: 73.96), controlPoint2: CGPoint(x: 94, y: 27.17))
        bezier4Path.addLine(to: CGPoint(x: 93.99, y: 0))
        bezier4Path.close()
        wallLight.setFill()
        bezier4Path.fill()




        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.01, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 25), controlPoint1: CGPoint(x: 14, y: 0), controlPoint2: CGPoint(x: 14, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 81), controlPoint1: CGPoint(x: 46, y: 34), controlPoint2: CGPoint(x: 46, y: 72))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 100), controlPoint1: CGPoint(x: 14, y: 90), controlPoint2: CGPoint(x: 14, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 14, y: 73.96), controlPoint2: CGPoint(x: 14, y: 27.17))
        bezierPath.addLine(to: CGPoint(x: 14.01, y: 0))
        bezierPath.close()
        wallDark.setFill()
        bezierPath.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 10.01, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 26.57, y: 25), controlPoint1: CGPoint(x: 10, y: 0), controlPoint2: CGPoint(x: 10, y: 16))
        bezier5Path.addCurve(to: CGPoint(x: 26.57, y: 81), controlPoint1: CGPoint(x: 43.14, y: 34), controlPoint2: CGPoint(x: 43.14, y: 72))
        bezier5Path.addCurve(to: CGPoint(x: 10, y: 100), controlPoint1: CGPoint(x: 10, y: 90), controlPoint2: CGPoint(x: 10, y: 100))
        bezier5Path.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 10, y: 73.96), controlPoint2: CGPoint(x: 10, y: 27.17))
        bezier5Path.addLine(to: CGPoint(x: 10.01, y: 0))
        bezier5Path.close()
        wallMedium.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 6.01, y: 0))
        bezier6Path.addCurve(to: CGPoint(x: 23.71, y: 25), controlPoint1: CGPoint(x: 6, y: 0), controlPoint2: CGPoint(x: 6, y: 16))
        bezier6Path.addCurve(to: CGPoint(x: 23.71, y: 81), controlPoint1: CGPoint(x: 41.43, y: 34), controlPoint2: CGPoint(x: 41.43, y: 72))
        bezier6Path.addCurve(to: CGPoint(x: 6, y: 100), controlPoint1: CGPoint(x: 6, y: 90), controlPoint2: CGPoint(x: 6, y: 100))
        bezier6Path.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 6, y: 73.96), controlPoint2: CGPoint(x: 6, y: 27.17))
        bezier6Path.addLine(to: CGPoint(x: 6.01, y: 0))
        bezier6Path.close()
        wallLight.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawNarrowCurvedOneSide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 85.99, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 25), controlPoint1: CGPoint(x: 86, y: 0), controlPoint2: CGPoint(x: 86, y: 16))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 81), controlPoint1: CGPoint(x: 54, y: 34), controlPoint2: CGPoint(x: 54, y: 72))
        bezier2Path.addCurve(to: CGPoint(x: 86, y: 100), controlPoint1: CGPoint(x: 86, y: 90), controlPoint2: CGPoint(x: 86, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 86, y: 0), controlPoint1: CGPoint(x: 86, y: 73.96), controlPoint2: CGPoint(x: 86, y: 27.17))
        bezier2Path.addLine(to: CGPoint(x: 85.99, y: 0))
        bezier2Path.close()
        wallDark.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 89.99, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 73.43, y: 25), controlPoint1: CGPoint(x: 90, y: 0), controlPoint2: CGPoint(x: 90, y: 16))
        bezier3Path.addCurve(to: CGPoint(x: 73.43, y: 81), controlPoint1: CGPoint(x: 56.86, y: 34), controlPoint2: CGPoint(x: 56.86, y: 72))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 100), controlPoint1: CGPoint(x: 90, y: 90), controlPoint2: CGPoint(x: 90, y: 100))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 0), controlPoint1: CGPoint(x: 90, y: 73.96), controlPoint2: CGPoint(x: 90, y: 27.17))
        bezier3Path.addLine(to: CGPoint(x: 89.99, y: 0))
        bezier3Path.close()
        wallMedium.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 93.99, y: 0))
        bezier4Path.addCurve(to: CGPoint(x: 76.29, y: 25), controlPoint1: CGPoint(x: 94, y: 0), controlPoint2: CGPoint(x: 94, y: 16))
        bezier4Path.addCurve(to: CGPoint(x: 76.29, y: 81), controlPoint1: CGPoint(x: 58.57, y: 34), controlPoint2: CGPoint(x: 58.57, y: 72))
        bezier4Path.addCurve(to: CGPoint(x: 94, y: 100), controlPoint1: CGPoint(x: 94, y: 90), controlPoint2: CGPoint(x: 94, y: 100))
        bezier4Path.addCurve(to: CGPoint(x: 94, y: 0), controlPoint1: CGPoint(x: 94, y: 73.96), controlPoint2: CGPoint(x: 94, y: 27.17))
        bezier4Path.addLine(to: CGPoint(x: 93.99, y: 0))
        bezier4Path.close()
        wallLight.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawNarrowSplit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 85.99, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 15.5), controlPoint1: CGPoint(x: 86, y: 0), controlPoint2: CGPoint(x: 86, y: 9.92))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 50.22), controlPoint1: CGPoint(x: 54, y: 21.08), controlPoint2: CGPoint(x: 54, y: 44.64))
        bezier2Path.addCurve(to: CGPoint(x: 86, y: 62), controlPoint1: CGPoint(x: 86, y: 55.8), controlPoint2: CGPoint(x: 86, y: 62))
        bezier2Path.addCurve(to: CGPoint(x: 86, y: 0), controlPoint1: CGPoint(x: 86, y: 45.85), controlPoint2: CGPoint(x: 86, y: 16.84))
        bezier2Path.addLine(to: CGPoint(x: 85.99, y: 0))
        bezier2Path.close()
        wallDark.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 89.99, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 73.43, y: 15.5), controlPoint1: CGPoint(x: 90, y: 0), controlPoint2: CGPoint(x: 90, y: 9.92))
        bezier3Path.addCurve(to: CGPoint(x: 73.43, y: 50.22), controlPoint1: CGPoint(x: 56.86, y: 21.08), controlPoint2: CGPoint(x: 56.86, y: 44.64))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 62), controlPoint1: CGPoint(x: 90, y: 55.8), controlPoint2: CGPoint(x: 90, y: 62))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 0), controlPoint1: CGPoint(x: 90, y: 45.85), controlPoint2: CGPoint(x: 90, y: 16.84))
        bezier3Path.addLine(to: CGPoint(x: 89.99, y: 0))
        bezier3Path.close()
        wallMedium.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 93.99, y: 0))
        bezier4Path.addCurve(to: CGPoint(x: 76.29, y: 15.5), controlPoint1: CGPoint(x: 94, y: 0), controlPoint2: CGPoint(x: 94, y: 9.92))
        bezier4Path.addCurve(to: CGPoint(x: 76.29, y: 50.22), controlPoint1: CGPoint(x: 58.57, y: 21.08), controlPoint2: CGPoint(x: 58.57, y: 44.64))
        bezier4Path.addCurve(to: CGPoint(x: 94, y: 62), controlPoint1: CGPoint(x: 94, y: 55.8), controlPoint2: CGPoint(x: 94, y: 62))
        bezier4Path.addCurve(to: CGPoint(x: 94, y: 0), controlPoint1: CGPoint(x: 94, y: 45.85), controlPoint2: CGPoint(x: 94, y: 16.84))
        bezier4Path.addLine(to: CGPoint(x: 93.99, y: 0))
        bezier4Path.close()
        wallLight.setFill()
        bezier4Path.fill()




        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.01, y: 37.5))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 53), controlPoint1: CGPoint(x: 13, y: 37.5), controlPoint2: CGPoint(x: 13, y: 47.42))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 87.72), controlPoint1: CGPoint(x: 45, y: 58.58), controlPoint2: CGPoint(x: 45, y: 82.14))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 99.5), controlPoint1: CGPoint(x: 13, y: 93.3), controlPoint2: CGPoint(x: 13, y: 99.5))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 37.5), controlPoint1: CGPoint(x: 13, y: 83.35), controlPoint2: CGPoint(x: 13, y: 54.34))
        bezierPath.addLine(to: CGPoint(x: 13.01, y: 37.5))
        bezierPath.close()
        wallDark.setFill()
        bezierPath.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 9.01, y: 37.5))
        bezier5Path.addCurve(to: CGPoint(x: 25.57, y: 53), controlPoint1: CGPoint(x: 9, y: 37.5), controlPoint2: CGPoint(x: 9, y: 47.42))
        bezier5Path.addCurve(to: CGPoint(x: 25.57, y: 87.72), controlPoint1: CGPoint(x: 42.14, y: 58.58), controlPoint2: CGPoint(x: 42.14, y: 82.14))
        bezier5Path.addCurve(to: CGPoint(x: 9, y: 99.5), controlPoint1: CGPoint(x: 9, y: 93.3), controlPoint2: CGPoint(x: 9, y: 99.5))
        bezier5Path.addCurve(to: CGPoint(x: 9, y: 37.5), controlPoint1: CGPoint(x: 9, y: 83.35), controlPoint2: CGPoint(x: 9, y: 54.34))
        bezier5Path.addLine(to: CGPoint(x: 9.01, y: 37.5))
        bezier5Path.close()
        wallMedium.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 5.01, y: 37.5))
        bezier6Path.addCurve(to: CGPoint(x: 22.71, y: 53), controlPoint1: CGPoint(x: 5, y: 37.5), controlPoint2: CGPoint(x: 5, y: 47.42))
        bezier6Path.addCurve(to: CGPoint(x: 22.71, y: 87.72), controlPoint1: CGPoint(x: 40.43, y: 58.58), controlPoint2: CGPoint(x: 40.43, y: 82.14))
        bezier6Path.addCurve(to: CGPoint(x: 5, y: 99.5), controlPoint1: CGPoint(x: 5, y: 93.3), controlPoint2: CGPoint(x: 5, y: 99.5))
        bezier6Path.addCurve(to: CGPoint(x: 5, y: 37.5), controlPoint1: CGPoint(x: 5, y: 83.35), controlPoint2: CGPoint(x: 5, y: 54.34))
        bezier6Path.addLine(to: CGPoint(x: 5.01, y: 37.5))
        bezier6Path.close()
        wallLight.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberNarrowCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurved(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberNarrowSplit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowSplit(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberNarrowOneSide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let timberWalls = UIColor(red: 0.679, green: 0.422, blue: 0.107, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurvedOneSide(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostNarrowOneSide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurvedOneSide(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostNarrowCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurved(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostNarrowSplit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let frostWalls = UIColor(red: 0.159, green: 0.901, blue: 1.000, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowSplit(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeNarrowOneSide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurvedOneSide(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeNarrowCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurved(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeNarrowSplit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowSplit(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaNarrowCurved(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurved(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaNarrowOneSide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowCurvedOneSide(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNebulaNarrowSplit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let nebulaWalls = UIColor(red: 0.508, green: 0.385, blue: 0.923, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawNarrowSplit(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: nebulaWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCorner2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawCornerWall(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: wallLight)
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13.5, y: 107.5))
        bezier3Path.addCurve(to: CGPoint(x: 107.5, y: 13.5), controlPoint1: CGPoint(x: 13.5, y: 14.72), controlPoint2: CGPoint(x: 15.5, y: 13.5))
        bezier3Path.addCurve(to: CGPoint(x: 13.5, y: 13.5), controlPoint1: CGPoint(x: 86.5, y: 13), controlPoint2: CGPoint(x: 29, y: 13.5))
        bezier3Path.addCurve(to: CGPoint(x: 13.5, y: 107.5), controlPoint1: CGPoint(x: 13.5, y: 27.47), controlPoint2: CGPoint(x: 13.5, y: 92.54))
        bezier3Path.close()
        wallDark.setFill()
        bezier3Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10, y: 104))
        bezier2Path.addCurve(to: CGPoint(x: 104, y: 10), controlPoint1: CGPoint(x: 10, y: 11.22), controlPoint2: CGPoint(x: 12, y: 10))
        bezier2Path.addCurve(to: CGPoint(x: 10, y: 10), controlPoint1: CGPoint(x: 83, y: 9.5), controlPoint2: CGPoint(x: 25.5, y: 10))
        bezier2Path.addCurve(to: CGPoint(x: 10, y: 104), controlPoint1: CGPoint(x: 10, y: 23.97), controlPoint2: CGPoint(x: 10, y: 89.04))
        bezier2Path.close()
        wallMedium.setFill()
        bezier2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 6), controlPoint1: CGPoint(x: 6, y: 7.22), controlPoint2: CGPoint(x: 8, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 6), controlPoint1: CGPoint(x: 79, y: 5.5), controlPoint2: CGPoint(x: 21.5, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 100), controlPoint1: CGPoint(x: 6, y: 19.97), controlPoint2: CGPoint(x: 6, y: 85.04))
        bezierPath.close()
        wallLight.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawJawen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 215, height: 215), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 215, height: 215), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 215, y: resizedFrame.height / 215)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 215, height: 215)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawFrostPattern(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawGolfBall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit, ballColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 200, height: 200))
        ballColor.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawBallMatt(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 100, resizedFrame.height / 100)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        var wallLightHueComponent: CGFloat = 1
        var wallLightSaturationComponent: CGFloat = 1
        var wallLightBrightnessComponent: CGFloat = 1
        wallLight.getHue(&wallLightHueComponent, saturation: &wallLightSaturationComponent, brightness: &wallLightBrightnessComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))
        let wallExtraDark = UIColor(hue: wallLightHueComponent, saturation: wallLightSaturationComponent, brightness: 0.3, alpha: wallLight.cgColor.alpha)

        //// Shadow Declarations
        let wallShadow = NSShadow()
        wallShadow.shadowColor = UIColor.black
        wallShadow.shadowOffset = CGSize(width: 0, height: 0)
        wallShadow.shadowBlurRadius = 4

        //// Group 2
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 25, y: 25, width: 50, height: 50), cornerRadius: 6)
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallExtraDark.setFill()
        rectanglePath.fill()
        context.restoreGState()



        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 31, y: 31, width: 38, height: 38), cornerRadius: 6)
        wallDark.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 38, y: 37, width: 25, height: 25), cornerRadius: 6)
        wallMedium.setFill()
        rectangle3Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawHoleFlag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 113, height: 200), resizing: ResizingBehavior = .aspectFit, holeNumber: String = "9") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 113, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 113, y: resizedFrame.height / 200)


        //// Group
        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 5.9, y: 74.98))
        bezier6Path.addLine(to: CGPoint(x: 0, y: 75))
        bezier6Path.addLine(to: CGPoint(x: 0, y: 70.88))
        bezier6Path.addLine(to: CGPoint(x: 0, y: 70.4))
        bezier6Path.addCurve(to: CGPoint(x: 0, y: -0), controlPoint1: CGPoint(x: 0, y: 32.22), controlPoint2: CGPoint(x: 0, y: 10.79))
        bezier6Path.addLine(to: CGPoint(x: 6, y: 1.89))
        bezier6Path.addCurve(to: CGPoint(x: 5.9, y: 75), controlPoint1: CGPoint(x: 6.23, y: 24.8), controlPoint2: CGPoint(x: 5.9, y: 75))
        bezier6Path.addLine(to: CGPoint(x: 5.9, y: 74.98))
        bezier6Path.close()
        UIColor.white.setFill()
        bezier6Path.fill()


        //// Group 6
        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 5.9, y: 46.99))
        bezier14Path.addLine(to: CGPoint(x: 0, y: 47))
        bezier14Path.addLine(to: CGPoint(x: 0, y: 45.57))
        bezier14Path.addLine(to: CGPoint(x: 0, y: 45.4))
        bezier14Path.addCurve(to: CGPoint(x: 0, y: 21), controlPoint1: CGPoint(x: 0, y: 32.17), controlPoint2: CGPoint(x: 0, y: 24.74))
        bezier14Path.addLine(to: CGPoint(x: 6, y: 21.66))
        bezier14Path.addCurve(to: CGPoint(x: 5.9, y: 47), controlPoint1: CGPoint(x: 6.23, y: 29.6), controlPoint2: CGPoint(x: 5.9, y: 47))
        bezier14Path.addLine(to: CGPoint(x: 5.9, y: 46.99))
        bezier14Path.close()
        UIColor.red.setFill()
        bezier14Path.fill()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 5.9, y: 68.99))
        bezier15Path.addLine(to: CGPoint(x: 0, y: 69))
        bezier15Path.addLine(to: CGPoint(x: 0, y: 67.63))
        bezier15Path.addLine(to: CGPoint(x: 0, y: 67.47))
        bezier15Path.addCurve(to: CGPoint(x: 0, y: 44), controlPoint1: CGPoint(x: 0, y: 54.74), controlPoint2: CGPoint(x: 0, y: 47.6))
        bezier15Path.addLine(to: CGPoint(x: 6, y: 44.63))
        bezier15Path.addCurve(to: CGPoint(x: 5.9, y: 69), controlPoint1: CGPoint(x: 6.23, y: 52.27), controlPoint2: CGPoint(x: 5.9, y: 69))
        bezier15Path.addLine(to: CGPoint(x: 5.9, y: 68.99))
        bezier15Path.close()
        UIColor.white.setFill()
        bezier15Path.fill()




        //// Group 2
        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 6, y: 97)
        context.scaleBy(x: 1, y: -1)

        context.saveGState()
        context.setAlpha(0.8)

        let rectangle2Path = UIBezierPath()
        rectangle2Path.move(to: CGPoint(x: 0, y: 93))
        rectangle2Path.addCurve(to: CGPoint(x: 85, y: 55), controlPoint1: CGPoint(x: 0, y: 74), controlPoint2: CGPoint(x: 85, y: 72))
        rectangle2Path.addCurve(to: CGPoint(x: 85, y: -0), controlPoint1: CGPoint(x: 85, y: 38), controlPoint2: CGPoint(x: 85, y: -8))
        rectangle2Path.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 85, y: 8), controlPoint2: CGPoint(x: 0, y: 33))
        rectangle2Path.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 0, y: -1), controlPoint2: CGPoint(x: 0, y: 112))
        rectangle2Path.close()
        UIColor.white.setFill()
        rectangle2Path.fill()

        context.restoreGState()

        context.restoreGState()


        //// Bezier 4 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 6, y: 4))
        bezier4Path.addCurve(to: CGPoint(x: 6, y: 4.13), controlPoint1: CGPoint(x: 6, y: 4), controlPoint2: CGPoint(x: 6, y: 4.13))
        bezier4Path.addCurve(to: CGPoint(x: 91, y: 41.95), controlPoint1: CGPoint(x: 6.54, y: 22.97), controlPoint2: CGPoint(x: 91, y: 25.01))
        bezier4Path.addCurve(to: CGPoint(x: 91, y: 44.95), controlPoint1: CGPoint(x: 91, y: 42.87), controlPoint2: CGPoint(x: 91, y: 43.88))
        bezier4Path.addCurve(to: CGPoint(x: 6, y: 7.13), controlPoint1: CGPoint(x: 91, y: 28.01), controlPoint2: CGPoint(x: 6.54, y: 25.97))
        bezier4Path.addLine(to: CGPoint(x: 6, y: 7))
        bezier4Path.addCurve(to: CGPoint(x: 6, y: 4.13), controlPoint1: CGPoint(x: 6, y: 5.88), controlPoint2: CGPoint(x: 6, y: 4.92))
        bezier4Path.addLine(to: CGPoint(x: 6, y: 4))
        bezier4Path.addLine(to: CGPoint(x: 6, y: 4))
        bezier4Path.close()
        UIColor.lightGray.setFill()
        bezier4Path.fill()

        context.restoreGState()




        //// Group 3
        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 5.9, y: 94.99))
        bezier8Path.addLine(to: CGPoint(x: 0, y: 95))
        bezier8Path.addLine(to: CGPoint(x: 0, y: 93.57))
        bezier8Path.addLine(to: CGPoint(x: 0, y: 93.4))
        bezier8Path.addCurve(to: CGPoint(x: 0, y: 69), controlPoint1: CGPoint(x: 0, y: 80.17), controlPoint2: CGPoint(x: 0, y: 72.74))
        bezier8Path.addLine(to: CGPoint(x: 6, y: 69.66))
        bezier8Path.addCurve(to: CGPoint(x: 5.9, y: 95), controlPoint1: CGPoint(x: 6.23, y: 77.6), controlPoint2: CGPoint(x: 5.9, y: 95))
        bezier8Path.addLine(to: CGPoint(x: 5.9, y: 94.99))
        bezier8Path.close()
        UIColor.red.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 5.9, y: 116.99))
        bezier9Path.addLine(to: CGPoint(x: 0, y: 117))
        bezier9Path.addLine(to: CGPoint(x: 0, y: 115.63))
        bezier9Path.addLine(to: CGPoint(x: 0, y: 115.47))
        bezier9Path.addCurve(to: CGPoint(x: 0, y: 92), controlPoint1: CGPoint(x: 0, y: 102.74), controlPoint2: CGPoint(x: 0, y: 95.6))
        bezier9Path.addLine(to: CGPoint(x: 6, y: 92.63))
        bezier9Path.addCurve(to: CGPoint(x: 5.9, y: 117), controlPoint1: CGPoint(x: 6.23, y: 100.27), controlPoint2: CGPoint(x: 5.9, y: 117))
        bezier9Path.addLine(to: CGPoint(x: 5.9, y: 116.99))
        bezier9Path.close()
        UIColor.white.setFill()
        bezier9Path.fill()




        //// Group 4
        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 5.9, y: 141.99))
        bezier10Path.addLine(to: CGPoint(x: 0, y: 142))
        bezier10Path.addLine(to: CGPoint(x: 0, y: 140.57))
        bezier10Path.addLine(to: CGPoint(x: 0, y: 140.4))
        bezier10Path.addCurve(to: CGPoint(x: 0, y: 116), controlPoint1: CGPoint(x: 0, y: 127.17), controlPoint2: CGPoint(x: 0, y: 119.74))
        bezier10Path.addLine(to: CGPoint(x: 6, y: 116.66))
        bezier10Path.addCurve(to: CGPoint(x: 5.9, y: 142), controlPoint1: CGPoint(x: 6.23, y: 124.6), controlPoint2: CGPoint(x: 5.9, y: 142))
        bezier10Path.addLine(to: CGPoint(x: 5.9, y: 141.99))
        bezier10Path.close()
        UIColor.red.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 5.9, y: 163.99))
        bezier11Path.addLine(to: CGPoint(x: 0, y: 164))
        bezier11Path.addLine(to: CGPoint(x: 0, y: 162.63))
        bezier11Path.addLine(to: CGPoint(x: 0, y: 162.47))
        bezier11Path.addCurve(to: CGPoint(x: 0, y: 139), controlPoint1: CGPoint(x: 0, y: 149.74), controlPoint2: CGPoint(x: 0, y: 142.6))
        bezier11Path.addLine(to: CGPoint(x: 6, y: 139.63))
        bezier11Path.addCurve(to: CGPoint(x: 5.9, y: 164), controlPoint1: CGPoint(x: 6.23, y: 147.27), controlPoint2: CGPoint(x: 5.9, y: 164))
        bezier11Path.addLine(to: CGPoint(x: 5.9, y: 163.99))
        bezier11Path.close()
        UIColor.white.setFill()
        bezier11Path.fill()




        //// Group 5
        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 5.9, y: 188.99))
        bezier12Path.addLine(to: CGPoint(x: 0, y: 189))
        bezier12Path.addLine(to: CGPoint(x: 0, y: 187.57))
        bezier12Path.addLine(to: CGPoint(x: 0, y: 187.4))
        bezier12Path.addCurve(to: CGPoint(x: 0, y: 163), controlPoint1: CGPoint(x: 0, y: 174.17), controlPoint2: CGPoint(x: 0, y: 166.74))
        bezier12Path.addLine(to: CGPoint(x: 6, y: 163.66))
        bezier12Path.addCurve(to: CGPoint(x: 5.9, y: 189), controlPoint1: CGPoint(x: 6.23, y: 171.6), controlPoint2: CGPoint(x: 5.9, y: 189))
        bezier12Path.addLine(to: CGPoint(x: 5.9, y: 188.99))
        bezier12Path.close()
        UIColor.red.setFill()
        bezier12Path.fill()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 5.9, y: 210.99))
        bezier13Path.addLine(to: CGPoint(x: 0, y: 211))
        bezier13Path.addLine(to: CGPoint(x: 0, y: 209.63))
        bezier13Path.addLine(to: CGPoint(x: 0, y: 209.47))
        bezier13Path.addCurve(to: CGPoint(x: 0, y: 186), controlPoint1: CGPoint(x: 0, y: 196.74), controlPoint2: CGPoint(x: 0, y: 189.6))
        bezier13Path.addLine(to: CGPoint(x: 6, y: 186.63))
        bezier13Path.addCurve(to: CGPoint(x: 5.9, y: 211), controlPoint1: CGPoint(x: 6.23, y: 194.27), controlPoint2: CGPoint(x: 5.9, y: 211))
        bezier13Path.addLine(to: CGPoint(x: 5.9, y: 210.99))
        bezier13Path.close()
        UIColor.white.setFill()
        bezier13Path.fill()






        //// Text Drawing
        context.saveGState()
        context.translateBy(x: 7.09, y: 21.51)
        context.rotate(by: 7 * CGFloat.pi/180)
        context.scaleBy(x: 0.7, y: 1)

        context.saveGState()
        context.setAlpha(0.7)

        let textRect = CGRect(x: 0, y: 0, width: 122.49, height: 50)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Bebas", size: 39)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = holeNumber.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        holeNumber.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBaseBG(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 700, resizedFrame.height / 1200)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        var wallLightHueComponent: CGFloat = 1
        var wallLightSaturationComponent: CGFloat = 1
        var wallLightBrightnessComponent: CGFloat = 1
        wallLight.getHue(&wallLightHueComponent, saturation: &wallLightSaturationComponent, brightness: &wallLightBrightnessComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))
        let wallExtraDark = UIColor(hue: wallLightHueComponent, saturation: wallLightSaturationComponent, brightness: 0.3, alpha: wallLight.cgColor.alpha)

        //// Shadow Declarations
        let wallShadow = NSShadow()
        wallShadow.shadowColor = UIColor.black
        wallShadow.shadowOffset = CGSize(width: 0, height: 0)
        wallShadow.shadowBlurRadius = 4

        //// Group
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 276.3, y: 160.38))
        bezier4Path.addCurve(to: CGPoint(x: 64, y: 417.47), controlPoint1: CGPoint(x: 180.42, y: 191.49), controlPoint2: CGPoint(x: 64, y: 153.83))
        bezier4Path.addCurve(to: CGPoint(x: 190.7, y: 687.65), controlPoint1: CGPoint(x: 64, y: 681.1), controlPoint2: CGPoint(x: 190.7, y: 548.47))
        bezier4Path.addCurve(to: CGPoint(x: 64, y: 979.13), controlPoint1: CGPoint(x: 190.7, y: 826.84), controlPoint2: CGPoint(x: 64, y: 861.23))
        bezier4Path.addCurve(to: CGPoint(x: 553.67, y: 1144.52), controlPoint1: CGPoint(x: 64, y: 1097.03), controlPoint2: CGPoint(x: 476.62, y: 1218.21))
        bezier4Path.addCurve(to: CGPoint(x: 587.91, y: 386.35), controlPoint1: CGPoint(x: 630.71, y: 1070.83), controlPoint2: CGPoint(x: 647.83, y: 496.07))
        bezier4Path.addCurve(to: CGPoint(x: 587.91, y: 13), controlPoint1: CGPoint(x: 527.99, y: 276.64), controlPoint2: CGPoint(x: 695.77, y: 13))
        bezier4Path.addCurve(to: CGPoint(x: 276.3, y: 160.38), controlPoint1: CGPoint(x: 480.05, y: 13), controlPoint2: CGPoint(x: 372.18, y: 129.26))
        bezier4Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallLight.setFill()
        bezier4Path.fill()
        context.restoreGState()



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 299.23, y: 283.79))
        bezierPath.addCurve(to: CGPoint(x: 149.92, y: 472.92), controlPoint1: CGPoint(x: 231.8, y: 306.68), controlPoint2: CGPoint(x: 149.92, y: 278.98))
        bezierPath.addCurve(to: CGPoint(x: 239.02, y: 671.67), controlPoint1: CGPoint(x: 149.92, y: 666.85), controlPoint2: CGPoint(x: 239.02, y: 569.28))
        bezierPath.addCurve(to: CGPoint(x: 149.92, y: 886.09), controlPoint1: CGPoint(x: 239.02, y: 774.06), controlPoint2: CGPoint(x: 149.92, y: 799.36))
        bezierPath.addCurve(to: CGPoint(x: 494.28, y: 1007.75), controlPoint1: CGPoint(x: 149.92, y: 972.82), controlPoint2: CGPoint(x: 440.1, y: 1061.96))
        bezierPath.addCurve(to: CGPoint(x: 518.36, y: 450.03), controlPoint1: CGPoint(x: 548.46, y: 953.55), controlPoint2: CGPoint(x: 560.5, y: 530.74))
        bezierPath.addCurve(to: CGPoint(x: 518.36, y: 175.38), controlPoint1: CGPoint(x: 476.22, y: 369.32), controlPoint2: CGPoint(x: 594.21, y: 175.38))
        bezierPath.addCurve(to: CGPoint(x: 299.23, y: 283.79), controlPoint1: CGPoint(x: 442.51, y: 175.38), controlPoint2: CGPoint(x: 366.65, y: 260.91))
        bezierPath.close()
        wallMedium.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context.saveGState()
        context.clip(to: bezierPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((wallShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezierOpaqueShadow = (wallShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: bezierOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 319.58, y: 330.48))
        bezier2Path.addCurve(to: CGPoint(x: 200.66, y: 491.76), controlPoint1: CGPoint(x: 265.88, y: 349.99), controlPoint2: CGPoint(x: 200.66, y: 326.37))
        bezier2Path.addCurve(to: CGPoint(x: 271.63, y: 661.26), controlPoint1: CGPoint(x: 200.66, y: 657.15), controlPoint2: CGPoint(x: 271.63, y: 573.94))
        bezier2Path.addCurve(to: CGPoint(x: 200.66, y: 844.12), controlPoint1: CGPoint(x: 271.63, y: 748.58), controlPoint2: CGPoint(x: 200.66, y: 770.16))
        bezier2Path.addCurve(to: CGPoint(x: 474.95, y: 947.88), controlPoint1: CGPoint(x: 200.66, y: 918.09), controlPoint2: CGPoint(x: 431.8, y: 994.11))
        bezier2Path.addCurve(to: CGPoint(x: 494.14, y: 472.24), controlPoint1: CGPoint(x: 518.11, y: 901.65), controlPoint2: CGPoint(x: 527.7, y: 541.07))
        bezier2Path.addCurve(to: CGPoint(x: 494.14, y: 238.02), controlPoint1: CGPoint(x: 460.57, y: 403.41), controlPoint2: CGPoint(x: 554.56, y: 238.02))
        bezier2Path.addCurve(to: CGPoint(x: 319.58, y: 330.48), controlPoint1: CGPoint(x: 433.71, y: 238.02), controlPoint2: CGPoint(x: 373.29, y: 310.96))
        bezier2Path.close()
        wallDark.setFill()
        bezier2Path.fill()

        ////// Bezier 2 Inner Shadow
        context.saveGState()
        context.clip(to: bezier2Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((wallShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier2OpaqueShadow = (wallShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: bezier2OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier2OpaqueShadow.setFill()
        bezier2Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 329.25, y: 398.51))
        bezier3Path.addCurve(to: CGPoint(x: 249.05, y: 525.84), controlPoint1: CGPoint(x: 293.03, y: 413.92), controlPoint2: CGPoint(x: 249.05, y: 395.26))
        bezier3Path.addCurve(to: CGPoint(x: 296.91, y: 659.67), controlPoint1: CGPoint(x: 249.05, y: 656.43), controlPoint2: CGPoint(x: 296.91, y: 590.73))
        bezier3Path.addCurve(to: CGPoint(x: 249.05, y: 804.04), controlPoint1: CGPoint(x: 296.91, y: 728.61), controlPoint2: CGPoint(x: 249.05, y: 745.64))
        bezier3Path.addCurve(to: CGPoint(x: 434.02, y: 885.96), controlPoint1: CGPoint(x: 249.05, y: 862.44), controlPoint2: CGPoint(x: 404.92, y: 922.45))
        bezier3Path.addCurve(to: CGPoint(x: 446.95, y: 510.43), controlPoint1: CGPoint(x: 463.12, y: 849.46), controlPoint2: CGPoint(x: 469.59, y: 564.78))
        bezier3Path.addCurve(to: CGPoint(x: 446.95, y: 325.51), controlPoint1: CGPoint(x: 424.32, y: 456.09), controlPoint2: CGPoint(x: 487.7, y: 325.51))
        bezier3Path.addCurve(to: CGPoint(x: 329.25, y: 398.51), controlPoint1: CGPoint(x: 406.21, y: 325.51), controlPoint2: CGPoint(x: 365.47, y: 383.1))
        bezier3Path.close()
        wallExtraDark.setFill()
        bezier3Path.fill()

        ////// Bezier 3 Inner Shadow
        context.saveGState()
        context.clip(to: bezier3Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((wallShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier3OpaqueShadow = (wallShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: bezier3OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier3OpaqueShadow.setFill()
        bezier3Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawFrostBG(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)


        //// Color Declarations
        let frostTiles = UIColor(red: 0.286, green: 0.980, blue: 0.910, alpha: 1.000)
        let color12 = UIColor(red: 0.165, green: 0.661, blue: 0.823, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 700, height: 1200)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawBaseBG(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: frostTiles)
        context.restoreGState()


        //// Rectangle Drawing
        context.saveGState()
        context.setAlpha(0.6)
        context.setBlendMode(.multiply)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 700, height: 1200))
        color12.setFill()
        rectanglePath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTimberBG(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)


        //// Color Declarations
        let timberTiles = UIColor(red: 0.320, green: 0.800, blue: 0.373, alpha: 1.000)
        let color10 = UIColor(red: 0.610, green: 1.000, blue: 0.651, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 700, height: 1200))
        color10.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 700, height: 1200)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawBaseBG(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: timberTiles)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBlazeBG(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)
        let color11 = UIColor(red: 1.000, green: 0.894, blue: 0.722, alpha: 1.000)

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 700, height: 1200))
        color11.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 700, height: 1200)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawBaseBG(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: blazeWalls)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)


        //// Color Declarations
        let blazeTiles = UIColor(red: 0.989, green: 0.944, blue: 0.570, alpha: 1.000)
        let color22 = UIColor(red: 0.705, green: 0.212, blue: 0.212, alpha: 1.000)
        let color23 = UIColor(red: 0.742, green: 0.349, blue: 0.349, alpha: 1.000)

        //// Group 6
        //// Group
        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 352, y: 185.5))
        polygonPath.addLine(to: CGPoint(x: 509.18, y: 276.25))
        polygonPath.addLine(to: CGPoint(x: 509.18, y: 457.75))
        polygonPath.addLine(to: CGPoint(x: 352, y: 548.5))
        polygonPath.addLine(to: CGPoint(x: 194.82, y: 457.75))
        polygonPath.addLine(to: CGPoint(x: 194.82, y: 276.25))
        polygonPath.close()
        UIColor.gray.setFill()
        polygonPath.fill()


        //// Polygon 2 Drawing
        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 352, y: 233.5))
        polygon2Path.addLine(to: CGPoint(x: 467.61, y: 300.25))
        polygon2Path.addLine(to: CGPoint(x: 467.61, y: 433.75))
        polygon2Path.addLine(to: CGPoint(x: 352, y: 500.5))
        polygon2Path.addLine(to: CGPoint(x: 236.39, y: 433.75))
        polygon2Path.addLine(to: CGPoint(x: 236.39, y: 300.25))
        polygon2Path.close()
        UIColor.lightGray.setFill()
        polygon2Path.fill()


        //// Polygon 3 Drawing
        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 352, y: 289.5))
        polygon3Path.addLine(to: CGPoint(x: 419.12, y: 328.25))
        polygon3Path.addLine(to: CGPoint(x: 419.12, y: 405.75))
        polygon3Path.addLine(to: CGPoint(x: 352, y: 444.5))
        polygon3Path.addLine(to: CGPoint(x: 284.88, y: 405.75))
        polygon3Path.addLine(to: CGPoint(x: 284.88, y: 328.25))
        polygon3Path.close()
        UIColor.white.setFill()
        polygon3Path.fill()


        //// Polygon 4 Drawing
        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 352, y: 321.5))
        polygon4Path.addLine(to: CGPoint(x: 391.4, y: 344.25))
        polygon4Path.addLine(to: CGPoint(x: 391.4, y: 389.75))
        polygon4Path.addLine(to: CGPoint(x: 352, y: 412.5))
        polygon4Path.addLine(to: CGPoint(x: 312.6, y: 389.75))
        polygon4Path.addLine(to: CGPoint(x: 312.6, y: 344.25))
        polygon4Path.close()
        UIColor.darkGray.setFill()
        polygon4Path.fill()




        //// Group 2
        //// Polygon 5 Drawing
        let polygon5Path = UIBezierPath()
        polygon5Path.move(to: CGPoint(x: 508, y: -86.5))
        polygon5Path.addLine(to: CGPoint(x: 665.18, y: 4.25))
        polygon5Path.addLine(to: CGPoint(x: 665.18, y: 185.75))
        polygon5Path.addLine(to: CGPoint(x: 508, y: 276.5))
        polygon5Path.addLine(to: CGPoint(x: 350.82, y: 185.75))
        polygon5Path.addLine(to: CGPoint(x: 350.82, y: 4.25))
        polygon5Path.close()
        UIColor.gray.setFill()
        polygon5Path.fill()


        //// Polygon 6 Drawing
        let polygon6Path = UIBezierPath()
        polygon6Path.move(to: CGPoint(x: 508, y: -38.5))
        polygon6Path.addLine(to: CGPoint(x: 623.61, y: 28.25))
        polygon6Path.addLine(to: CGPoint(x: 623.61, y: 161.75))
        polygon6Path.addLine(to: CGPoint(x: 508, y: 228.5))
        polygon6Path.addLine(to: CGPoint(x: 392.39, y: 161.75))
        polygon6Path.addLine(to: CGPoint(x: 392.39, y: 28.25))
        polygon6Path.close()
        UIColor.lightGray.setFill()
        polygon6Path.fill()


        //// Polygon 7 Drawing
        let polygon7Path = UIBezierPath()
        polygon7Path.move(to: CGPoint(x: 508, y: 17.5))
        polygon7Path.addLine(to: CGPoint(x: 575.12, y: 56.25))
        polygon7Path.addLine(to: CGPoint(x: 575.12, y: 133.75))
        polygon7Path.addLine(to: CGPoint(x: 508, y: 172.5))
        polygon7Path.addLine(to: CGPoint(x: 440.88, y: 133.75))
        polygon7Path.addLine(to: CGPoint(x: 440.88, y: 56.25))
        polygon7Path.close()
        UIColor.white.setFill()
        polygon7Path.fill()


        //// Polygon 8 Drawing
        let polygon8Path = UIBezierPath()
        polygon8Path.move(to: CGPoint(x: 508, y: 49.5))
        polygon8Path.addLine(to: CGPoint(x: 547.4, y: 72.25))
        polygon8Path.addLine(to: CGPoint(x: 547.4, y: 117.75))
        polygon8Path.addLine(to: CGPoint(x: 508, y: 140.5))
        polygon8Path.addLine(to: CGPoint(x: 468.6, y: 117.75))
        polygon8Path.addLine(to: CGPoint(x: 468.6, y: 72.25))
        polygon8Path.close()
        UIColor.darkGray.setFill()
        polygon8Path.fill()




        //// Group 3
        //// Polygon 9 Drawing
        let polygon9Path = UIBezierPath()
        polygon9Path.move(to: CGPoint(x: 666, y: 183.5))
        polygon9Path.addLine(to: CGPoint(x: 823.18, y: 274.25))
        polygon9Path.addLine(to: CGPoint(x: 823.18, y: 455.75))
        polygon9Path.addLine(to: CGPoint(x: 666, y: 546.5))
        polygon9Path.addLine(to: CGPoint(x: 508.82, y: 455.75))
        polygon9Path.addLine(to: CGPoint(x: 508.82, y: 274.25))
        polygon9Path.close()
        UIColor.gray.setFill()
        polygon9Path.fill()


        //// Polygon 10 Drawing
        let polygon10Path = UIBezierPath()
        polygon10Path.move(to: CGPoint(x: 666, y: 231.5))
        polygon10Path.addLine(to: CGPoint(x: 781.61, y: 298.25))
        polygon10Path.addLine(to: CGPoint(x: 781.61, y: 431.75))
        polygon10Path.addLine(to: CGPoint(x: 666, y: 498.5))
        polygon10Path.addLine(to: CGPoint(x: 550.39, y: 431.75))
        polygon10Path.addLine(to: CGPoint(x: 550.39, y: 298.25))
        polygon10Path.close()
        UIColor.lightGray.setFill()
        polygon10Path.fill()


        //// Polygon 11 Drawing
        let polygon11Path = UIBezierPath()
        polygon11Path.move(to: CGPoint(x: 666, y: 287.5))
        polygon11Path.addLine(to: CGPoint(x: 733.12, y: 326.25))
        polygon11Path.addLine(to: CGPoint(x: 733.12, y: 403.75))
        polygon11Path.addLine(to: CGPoint(x: 666, y: 442.5))
        polygon11Path.addLine(to: CGPoint(x: 598.88, y: 403.75))
        polygon11Path.addLine(to: CGPoint(x: 598.88, y: 326.25))
        polygon11Path.close()
        UIColor.white.setFill()
        polygon11Path.fill()


        //// Polygon 12 Drawing
        let polygon12Path = UIBezierPath()
        polygon12Path.move(to: CGPoint(x: 666, y: 319.5))
        polygon12Path.addLine(to: CGPoint(x: 705.4, y: 342.25))
        polygon12Path.addLine(to: CGPoint(x: 705.4, y: 387.75))
        polygon12Path.addLine(to: CGPoint(x: 666, y: 410.5))
        polygon12Path.addLine(to: CGPoint(x: 626.6, y: 387.75))
        polygon12Path.addLine(to: CGPoint(x: 626.6, y: 342.25))
        polygon12Path.close()
        color23.setFill()
        polygon12Path.fill()




        //// Group 4
        //// Polygon 13 Drawing
        let polygon13Path = UIBezierPath()
        polygon13Path.move(to: CGPoint(x: 194.5, y: -85.5))
        polygon13Path.addLine(to: CGPoint(x: 351.68, y: 5.25))
        polygon13Path.addLine(to: CGPoint(x: 351.68, y: 186.75))
        polygon13Path.addLine(to: CGPoint(x: 194.5, y: 277.5))
        polygon13Path.addLine(to: CGPoint(x: 37.32, y: 186.75))
        polygon13Path.addLine(to: CGPoint(x: 37.32, y: 5.25))
        polygon13Path.close()
        UIColor.gray.setFill()
        polygon13Path.fill()


        //// Polygon 14 Drawing
        let polygon14Path = UIBezierPath()
        polygon14Path.move(to: CGPoint(x: 194.5, y: -37.5))
        polygon14Path.addLine(to: CGPoint(x: 310.11, y: 29.25))
        polygon14Path.addLine(to: CGPoint(x: 310.11, y: 162.75))
        polygon14Path.addLine(to: CGPoint(x: 194.5, y: 229.5))
        polygon14Path.addLine(to: CGPoint(x: 78.89, y: 162.75))
        polygon14Path.addLine(to: CGPoint(x: 78.89, y: 29.25))
        polygon14Path.close()
        UIColor.lightGray.setFill()
        polygon14Path.fill()


        //// Polygon 15 Drawing
        let polygon15Path = UIBezierPath()
        polygon15Path.move(to: CGPoint(x: 194.5, y: 18.5))
        polygon15Path.addLine(to: CGPoint(x: 261.62, y: 57.25))
        polygon15Path.addLine(to: CGPoint(x: 261.62, y: 134.75))
        polygon15Path.addLine(to: CGPoint(x: 194.5, y: 173.5))
        polygon15Path.addLine(to: CGPoint(x: 127.38, y: 134.75))
        polygon15Path.addLine(to: CGPoint(x: 127.38, y: 57.25))
        polygon15Path.close()
        UIColor.white.setFill()
        polygon15Path.fill()


        //// Polygon 16 Drawing
        let polygon16Path = UIBezierPath()
        polygon16Path.move(to: CGPoint(x: 194.5, y: 50.5))
        polygon16Path.addLine(to: CGPoint(x: 233.9, y: 73.25))
        polygon16Path.addLine(to: CGPoint(x: 233.9, y: 118.75))
        polygon16Path.addLine(to: CGPoint(x: 194.5, y: 141.5))
        polygon16Path.addLine(to: CGPoint(x: 155.1, y: 118.75))
        polygon16Path.addLine(to: CGPoint(x: 155.1, y: 73.25))
        polygon16Path.close()
        color22.setFill()
        polygon16Path.fill()




        //// Group 5
        //// Polygon 17 Drawing
        let polygon17Path = UIBezierPath()
        polygon17Path.move(to: CGPoint(x: 38, y: 186.5))
        polygon17Path.addLine(to: CGPoint(x: 195.18, y: 277.25))
        polygon17Path.addLine(to: CGPoint(x: 195.18, y: 458.75))
        polygon17Path.addLine(to: CGPoint(x: 38, y: 549.5))
        polygon17Path.addLine(to: CGPoint(x: -119.18, y: 458.75))
        polygon17Path.addLine(to: CGPoint(x: -119.18, y: 277.25))
        polygon17Path.close()
        UIColor.gray.setFill()
        polygon17Path.fill()


        //// Polygon 18 Drawing
        let polygon18Path = UIBezierPath()
        polygon18Path.move(to: CGPoint(x: 38, y: 234.5))
        polygon18Path.addLine(to: CGPoint(x: 153.61, y: 301.25))
        polygon18Path.addLine(to: CGPoint(x: 153.61, y: 434.75))
        polygon18Path.addLine(to: CGPoint(x: 38, y: 501.5))
        polygon18Path.addLine(to: CGPoint(x: -77.61, y: 434.75))
        polygon18Path.addLine(to: CGPoint(x: -77.61, y: 301.25))
        polygon18Path.close()
        UIColor.lightGray.setFill()
        polygon18Path.fill()


        //// Polygon 19 Drawing
        let polygon19Path = UIBezierPath()
        polygon19Path.move(to: CGPoint(x: 38, y: 290.5))
        polygon19Path.addLine(to: CGPoint(x: 105.12, y: 329.25))
        polygon19Path.addLine(to: CGPoint(x: 105.12, y: 406.75))
        polygon19Path.addLine(to: CGPoint(x: 38, y: 445.5))
        polygon19Path.addLine(to: CGPoint(x: -29.12, y: 406.75))
        polygon19Path.addLine(to: CGPoint(x: -29.12, y: 329.25))
        polygon19Path.close()
        UIColor.white.setFill()
        polygon19Path.fill()


        //// Polygon 20 Drawing
        let polygon20Path = UIBezierPath()
        polygon20Path.move(to: CGPoint(x: 38, y: 322.5))
        polygon20Path.addLine(to: CGPoint(x: 77.4, y: 345.25))
        polygon20Path.addLine(to: CGPoint(x: 77.4, y: 390.75))
        polygon20Path.addLine(to: CGPoint(x: 38, y: 413.5))
        polygon20Path.addLine(to: CGPoint(x: -1.4, y: 390.75))
        polygon20Path.addLine(to: CGPoint(x: -1.4, y: 345.25))
        polygon20Path.close()
        UIColor.darkGray.setFill()
        polygon20Path.fill()






        //// Group 7
        //// Group 8
        //// Polygon 21 Drawing
        let polygon21Path = UIBezierPath()
        polygon21Path.move(to: CGPoint(x: 352, y: 728.5))
        polygon21Path.addLine(to: CGPoint(x: 509.18, y: 819.25))
        polygon21Path.addLine(to: CGPoint(x: 509.18, y: 1000.75))
        polygon21Path.addLine(to: CGPoint(x: 352, y: 1091.5))
        polygon21Path.addLine(to: CGPoint(x: 194.82, y: 1000.75))
        polygon21Path.addLine(to: CGPoint(x: 194.82, y: 819.25))
        polygon21Path.close()
        UIColor.gray.setFill()
        polygon21Path.fill()


        //// Polygon 22 Drawing
        let polygon22Path = UIBezierPath()
        polygon22Path.move(to: CGPoint(x: 352, y: 776.5))
        polygon22Path.addLine(to: CGPoint(x: 467.61, y: 843.25))
        polygon22Path.addLine(to: CGPoint(x: 467.61, y: 976.75))
        polygon22Path.addLine(to: CGPoint(x: 352, y: 1043.5))
        polygon22Path.addLine(to: CGPoint(x: 236.39, y: 976.75))
        polygon22Path.addLine(to: CGPoint(x: 236.39, y: 843.25))
        polygon22Path.close()
        UIColor.lightGray.setFill()
        polygon22Path.fill()


        //// Polygon 23 Drawing
        let polygon23Path = UIBezierPath()
        polygon23Path.move(to: CGPoint(x: 352, y: 832.5))
        polygon23Path.addLine(to: CGPoint(x: 419.12, y: 871.25))
        polygon23Path.addLine(to: CGPoint(x: 419.12, y: 948.75))
        polygon23Path.addLine(to: CGPoint(x: 352, y: 987.5))
        polygon23Path.addLine(to: CGPoint(x: 284.88, y: 948.75))
        polygon23Path.addLine(to: CGPoint(x: 284.88, y: 871.25))
        polygon23Path.close()
        UIColor.white.setFill()
        polygon23Path.fill()


        //// Polygon 24 Drawing
        let polygon24Path = UIBezierPath()
        polygon24Path.move(to: CGPoint(x: 352, y: 864.5))
        polygon24Path.addLine(to: CGPoint(x: 391.4, y: 887.25))
        polygon24Path.addLine(to: CGPoint(x: 391.4, y: 932.75))
        polygon24Path.addLine(to: CGPoint(x: 352, y: 955.5))
        polygon24Path.addLine(to: CGPoint(x: 312.6, y: 932.75))
        polygon24Path.addLine(to: CGPoint(x: 312.6, y: 887.25))
        polygon24Path.close()
        UIColor.darkGray.setFill()
        polygon24Path.fill()




        //// Group 9
        //// Polygon 25 Drawing
        let polygon25Path = UIBezierPath()
        polygon25Path.move(to: CGPoint(x: 508, y: 456.5))
        polygon25Path.addLine(to: CGPoint(x: 665.18, y: 547.25))
        polygon25Path.addLine(to: CGPoint(x: 665.18, y: 728.75))
        polygon25Path.addLine(to: CGPoint(x: 508, y: 819.5))
        polygon25Path.addLine(to: CGPoint(x: 350.82, y: 728.75))
        polygon25Path.addLine(to: CGPoint(x: 350.82, y: 547.25))
        polygon25Path.close()
        UIColor.gray.setFill()
        polygon25Path.fill()


        //// Polygon 26 Drawing
        let polygon26Path = UIBezierPath()
        polygon26Path.move(to: CGPoint(x: 508, y: 504.5))
        polygon26Path.addLine(to: CGPoint(x: 623.61, y: 571.25))
        polygon26Path.addLine(to: CGPoint(x: 623.61, y: 704.75))
        polygon26Path.addLine(to: CGPoint(x: 508, y: 771.5))
        polygon26Path.addLine(to: CGPoint(x: 392.39, y: 704.75))
        polygon26Path.addLine(to: CGPoint(x: 392.39, y: 571.25))
        polygon26Path.close()
        UIColor.lightGray.setFill()
        polygon26Path.fill()


        //// Polygon 27 Drawing
        let polygon27Path = UIBezierPath()
        polygon27Path.move(to: CGPoint(x: 508, y: 560.5))
        polygon27Path.addLine(to: CGPoint(x: 575.12, y: 599.25))
        polygon27Path.addLine(to: CGPoint(x: 575.12, y: 676.75))
        polygon27Path.addLine(to: CGPoint(x: 508, y: 715.5))
        polygon27Path.addLine(to: CGPoint(x: 440.88, y: 676.75))
        polygon27Path.addLine(to: CGPoint(x: 440.88, y: 599.25))
        polygon27Path.close()
        UIColor.white.setFill()
        polygon27Path.fill()


        //// Polygon 28 Drawing
        let polygon28Path = UIBezierPath()
        polygon28Path.move(to: CGPoint(x: 508, y: 592.5))
        polygon28Path.addLine(to: CGPoint(x: 547.4, y: 615.25))
        polygon28Path.addLine(to: CGPoint(x: 547.4, y: 660.75))
        polygon28Path.addLine(to: CGPoint(x: 508, y: 683.5))
        polygon28Path.addLine(to: CGPoint(x: 468.6, y: 660.75))
        polygon28Path.addLine(to: CGPoint(x: 468.6, y: 615.25))
        polygon28Path.close()
        UIColor.darkGray.setFill()
        polygon28Path.fill()




        //// Group 10
        //// Polygon 29 Drawing
        let polygon29Path = UIBezierPath()
        polygon29Path.move(to: CGPoint(x: 666, y: 726.5))
        polygon29Path.addLine(to: CGPoint(x: 823.18, y: 817.25))
        polygon29Path.addLine(to: CGPoint(x: 823.18, y: 998.75))
        polygon29Path.addLine(to: CGPoint(x: 666, y: 1089.5))
        polygon29Path.addLine(to: CGPoint(x: 508.82, y: 998.75))
        polygon29Path.addLine(to: CGPoint(x: 508.82, y: 817.25))
        polygon29Path.close()
        UIColor.gray.setFill()
        polygon29Path.fill()


        //// Polygon 30 Drawing
        let polygon30Path = UIBezierPath()
        polygon30Path.move(to: CGPoint(x: 666, y: 774.5))
        polygon30Path.addLine(to: CGPoint(x: 781.61, y: 841.25))
        polygon30Path.addLine(to: CGPoint(x: 781.61, y: 974.75))
        polygon30Path.addLine(to: CGPoint(x: 666, y: 1041.5))
        polygon30Path.addLine(to: CGPoint(x: 550.39, y: 974.75))
        polygon30Path.addLine(to: CGPoint(x: 550.39, y: 841.25))
        polygon30Path.close()
        UIColor.lightGray.setFill()
        polygon30Path.fill()


        //// Polygon 31 Drawing
        let polygon31Path = UIBezierPath()
        polygon31Path.move(to: CGPoint(x: 666, y: 830.5))
        polygon31Path.addLine(to: CGPoint(x: 733.12, y: 869.25))
        polygon31Path.addLine(to: CGPoint(x: 733.12, y: 946.75))
        polygon31Path.addLine(to: CGPoint(x: 666, y: 985.5))
        polygon31Path.addLine(to: CGPoint(x: 598.88, y: 946.75))
        polygon31Path.addLine(to: CGPoint(x: 598.88, y: 869.25))
        polygon31Path.close()
        UIColor.white.setFill()
        polygon31Path.fill()


        //// Polygon 32 Drawing
        let polygon32Path = UIBezierPath()
        polygon32Path.move(to: CGPoint(x: 666, y: 862.5))
        polygon32Path.addLine(to: CGPoint(x: 705.4, y: 885.25))
        polygon32Path.addLine(to: CGPoint(x: 705.4, y: 930.75))
        polygon32Path.addLine(to: CGPoint(x: 666, y: 953.5))
        polygon32Path.addLine(to: CGPoint(x: 626.6, y: 930.75))
        polygon32Path.addLine(to: CGPoint(x: 626.6, y: 885.25))
        polygon32Path.close()
        UIColor.darkGray.setFill()
        polygon32Path.fill()




        //// Group 11
        //// Polygon 33 Drawing
        let polygon33Path = UIBezierPath()
        polygon33Path.move(to: CGPoint(x: 194.5, y: 457.5))
        polygon33Path.addLine(to: CGPoint(x: 351.68, y: 548.25))
        polygon33Path.addLine(to: CGPoint(x: 351.68, y: 729.75))
        polygon33Path.addLine(to: CGPoint(x: 194.5, y: 820.5))
        polygon33Path.addLine(to: CGPoint(x: 37.32, y: 729.75))
        polygon33Path.addLine(to: CGPoint(x: 37.32, y: 548.25))
        polygon33Path.close()
        UIColor.gray.setFill()
        polygon33Path.fill()


        //// Polygon 34 Drawing
        let polygon34Path = UIBezierPath()
        polygon34Path.move(to: CGPoint(x: 194.5, y: 505.5))
        polygon34Path.addLine(to: CGPoint(x: 310.11, y: 572.25))
        polygon34Path.addLine(to: CGPoint(x: 310.11, y: 705.75))
        polygon34Path.addLine(to: CGPoint(x: 194.5, y: 772.5))
        polygon34Path.addLine(to: CGPoint(x: 78.89, y: 705.75))
        polygon34Path.addLine(to: CGPoint(x: 78.89, y: 572.25))
        polygon34Path.close()
        UIColor.lightGray.setFill()
        polygon34Path.fill()


        //// Polygon 35 Drawing
        let polygon35Path = UIBezierPath()
        polygon35Path.move(to: CGPoint(x: 194.5, y: 561.5))
        polygon35Path.addLine(to: CGPoint(x: 261.62, y: 600.25))
        polygon35Path.addLine(to: CGPoint(x: 261.62, y: 677.75))
        polygon35Path.addLine(to: CGPoint(x: 194.5, y: 716.5))
        polygon35Path.addLine(to: CGPoint(x: 127.38, y: 677.75))
        polygon35Path.addLine(to: CGPoint(x: 127.38, y: 600.25))
        polygon35Path.close()
        UIColor.white.setFill()
        polygon35Path.fill()


        //// Polygon 36 Drawing
        let polygon36Path = UIBezierPath()
        polygon36Path.move(to: CGPoint(x: 194.5, y: 593.5))
        polygon36Path.addLine(to: CGPoint(x: 233.9, y: 616.25))
        polygon36Path.addLine(to: CGPoint(x: 233.9, y: 661.75))
        polygon36Path.addLine(to: CGPoint(x: 194.5, y: 684.5))
        polygon36Path.addLine(to: CGPoint(x: 155.1, y: 661.75))
        polygon36Path.addLine(to: CGPoint(x: 155.1, y: 616.25))
        polygon36Path.close()
        UIColor.darkGray.setFill()
        polygon36Path.fill()




        //// Group 12
        //// Polygon 37 Drawing
        let polygon37Path = UIBezierPath()
        polygon37Path.move(to: CGPoint(x: 38, y: 729.5))
        polygon37Path.addLine(to: CGPoint(x: 195.18, y: 820.25))
        polygon37Path.addLine(to: CGPoint(x: 195.18, y: 1001.75))
        polygon37Path.addLine(to: CGPoint(x: 38, y: 1092.5))
        polygon37Path.addLine(to: CGPoint(x: -119.18, y: 1001.75))
        polygon37Path.addLine(to: CGPoint(x: -119.18, y: 820.25))
        polygon37Path.close()
        UIColor.gray.setFill()
        polygon37Path.fill()


        //// Polygon 38 Drawing
        let polygon38Path = UIBezierPath()
        polygon38Path.move(to: CGPoint(x: 38, y: 777.5))
        polygon38Path.addLine(to: CGPoint(x: 153.61, y: 844.25))
        polygon38Path.addLine(to: CGPoint(x: 153.61, y: 977.75))
        polygon38Path.addLine(to: CGPoint(x: 38, y: 1044.5))
        polygon38Path.addLine(to: CGPoint(x: -77.61, y: 977.75))
        polygon38Path.addLine(to: CGPoint(x: -77.61, y: 844.25))
        polygon38Path.close()
        UIColor.lightGray.setFill()
        polygon38Path.fill()


        //// Polygon 39 Drawing
        let polygon39Path = UIBezierPath()
        polygon39Path.move(to: CGPoint(x: 38, y: 833.5))
        polygon39Path.addLine(to: CGPoint(x: 105.12, y: 872.25))
        polygon39Path.addLine(to: CGPoint(x: 105.12, y: 949.75))
        polygon39Path.addLine(to: CGPoint(x: 38, y: 988.5))
        polygon39Path.addLine(to: CGPoint(x: -29.12, y: 949.75))
        polygon39Path.addLine(to: CGPoint(x: -29.12, y: 872.25))
        polygon39Path.close()
        UIColor.white.setFill()
        polygon39Path.fill()


        //// Polygon 40 Drawing
        let polygon40Path = UIBezierPath()
        polygon40Path.move(to: CGPoint(x: 38, y: 865.5))
        polygon40Path.addLine(to: CGPoint(x: 77.4, y: 888.25))
        polygon40Path.addLine(to: CGPoint(x: 77.4, y: 933.75))
        polygon40Path.addLine(to: CGPoint(x: 38, y: 956.5))
        polygon40Path.addLine(to: CGPoint(x: -1.4, y: 933.75))
        polygon40Path.addLine(to: CGPoint(x: -1.4, y: 888.25))
        polygon40Path.close()
        UIColor.darkGray.setFill()
        polygon40Path.fill()






        //// Group 13
        //// Group 14
        //// Polygon 41 Drawing
        let polygon41Path = UIBezierPath()
        polygon41Path.move(to: CGPoint(x: 354, y: 1271.5))
        polygon41Path.addLine(to: CGPoint(x: 511.18, y: 1362.25))
        polygon41Path.addLine(to: CGPoint(x: 511.18, y: 1543.75))
        polygon41Path.addLine(to: CGPoint(x: 354, y: 1634.5))
        polygon41Path.addLine(to: CGPoint(x: 196.82, y: 1543.75))
        polygon41Path.addLine(to: CGPoint(x: 196.82, y: 1362.25))
        polygon41Path.close()
        UIColor.gray.setFill()
        polygon41Path.fill()


        //// Polygon 42 Drawing
        let polygon42Path = UIBezierPath()
        polygon42Path.move(to: CGPoint(x: 354, y: 1319.5))
        polygon42Path.addLine(to: CGPoint(x: 469.61, y: 1386.25))
        polygon42Path.addLine(to: CGPoint(x: 469.61, y: 1519.75))
        polygon42Path.addLine(to: CGPoint(x: 354, y: 1586.5))
        polygon42Path.addLine(to: CGPoint(x: 238.39, y: 1519.75))
        polygon42Path.addLine(to: CGPoint(x: 238.39, y: 1386.25))
        polygon42Path.close()
        UIColor.lightGray.setFill()
        polygon42Path.fill()


        //// Polygon 43 Drawing
        let polygon43Path = UIBezierPath()
        polygon43Path.move(to: CGPoint(x: 354, y: 1375.5))
        polygon43Path.addLine(to: CGPoint(x: 421.12, y: 1414.25))
        polygon43Path.addLine(to: CGPoint(x: 421.12, y: 1491.75))
        polygon43Path.addLine(to: CGPoint(x: 354, y: 1530.5))
        polygon43Path.addLine(to: CGPoint(x: 286.88, y: 1491.75))
        polygon43Path.addLine(to: CGPoint(x: 286.88, y: 1414.25))
        polygon43Path.close()
        UIColor.white.setFill()
        polygon43Path.fill()


        //// Polygon 44 Drawing
        let polygon44Path = UIBezierPath()
        polygon44Path.move(to: CGPoint(x: 354, y: 1407.5))
        polygon44Path.addLine(to: CGPoint(x: 393.4, y: 1430.25))
        polygon44Path.addLine(to: CGPoint(x: 393.4, y: 1475.75))
        polygon44Path.addLine(to: CGPoint(x: 354, y: 1498.5))
        polygon44Path.addLine(to: CGPoint(x: 314.6, y: 1475.75))
        polygon44Path.addLine(to: CGPoint(x: 314.6, y: 1430.25))
        polygon44Path.close()
        UIColor.darkGray.setFill()
        polygon44Path.fill()




        //// Group 15
        //// Polygon 45 Drawing
        let polygon45Path = UIBezierPath()
        polygon45Path.move(to: CGPoint(x: 510, y: 999.5))
        polygon45Path.addLine(to: CGPoint(x: 667.18, y: 1090.25))
        polygon45Path.addLine(to: CGPoint(x: 667.18, y: 1271.75))
        polygon45Path.addLine(to: CGPoint(x: 510, y: 1362.5))
        polygon45Path.addLine(to: CGPoint(x: 352.82, y: 1271.75))
        polygon45Path.addLine(to: CGPoint(x: 352.82, y: 1090.25))
        polygon45Path.close()
        UIColor.gray.setFill()
        polygon45Path.fill()


        //// Polygon 46 Drawing
        let polygon46Path = UIBezierPath()
        polygon46Path.move(to: CGPoint(x: 510, y: 1047.5))
        polygon46Path.addLine(to: CGPoint(x: 625.61, y: 1114.25))
        polygon46Path.addLine(to: CGPoint(x: 625.61, y: 1247.75))
        polygon46Path.addLine(to: CGPoint(x: 510, y: 1314.5))
        polygon46Path.addLine(to: CGPoint(x: 394.39, y: 1247.75))
        polygon46Path.addLine(to: CGPoint(x: 394.39, y: 1114.25))
        polygon46Path.close()
        UIColor.lightGray.setFill()
        polygon46Path.fill()


        //// Polygon 47 Drawing
        let polygon47Path = UIBezierPath()
        polygon47Path.move(to: CGPoint(x: 510, y: 1103.5))
        polygon47Path.addLine(to: CGPoint(x: 577.12, y: 1142.25))
        polygon47Path.addLine(to: CGPoint(x: 577.12, y: 1219.75))
        polygon47Path.addLine(to: CGPoint(x: 510, y: 1258.5))
        polygon47Path.addLine(to: CGPoint(x: 442.88, y: 1219.75))
        polygon47Path.addLine(to: CGPoint(x: 442.88, y: 1142.25))
        polygon47Path.close()
        UIColor.white.setFill()
        polygon47Path.fill()


        //// Polygon 48 Drawing
        let polygon48Path = UIBezierPath()
        polygon48Path.move(to: CGPoint(x: 510, y: 1135.5))
        polygon48Path.addLine(to: CGPoint(x: 549.4, y: 1158.25))
        polygon48Path.addLine(to: CGPoint(x: 549.4, y: 1203.75))
        polygon48Path.addLine(to: CGPoint(x: 510, y: 1226.5))
        polygon48Path.addLine(to: CGPoint(x: 470.6, y: 1203.75))
        polygon48Path.addLine(to: CGPoint(x: 470.6, y: 1158.25))
        polygon48Path.close()
        UIColor.darkGray.setFill()
        polygon48Path.fill()




        //// Group 16
        //// Polygon 49 Drawing
        let polygon49Path = UIBezierPath()
        polygon49Path.move(to: CGPoint(x: 668, y: 1269.5))
        polygon49Path.addLine(to: CGPoint(x: 825.18, y: 1360.25))
        polygon49Path.addLine(to: CGPoint(x: 825.18, y: 1541.75))
        polygon49Path.addLine(to: CGPoint(x: 668, y: 1632.5))
        polygon49Path.addLine(to: CGPoint(x: 510.82, y: 1541.75))
        polygon49Path.addLine(to: CGPoint(x: 510.82, y: 1360.25))
        polygon49Path.close()
        UIColor.gray.setFill()
        polygon49Path.fill()


        //// Polygon 50 Drawing
        let polygon50Path = UIBezierPath()
        polygon50Path.move(to: CGPoint(x: 668, y: 1317.5))
        polygon50Path.addLine(to: CGPoint(x: 783.61, y: 1384.25))
        polygon50Path.addLine(to: CGPoint(x: 783.61, y: 1517.75))
        polygon50Path.addLine(to: CGPoint(x: 668, y: 1584.5))
        polygon50Path.addLine(to: CGPoint(x: 552.39, y: 1517.75))
        polygon50Path.addLine(to: CGPoint(x: 552.39, y: 1384.25))
        polygon50Path.close()
        UIColor.lightGray.setFill()
        polygon50Path.fill()


        //// Polygon 51 Drawing
        let polygon51Path = UIBezierPath()
        polygon51Path.move(to: CGPoint(x: 668, y: 1373.5))
        polygon51Path.addLine(to: CGPoint(x: 735.12, y: 1412.25))
        polygon51Path.addLine(to: CGPoint(x: 735.12, y: 1489.75))
        polygon51Path.addLine(to: CGPoint(x: 668, y: 1528.5))
        polygon51Path.addLine(to: CGPoint(x: 600.88, y: 1489.75))
        polygon51Path.addLine(to: CGPoint(x: 600.88, y: 1412.25))
        polygon51Path.close()
        UIColor.white.setFill()
        polygon51Path.fill()


        //// Polygon 52 Drawing
        let polygon52Path = UIBezierPath()
        polygon52Path.move(to: CGPoint(x: 668, y: 1405.5))
        polygon52Path.addLine(to: CGPoint(x: 707.4, y: 1428.25))
        polygon52Path.addLine(to: CGPoint(x: 707.4, y: 1473.75))
        polygon52Path.addLine(to: CGPoint(x: 668, y: 1496.5))
        polygon52Path.addLine(to: CGPoint(x: 628.6, y: 1473.75))
        polygon52Path.addLine(to: CGPoint(x: 628.6, y: 1428.25))
        polygon52Path.close()
        UIColor.darkGray.setFill()
        polygon52Path.fill()




        //// Group 17
        //// Polygon 53 Drawing
        let polygon53Path = UIBezierPath()
        polygon53Path.move(to: CGPoint(x: 196.5, y: 1000.5))
        polygon53Path.addLine(to: CGPoint(x: 353.68, y: 1091.25))
        polygon53Path.addLine(to: CGPoint(x: 353.68, y: 1272.75))
        polygon53Path.addLine(to: CGPoint(x: 196.5, y: 1363.5))
        polygon53Path.addLine(to: CGPoint(x: 39.32, y: 1272.75))
        polygon53Path.addLine(to: CGPoint(x: 39.32, y: 1091.25))
        polygon53Path.close()
        UIColor.gray.setFill()
        polygon53Path.fill()


        //// Polygon 54 Drawing
        let polygon54Path = UIBezierPath()
        polygon54Path.move(to: CGPoint(x: 196.5, y: 1048.5))
        polygon54Path.addLine(to: CGPoint(x: 312.11, y: 1115.25))
        polygon54Path.addLine(to: CGPoint(x: 312.11, y: 1248.75))
        polygon54Path.addLine(to: CGPoint(x: 196.5, y: 1315.5))
        polygon54Path.addLine(to: CGPoint(x: 80.89, y: 1248.75))
        polygon54Path.addLine(to: CGPoint(x: 80.89, y: 1115.25))
        polygon54Path.close()
        UIColor.lightGray.setFill()
        polygon54Path.fill()


        //// Polygon 55 Drawing
        let polygon55Path = UIBezierPath()
        polygon55Path.move(to: CGPoint(x: 196.5, y: 1104.5))
        polygon55Path.addLine(to: CGPoint(x: 263.62, y: 1143.25))
        polygon55Path.addLine(to: CGPoint(x: 263.62, y: 1220.75))
        polygon55Path.addLine(to: CGPoint(x: 196.5, y: 1259.5))
        polygon55Path.addLine(to: CGPoint(x: 129.38, y: 1220.75))
        polygon55Path.addLine(to: CGPoint(x: 129.38, y: 1143.25))
        polygon55Path.close()
        UIColor.white.setFill()
        polygon55Path.fill()


        //// Polygon 56 Drawing
        let polygon56Path = UIBezierPath()
        polygon56Path.move(to: CGPoint(x: 196.5, y: 1136.5))
        polygon56Path.addLine(to: CGPoint(x: 235.9, y: 1159.25))
        polygon56Path.addLine(to: CGPoint(x: 235.9, y: 1204.75))
        polygon56Path.addLine(to: CGPoint(x: 196.5, y: 1227.5))
        polygon56Path.addLine(to: CGPoint(x: 157.1, y: 1204.75))
        polygon56Path.addLine(to: CGPoint(x: 157.1, y: 1159.25))
        polygon56Path.close()
        UIColor.darkGray.setFill()
        polygon56Path.fill()




        //// Group 18
        //// Polygon 57 Drawing
        let polygon57Path = UIBezierPath()
        polygon57Path.move(to: CGPoint(x: 40, y: 1272.5))
        polygon57Path.addLine(to: CGPoint(x: 197.18, y: 1363.25))
        polygon57Path.addLine(to: CGPoint(x: 197.18, y: 1544.75))
        polygon57Path.addLine(to: CGPoint(x: 40, y: 1635.5))
        polygon57Path.addLine(to: CGPoint(x: -117.18, y: 1544.75))
        polygon57Path.addLine(to: CGPoint(x: -117.18, y: 1363.25))
        polygon57Path.close()
        UIColor.gray.setFill()
        polygon57Path.fill()


        //// Polygon 58 Drawing
        let polygon58Path = UIBezierPath()
        polygon58Path.move(to: CGPoint(x: 40, y: 1320.5))
        polygon58Path.addLine(to: CGPoint(x: 155.61, y: 1387.25))
        polygon58Path.addLine(to: CGPoint(x: 155.61, y: 1520.75))
        polygon58Path.addLine(to: CGPoint(x: 40, y: 1587.5))
        polygon58Path.addLine(to: CGPoint(x: -75.61, y: 1520.75))
        polygon58Path.addLine(to: CGPoint(x: -75.61, y: 1387.25))
        polygon58Path.close()
        UIColor.lightGray.setFill()
        polygon58Path.fill()


        //// Polygon 59 Drawing
        let polygon59Path = UIBezierPath()
        polygon59Path.move(to: CGPoint(x: 40, y: 1376.5))
        polygon59Path.addLine(to: CGPoint(x: 107.12, y: 1415.25))
        polygon59Path.addLine(to: CGPoint(x: 107.12, y: 1492.75))
        polygon59Path.addLine(to: CGPoint(x: 40, y: 1531.5))
        polygon59Path.addLine(to: CGPoint(x: -27.12, y: 1492.75))
        polygon59Path.addLine(to: CGPoint(x: -27.12, y: 1415.25))
        polygon59Path.close()
        UIColor.white.setFill()
        polygon59Path.fill()


        //// Polygon 60 Drawing
        let polygon60Path = UIBezierPath()
        polygon60Path.move(to: CGPoint(x: 40, y: 1408.5))
        polygon60Path.addLine(to: CGPoint(x: 79.4, y: 1431.25))
        polygon60Path.addLine(to: CGPoint(x: 79.4, y: 1476.75))
        polygon60Path.addLine(to: CGPoint(x: 40, y: 1499.5))
        polygon60Path.addLine(to: CGPoint(x: 0.6, y: 1476.75))
        polygon60Path.addLine(to: CGPoint(x: 0.6, y: 1431.25))
        polygon60Path.close()
        UIColor.darkGray.setFill()
        polygon60Path.fill()






        //// Rectangle Drawing
        context.saveGState()
        context.setAlpha(0.5)
        context.setBlendMode(.overlay)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 700, height: 1200))
        blazeTiles.setFill()
        rectanglePath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawTreePattern(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit, wallLight: UIColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 700, resizedFrame.height / 1200)


        //// Color Declarations
        var wallLightRedComponent: CGFloat = 1
        var wallLightGreenComponent: CGFloat = 1
        var wallLightBlueComponent: CGFloat = 1
        wallLight.getRed(&wallLightRedComponent, green: &wallLightGreenComponent, blue: &wallLightBlueComponent, alpha: nil)

        var wallLightHueComponent: CGFloat = 1
        var wallLightSaturationComponent: CGFloat = 1
        var wallLightBrightnessComponent: CGFloat = 1
        wallLight.getHue(&wallLightHueComponent, saturation: &wallLightSaturationComponent, brightness: &wallLightBrightnessComponent, alpha: nil)

        let wallMedium = UIColor(red: (wallLightRedComponent * 0.7), green: (wallLightGreenComponent * 0.7), blue: (wallLightBlueComponent * 0.7), alpha: (wallLight.cgColor.alpha * 0.7 + 0.3))
        let wallDark = UIColor(red: (wallLightRedComponent * 0.5), green: (wallLightGreenComponent * 0.5), blue: (wallLightBlueComponent * 0.5), alpha: (wallLight.cgColor.alpha * 0.5 + 0.5))
        let wallExtraDark = UIColor(hue: wallLightHueComponent, saturation: wallLightSaturationComponent, brightness: 0.3, alpha: wallLight.cgColor.alpha)

        //// Shadow Declarations
        let wallShadow = NSShadow()
        wallShadow.shadowColor = UIColor.black
        wallShadow.shadowOffset = CGSize(width: 0, height: 0)
        wallShadow.shadowBlurRadius = 4
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 10, height: 0)
        shadow.shadowBlurRadius = 10
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black
        shadow2.shadowOffset = CGSize(width: -6, height: 4)
        shadow2.shadowBlurRadius = 5
        let shadow3 = NSShadow()
        shadow3.shadowColor = UIColor.black
        shadow3.shadowOffset = CGSize(width: 0, height: -5)
        shadow3.shadowBlurRadius = 5

        //// Group
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 598.3, y: 193.38))
        bezier4Path.addCurve(to: CGPoint(x: 386, y: 450.47), controlPoint1: CGPoint(x: 502.42, y: 224.49), controlPoint2: CGPoint(x: 386, y: 186.83))
        bezier4Path.addCurve(to: CGPoint(x: 512.7, y: 720.65), controlPoint1: CGPoint(x: 386, y: 714.1), controlPoint2: CGPoint(x: 512.7, y: 581.47))
        bezier4Path.addCurve(to: CGPoint(x: 386, y: 1012.13), controlPoint1: CGPoint(x: 512.7, y: 859.84), controlPoint2: CGPoint(x: 386, y: 894.23))
        bezier4Path.addCurve(to: CGPoint(x: 875.67, y: 1177.52), controlPoint1: CGPoint(x: 386, y: 1130.03), controlPoint2: CGPoint(x: 798.62, y: 1251.21))
        bezier4Path.addCurve(to: CGPoint(x: 909.91, y: 419.35), controlPoint1: CGPoint(x: 952.71, y: 1103.83), controlPoint2: CGPoint(x: 969.83, y: 529.07))
        bezier4Path.addCurve(to: CGPoint(x: 909.91, y: 46), controlPoint1: CGPoint(x: 849.99, y: 309.64), controlPoint2: CGPoint(x: 1017.77, y: 46))
        bezier4Path.addCurve(to: CGPoint(x: 598.3, y: 193.38), controlPoint1: CGPoint(x: 802.05, y: 46), controlPoint2: CGPoint(x: 694.18, y: 162.26))
        bezier4Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallLight.setFill()
        bezier4Path.fill()

        ////// Bezier 4 Inner Shadow
        context.saveGState()
        context.clip(to: bezier4Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier4OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: bezier4OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier4OpaqueShadow.setFill()
        bezier4Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 621.23, y: 316.79))
        bezierPath.addCurve(to: CGPoint(x: 471.92, y: 505.92), controlPoint1: CGPoint(x: 553.8, y: 339.68), controlPoint2: CGPoint(x: 471.92, y: 311.98))
        bezierPath.addCurve(to: CGPoint(x: 561.02, y: 704.67), controlPoint1: CGPoint(x: 471.92, y: 699.85), controlPoint2: CGPoint(x: 561.02, y: 602.28))
        bezierPath.addCurve(to: CGPoint(x: 471.92, y: 919.09), controlPoint1: CGPoint(x: 561.02, y: 807.06), controlPoint2: CGPoint(x: 471.92, y: 832.36))
        bezierPath.addCurve(to: CGPoint(x: 816.28, y: 1040.75), controlPoint1: CGPoint(x: 471.92, y: 1005.82), controlPoint2: CGPoint(x: 762.1, y: 1094.96))
        bezierPath.addCurve(to: CGPoint(x: 840.36, y: 483.03), controlPoint1: CGPoint(x: 870.46, y: 986.55), controlPoint2: CGPoint(x: 882.5, y: 563.74))
        bezierPath.addCurve(to: CGPoint(x: 840.36, y: 208.38), controlPoint1: CGPoint(x: 798.22, y: 402.32), controlPoint2: CGPoint(x: 916.21, y: 208.38))
        bezierPath.addCurve(to: CGPoint(x: 621.23, y: 316.79), controlPoint1: CGPoint(x: 764.51, y: 208.38), controlPoint2: CGPoint(x: 688.65, y: 293.91))
        bezierPath.close()
        wallMedium.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context.saveGState()
        context.clip(to: bezierPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezierOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: bezierOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 641.58, y: 363.48))
        bezier2Path.addCurve(to: CGPoint(x: 522.66, y: 524.76), controlPoint1: CGPoint(x: 587.88, y: 382.99), controlPoint2: CGPoint(x: 522.66, y: 359.37))
        bezier2Path.addCurve(to: CGPoint(x: 593.63, y: 694.26), controlPoint1: CGPoint(x: 522.66, y: 690.15), controlPoint2: CGPoint(x: 593.63, y: 606.94))
        bezier2Path.addCurve(to: CGPoint(x: 522.66, y: 877.12), controlPoint1: CGPoint(x: 593.63, y: 781.58), controlPoint2: CGPoint(x: 522.66, y: 803.16))
        bezier2Path.addCurve(to: CGPoint(x: 796.95, y: 980.88), controlPoint1: CGPoint(x: 522.66, y: 951.09), controlPoint2: CGPoint(x: 753.8, y: 1027.11))
        bezier2Path.addCurve(to: CGPoint(x: 816.14, y: 505.24), controlPoint1: CGPoint(x: 840.11, y: 934.65), controlPoint2: CGPoint(x: 849.7, y: 574.07))
        bezier2Path.addCurve(to: CGPoint(x: 816.14, y: 271.02), controlPoint1: CGPoint(x: 782.57, y: 436.41), controlPoint2: CGPoint(x: 876.56, y: 271.02))
        bezier2Path.addCurve(to: CGPoint(x: 641.58, y: 363.48), controlPoint1: CGPoint(x: 755.71, y: 271.02), controlPoint2: CGPoint(x: 695.29, y: 343.96))
        bezier2Path.close()
        wallDark.setFill()
        bezier2Path.fill()

        ////// Bezier 2 Inner Shadow
        context.saveGState()
        context.clip(to: bezier2Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier2OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: bezier2OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier2OpaqueShadow.setFill()
        bezier2Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 651.25, y: 431.51))
        bezier3Path.addCurve(to: CGPoint(x: 571.05, y: 558.84), controlPoint1: CGPoint(x: 615.03, y: 446.92), controlPoint2: CGPoint(x: 571.05, y: 428.26))
        bezier3Path.addCurve(to: CGPoint(x: 618.91, y: 692.67), controlPoint1: CGPoint(x: 571.05, y: 689.43), controlPoint2: CGPoint(x: 618.91, y: 623.73))
        bezier3Path.addCurve(to: CGPoint(x: 571.05, y: 837.04), controlPoint1: CGPoint(x: 618.91, y: 761.61), controlPoint2: CGPoint(x: 571.05, y: 778.64))
        bezier3Path.addCurve(to: CGPoint(x: 756.02, y: 918.96), controlPoint1: CGPoint(x: 571.05, y: 895.44), controlPoint2: CGPoint(x: 726.92, y: 955.45))
        bezier3Path.addCurve(to: CGPoint(x: 768.95, y: 543.43), controlPoint1: CGPoint(x: 785.12, y: 882.46), controlPoint2: CGPoint(x: 791.59, y: 597.78))
        bezier3Path.addCurve(to: CGPoint(x: 768.95, y: 358.51), controlPoint1: CGPoint(x: 746.32, y: 489.09), controlPoint2: CGPoint(x: 809.7, y: 358.51))
        bezier3Path.addCurve(to: CGPoint(x: 651.25, y: 431.51), controlPoint1: CGPoint(x: 728.21, y: 358.51), controlPoint2: CGPoint(x: 687.47, y: 416.1))
        bezier3Path.close()
        wallExtraDark.setFill()
        bezier3Path.fill()

        ////// Bezier 3 Inner Shadow
        context.saveGState()
        context.clip(to: bezier3Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier3OpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: bezier3OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier3OpaqueShadow.setFill()
        bezier3Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()





        //// Group 2
        context.saveGState()
        context.translateBy(x: 472, y: 1687)
        context.rotate(by: 180 * CGFloat.pi/180)



        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 212.3, y: 147.38))
        bezier5Path.addCurve(to: CGPoint(x: 0, y: 404.47), controlPoint1: CGPoint(x: 116.42, y: 178.49), controlPoint2: CGPoint(x: 0, y: 140.83))
        bezier5Path.addCurve(to: CGPoint(x: 126.7, y: 674.65), controlPoint1: CGPoint(x: 0, y: 668.1), controlPoint2: CGPoint(x: 126.7, y: 535.47))
        bezier5Path.addCurve(to: CGPoint(x: 0, y: 966.13), controlPoint1: CGPoint(x: 126.7, y: 813.84), controlPoint2: CGPoint(x: 0, y: 848.23))
        bezier5Path.addCurve(to: CGPoint(x: 489.67, y: 1131.52), controlPoint1: CGPoint(x: 0, y: 1084.03), controlPoint2: CGPoint(x: 412.62, y: 1205.21))
        bezier5Path.addCurve(to: CGPoint(x: 523.91, y: 373.35), controlPoint1: CGPoint(x: 566.71, y: 1057.83), controlPoint2: CGPoint(x: 583.83, y: 483.07))
        bezier5Path.addCurve(to: CGPoint(x: 523.91, y: 0), controlPoint1: CGPoint(x: 463.99, y: 263.64), controlPoint2: CGPoint(x: 631.77, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 212.3, y: 147.38), controlPoint1: CGPoint(x: 416.05, y: 0), controlPoint2: CGPoint(x: 308.18, y: 116.26))
        bezier5Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallLight.setFill()
        bezier5Path.fill()

        ////// Bezier 5 Inner Shadow
        context.saveGState()
        context.clip(to: bezier5Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier5OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier5OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier5OpaqueShadow.setFill()
        bezier5Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()



        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 235.23, y: 270.79))
        bezier6Path.addCurve(to: CGPoint(x: 85.92, y: 459.92), controlPoint1: CGPoint(x: 167.8, y: 293.68), controlPoint2: CGPoint(x: 85.92, y: 265.98))
        bezier6Path.addCurve(to: CGPoint(x: 175.02, y: 658.67), controlPoint1: CGPoint(x: 85.92, y: 653.85), controlPoint2: CGPoint(x: 175.02, y: 556.28))
        bezier6Path.addCurve(to: CGPoint(x: 85.92, y: 873.09), controlPoint1: CGPoint(x: 175.02, y: 761.06), controlPoint2: CGPoint(x: 85.92, y: 786.36))
        bezier6Path.addCurve(to: CGPoint(x: 430.28, y: 994.75), controlPoint1: CGPoint(x: 85.92, y: 959.82), controlPoint2: CGPoint(x: 376.1, y: 1048.96))
        bezier6Path.addCurve(to: CGPoint(x: 454.36, y: 437.03), controlPoint1: CGPoint(x: 484.46, y: 940.55), controlPoint2: CGPoint(x: 496.5, y: 517.74))
        bezier6Path.addCurve(to: CGPoint(x: 454.36, y: 162.38), controlPoint1: CGPoint(x: 412.22, y: 356.32), controlPoint2: CGPoint(x: 530.21, y: 162.38))
        bezier6Path.addCurve(to: CGPoint(x: 235.23, y: 270.79), controlPoint1: CGPoint(x: 378.51, y: 162.38), controlPoint2: CGPoint(x: 302.65, y: 247.91))
        bezier6Path.close()
        wallMedium.setFill()
        bezier6Path.fill()

        ////// Bezier 6 Inner Shadow
        context.saveGState()
        context.clip(to: bezier6Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier6OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier6OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier6OpaqueShadow.setFill()
        bezier6Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 255.58, y: 317.48))
        bezier7Path.addCurve(to: CGPoint(x: 136.66, y: 478.76), controlPoint1: CGPoint(x: 201.88, y: 336.99), controlPoint2: CGPoint(x: 136.66, y: 313.37))
        bezier7Path.addCurve(to: CGPoint(x: 207.63, y: 648.26), controlPoint1: CGPoint(x: 136.66, y: 644.15), controlPoint2: CGPoint(x: 207.63, y: 560.94))
        bezier7Path.addCurve(to: CGPoint(x: 136.66, y: 831.12), controlPoint1: CGPoint(x: 207.63, y: 735.58), controlPoint2: CGPoint(x: 136.66, y: 757.16))
        bezier7Path.addCurve(to: CGPoint(x: 410.95, y: 934.88), controlPoint1: CGPoint(x: 136.66, y: 905.09), controlPoint2: CGPoint(x: 367.8, y: 981.11))
        bezier7Path.addCurve(to: CGPoint(x: 430.14, y: 459.24), controlPoint1: CGPoint(x: 454.11, y: 888.65), controlPoint2: CGPoint(x: 463.7, y: 528.07))
        bezier7Path.addCurve(to: CGPoint(x: 430.14, y: 225.02), controlPoint1: CGPoint(x: 396.57, y: 390.41), controlPoint2: CGPoint(x: 490.56, y: 225.02))
        bezier7Path.addCurve(to: CGPoint(x: 255.58, y: 317.48), controlPoint1: CGPoint(x: 369.71, y: 225.02), controlPoint2: CGPoint(x: 309.29, y: 297.96))
        bezier7Path.close()
        wallDark.setFill()
        bezier7Path.fill()

        ////// Bezier 7 Inner Shadow
        context.saveGState()
        context.clip(to: bezier7Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier7OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier7OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier7OpaqueShadow.setFill()
        bezier7Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 265.25, y: 385.51))
        bezier8Path.addCurve(to: CGPoint(x: 185.05, y: 512.84), controlPoint1: CGPoint(x: 229.03, y: 400.92), controlPoint2: CGPoint(x: 185.05, y: 382.26))
        bezier8Path.addCurve(to: CGPoint(x: 232.91, y: 646.67), controlPoint1: CGPoint(x: 185.05, y: 643.43), controlPoint2: CGPoint(x: 232.91, y: 577.73))
        bezier8Path.addCurve(to: CGPoint(x: 185.05, y: 791.04), controlPoint1: CGPoint(x: 232.91, y: 715.61), controlPoint2: CGPoint(x: 185.05, y: 732.64))
        bezier8Path.addCurve(to: CGPoint(x: 370.02, y: 872.96), controlPoint1: CGPoint(x: 185.05, y: 849.44), controlPoint2: CGPoint(x: 340.92, y: 909.45))
        bezier8Path.addCurve(to: CGPoint(x: 382.95, y: 497.43), controlPoint1: CGPoint(x: 399.12, y: 836.46), controlPoint2: CGPoint(x: 405.59, y: 551.78))
        bezier8Path.addCurve(to: CGPoint(x: 382.95, y: 312.51), controlPoint1: CGPoint(x: 360.32, y: 443.09), controlPoint2: CGPoint(x: 423.7, y: 312.51))
        bezier8Path.addCurve(to: CGPoint(x: 265.25, y: 385.51), controlPoint1: CGPoint(x: 342.21, y: 312.51), controlPoint2: CGPoint(x: 301.47, y: 370.1))
        bezier8Path.close()
        wallExtraDark.setFill()
        bezier8Path.fill()

        ////// Bezier 8 Inner Shadow
        context.saveGState()
        context.clip(to: bezier8Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier8OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier8OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier8OpaqueShadow.setFill()
        bezier8Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()




        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.translateBy(x: 837, y: 186.5)
        context.rotate(by: 90 * CGFloat.pi/180)
        context.scaleBy(x: -1, y: 1)



        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 212.3, y: 147.38))
        bezier9Path.addCurve(to: CGPoint(x: 0, y: 404.47), controlPoint1: CGPoint(x: 116.42, y: 178.49), controlPoint2: CGPoint(x: 0, y: 140.83))
        bezier9Path.addCurve(to: CGPoint(x: 126.7, y: 674.65), controlPoint1: CGPoint(x: 0, y: 668.1), controlPoint2: CGPoint(x: 126.7, y: 535.47))
        bezier9Path.addCurve(to: CGPoint(x: 0, y: 966.13), controlPoint1: CGPoint(x: 126.7, y: 813.84), controlPoint2: CGPoint(x: 0, y: 848.23))
        bezier9Path.addCurve(to: CGPoint(x: 489.67, y: 1131.52), controlPoint1: CGPoint(x: 0, y: 1084.03), controlPoint2: CGPoint(x: 412.62, y: 1205.21))
        bezier9Path.addCurve(to: CGPoint(x: 523.91, y: 373.35), controlPoint1: CGPoint(x: 566.71, y: 1057.83), controlPoint2: CGPoint(x: 583.83, y: 483.07))
        bezier9Path.addCurve(to: CGPoint(x: 523.91, y: 0), controlPoint1: CGPoint(x: 463.99, y: 263.64), controlPoint2: CGPoint(x: 631.77, y: 0))
        bezier9Path.addCurve(to: CGPoint(x: 212.3, y: 147.38), controlPoint1: CGPoint(x: 416.05, y: 0), controlPoint2: CGPoint(x: 308.18, y: 116.26))
        bezier9Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallLight.setFill()
        bezier9Path.fill()

        ////// Bezier 9 Inner Shadow
        context.saveGState()
        context.clip(to: bezier9Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow3.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier9OpaqueShadow = (shadow3.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow3.shadowOffset.width * resizedShadowScale, height: shadow3.shadowOffset.height * resizedShadowScale), blur: shadow3.shadowBlurRadius * resizedShadowScale, color: bezier9OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier9OpaqueShadow.setFill()
        bezier9Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()



        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 235.23, y: 270.79))
        bezier10Path.addCurve(to: CGPoint(x: 85.92, y: 459.92), controlPoint1: CGPoint(x: 167.8, y: 293.68), controlPoint2: CGPoint(x: 85.92, y: 265.98))
        bezier10Path.addCurve(to: CGPoint(x: 175.02, y: 658.67), controlPoint1: CGPoint(x: 85.92, y: 653.85), controlPoint2: CGPoint(x: 175.02, y: 556.28))
        bezier10Path.addCurve(to: CGPoint(x: 85.92, y: 873.09), controlPoint1: CGPoint(x: 175.02, y: 761.06), controlPoint2: CGPoint(x: 85.92, y: 786.36))
        bezier10Path.addCurve(to: CGPoint(x: 430.28, y: 994.75), controlPoint1: CGPoint(x: 85.92, y: 959.82), controlPoint2: CGPoint(x: 376.1, y: 1048.96))
        bezier10Path.addCurve(to: CGPoint(x: 454.36, y: 437.03), controlPoint1: CGPoint(x: 484.46, y: 940.55), controlPoint2: CGPoint(x: 496.5, y: 517.74))
        bezier10Path.addCurve(to: CGPoint(x: 454.36, y: 162.38), controlPoint1: CGPoint(x: 412.22, y: 356.32), controlPoint2: CGPoint(x: 530.21, y: 162.38))
        bezier10Path.addCurve(to: CGPoint(x: 235.23, y: 270.79), controlPoint1: CGPoint(x: 378.51, y: 162.38), controlPoint2: CGPoint(x: 302.65, y: 247.91))
        bezier10Path.close()
        wallMedium.setFill()
        bezier10Path.fill()

        ////// Bezier 10 Inner Shadow
        context.saveGState()
        context.clip(to: bezier10Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow3.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier10OpaqueShadow = (shadow3.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow3.shadowOffset.width * resizedShadowScale, height: shadow3.shadowOffset.height * resizedShadowScale), blur: shadow3.shadowBlurRadius * resizedShadowScale, color: bezier10OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier10OpaqueShadow.setFill()
        bezier10Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 255.58, y: 317.48))
        bezier11Path.addCurve(to: CGPoint(x: 136.66, y: 478.76), controlPoint1: CGPoint(x: 201.88, y: 336.99), controlPoint2: CGPoint(x: 136.66, y: 313.37))
        bezier11Path.addCurve(to: CGPoint(x: 207.63, y: 648.26), controlPoint1: CGPoint(x: 136.66, y: 644.15), controlPoint2: CGPoint(x: 207.63, y: 560.94))
        bezier11Path.addCurve(to: CGPoint(x: 136.66, y: 831.12), controlPoint1: CGPoint(x: 207.63, y: 735.58), controlPoint2: CGPoint(x: 136.66, y: 757.16))
        bezier11Path.addCurve(to: CGPoint(x: 410.95, y: 934.88), controlPoint1: CGPoint(x: 136.66, y: 905.09), controlPoint2: CGPoint(x: 367.8, y: 981.11))
        bezier11Path.addCurve(to: CGPoint(x: 430.14, y: 459.24), controlPoint1: CGPoint(x: 454.11, y: 888.65), controlPoint2: CGPoint(x: 463.7, y: 528.07))
        bezier11Path.addCurve(to: CGPoint(x: 430.14, y: 225.02), controlPoint1: CGPoint(x: 396.57, y: 390.41), controlPoint2: CGPoint(x: 490.56, y: 225.02))
        bezier11Path.addCurve(to: CGPoint(x: 255.58, y: 317.48), controlPoint1: CGPoint(x: 369.71, y: 225.02), controlPoint2: CGPoint(x: 309.29, y: 297.96))
        bezier11Path.close()
        wallDark.setFill()
        bezier11Path.fill()

        ////// Bezier 11 Inner Shadow
        context.saveGState()
        context.clip(to: bezier11Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow3.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier11OpaqueShadow = (shadow3.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow3.shadowOffset.width * resizedShadowScale, height: shadow3.shadowOffset.height * resizedShadowScale), blur: shadow3.shadowBlurRadius * resizedShadowScale, color: bezier11OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier11OpaqueShadow.setFill()
        bezier11Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 265.25, y: 385.51))
        bezier12Path.addCurve(to: CGPoint(x: 185.05, y: 512.84), controlPoint1: CGPoint(x: 229.03, y: 400.92), controlPoint2: CGPoint(x: 185.05, y: 382.26))
        bezier12Path.addCurve(to: CGPoint(x: 232.91, y: 646.67), controlPoint1: CGPoint(x: 185.05, y: 643.43), controlPoint2: CGPoint(x: 232.91, y: 577.73))
        bezier12Path.addCurve(to: CGPoint(x: 185.05, y: 791.04), controlPoint1: CGPoint(x: 232.91, y: 715.61), controlPoint2: CGPoint(x: 185.05, y: 732.64))
        bezier12Path.addCurve(to: CGPoint(x: 370.02, y: 872.96), controlPoint1: CGPoint(x: 185.05, y: 849.44), controlPoint2: CGPoint(x: 340.92, y: 909.45))
        bezier12Path.addCurve(to: CGPoint(x: 382.95, y: 497.43), controlPoint1: CGPoint(x: 399.12, y: 836.46), controlPoint2: CGPoint(x: 405.59, y: 551.78))
        bezier12Path.addCurve(to: CGPoint(x: 382.95, y: 312.51), controlPoint1: CGPoint(x: 360.32, y: 443.09), controlPoint2: CGPoint(x: 423.7, y: 312.51))
        bezier12Path.addCurve(to: CGPoint(x: 265.25, y: 385.51), controlPoint1: CGPoint(x: 342.21, y: 312.51), controlPoint2: CGPoint(x: 301.47, y: 370.1))
        bezier12Path.close()
        wallExtraDark.setFill()
        bezier12Path.fill()

        ////// Bezier 12 Inner Shadow
        context.saveGState()
        context.clip(to: bezier12Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((wallShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier12OpaqueShadow = (wallShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: bezier12OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier12OpaqueShadow.setFill()
        bezier12Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()




        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.translateBy(x: 209.8, y: 30.85)
        context.rotate(by: 103.15 * CGFloat.pi/180)



        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 255.62, y: -157.42))
        bezier13Path.addCurve(to: CGPoint(x: 102.35, y: 28.16), controlPoint1: CGPoint(x: 186.4, y: -134.96), controlPoint2: CGPoint(x: 102.35, y: -162.14))
        bezier13Path.addCurve(to: CGPoint(x: 193.82, y: 223.19), controlPoint1: CGPoint(x: 102.35, y: 218.47), controlPoint2: CGPoint(x: 193.82, y: 122.72))
        bezier13Path.addCurve(to: CGPoint(x: 102.35, y: 433.59), controlPoint1: CGPoint(x: 193.82, y: 323.67), controlPoint2: CGPoint(x: 102.35, y: 348.49))
        bezier13Path.addCurve(to: CGPoint(x: 455.86, y: 552.98), controlPoint1: CGPoint(x: 102.35, y: 518.7), controlPoint2: CGPoint(x: 400.23, y: 606.17))
        bezier13Path.addCurve(to: CGPoint(x: 480.58, y: 5.7), controlPoint1: CGPoint(x: 511.48, y: 499.79), controlPoint2: CGPoint(x: 523.84, y: 84.9))
        bezier13Path.addCurve(to: CGPoint(x: 480.58, y: -263.8), controlPoint1: CGPoint(x: 437.31, y: -73.49), controlPoint2: CGPoint(x: 558.45, y: -263.8))
        bezier13Path.addCurve(to: CGPoint(x: 255.62, y: -157.42), controlPoint1: CGPoint(x: 402.71, y: -263.8), controlPoint2: CGPoint(x: 324.84, y: -179.87))
        bezier13Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: wallShadow.shadowOffset.width * resizedShadowScale, height: wallShadow.shadowOffset.height * resizedShadowScale), blur: wallShadow.shadowBlurRadius * resizedShadowScale, color: (wallShadow.shadowColor as! UIColor).cgColor)
        wallLight.setFill()
        bezier13Path.fill()

        ////// Bezier 13 Inner Shadow
        context.saveGState()
        context.clip(to: bezier13Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier13OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier13OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier13OpaqueShadow.setFill()
        bezier13Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()



        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 272.17, y: -68.33))
        bezier14Path.addCurve(to: CGPoint(x: 164.38, y: 68.19), controlPoint1: CGPoint(x: 223.49, y: -51.81), controlPoint2: CGPoint(x: 164.38, y: -71.81))
        bezier14Path.addCurve(to: CGPoint(x: 228.71, y: 211.66), controlPoint1: CGPoint(x: 164.38, y: 208.18), controlPoint2: CGPoint(x: 228.71, y: 137.75))
        bezier14Path.addCurve(to: CGPoint(x: 164.38, y: 366.43), controlPoint1: CGPoint(x: 228.71, y: 285.57), controlPoint2: CGPoint(x: 164.38, y: 303.83))
        bezier14Path.addCurve(to: CGPoint(x: 412.98, y: 454.25), controlPoint1: CGPoint(x: 164.38, y: 429.04), controlPoint2: CGPoint(x: 373.87, y: 493.38))
        bezier14Path.addCurve(to: CGPoint(x: 430.37, y: 51.67), controlPoint1: CGPoint(x: 452.1, y: 415.13), controlPoint2: CGPoint(x: 460.79, y: 109.92))
        bezier14Path.addCurve(to: CGPoint(x: 430.37, y: -146.58), controlPoint1: CGPoint(x: 399.94, y: -6.59), controlPoint2: CGPoint(x: 485.13, y: -146.58))
        bezier14Path.addCurve(to: CGPoint(x: 272.17, y: -68.33), controlPoint1: CGPoint(x: 375.6, y: -146.58), controlPoint2: CGPoint(x: 320.84, y: -84.85))
        bezier14Path.close()
        wallMedium.setFill()
        bezier14Path.fill()

        ////// Bezier 14 Inner Shadow
        context.saveGState()
        context.clip(to: bezier14Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier14OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier14OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier14OpaqueShadow.setFill()
        bezier14Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 286.86, y: -34.63))
        bezier15Path.addCurve(to: CGPoint(x: 201.01, y: 81.79), controlPoint1: CGPoint(x: 248.09, y: -20.54), controlPoint2: CGPoint(x: 201.01, y: -37.6))
        bezier15Path.addCurve(to: CGPoint(x: 252.24, y: 204.14), controlPoint1: CGPoint(x: 201.01, y: 201.18), controlPoint2: CGPoint(x: 252.24, y: 141.11))
        bezier15Path.addCurve(to: CGPoint(x: 201.01, y: 336.14), controlPoint1: CGPoint(x: 252.24, y: 267.17), controlPoint2: CGPoint(x: 201.01, y: 282.75))
        bezier15Path.addCurve(to: CGPoint(x: 399.03, y: 411.03), controlPoint1: CGPoint(x: 201.01, y: 389.53), controlPoint2: CGPoint(x: 367.87, y: 444.4))
        bezier15Path.addCurve(to: CGPoint(x: 412.88, y: 67.7), controlPoint1: CGPoint(x: 430.19, y: 377.66), controlPoint2: CGPoint(x: 437.11, y: 117.38))
        bezier15Path.addCurve(to: CGPoint(x: 412.88, y: -101.37), controlPoint1: CGPoint(x: 388.64, y: 18.02), controlPoint2: CGPoint(x: 456.5, y: -101.37))
        bezier15Path.addCurve(to: CGPoint(x: 286.86, y: -34.63), controlPoint1: CGPoint(x: 369.26, y: -101.37), controlPoint2: CGPoint(x: 325.64, y: -48.72))
        bezier15Path.close()
        wallDark.setFill()
        bezier15Path.fill()

        ////// Bezier 15 Inner Shadow
        context.saveGState()
        context.clip(to: bezier15Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier15OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier15OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier15OpaqueShadow.setFill()
        bezier15Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 293.84, y: 14.48))
        bezier16Path.addCurve(to: CGPoint(x: 235.95, y: 106.39), controlPoint1: CGPoint(x: 267.7, y: 25.6), controlPoint2: CGPoint(x: 235.95, y: 12.13))
        bezier16Path.addCurve(to: CGPoint(x: 270.5, y: 202.99), controlPoint1: CGPoint(x: 235.95, y: 200.65), controlPoint2: CGPoint(x: 270.5, y: 153.23))
        bezier16Path.addCurve(to: CGPoint(x: 235.95, y: 307.2), controlPoint1: CGPoint(x: 270.5, y: 252.76), controlPoint2: CGPoint(x: 235.95, y: 265.05))
        bezier16Path.addCurve(to: CGPoint(x: 369.48, y: 366.34), controlPoint1: CGPoint(x: 235.95, y: 349.36), controlPoint2: CGPoint(x: 348.47, y: 392.68))
        bezier16Path.addCurve(to: CGPoint(x: 378.82, y: 95.27), controlPoint1: CGPoint(x: 390.49, y: 339.99), controlPoint2: CGPoint(x: 395.16, y: 134.5))
        bezier16Path.addCurve(to: CGPoint(x: 378.82, y: -38.21), controlPoint1: CGPoint(x: 362.47, y: 56.04), controlPoint2: CGPoint(x: 408.23, y: -38.21))
        bezier16Path.addCurve(to: CGPoint(x: 293.84, y: 14.48), controlPoint1: CGPoint(x: 349.4, y: -38.21), controlPoint2: CGPoint(x: 319.99, y: 3.35))
        bezier16Path.close()
        wallExtraDark.setFill()
        bezier16Path.fill()

        ////// Bezier 16 Inner Shadow
        context.saveGState()
        context.clip(to: bezier16Path.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier16OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: bezier16OpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier16OpaqueShadow.setFill()
        bezier16Path.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()




        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)


        //// Color Declarations
        let blazeWalls = UIColor(red: 1.000, green: 0.820, blue: 0.525, alpha: 1.000)
        let color11 = UIColor(red: 1.000, green: 0.894, blue: 0.722, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 700, height: 1200))
        blazeWalls.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let symbolRect = CGRect(x: 0, y: 0, width: 700, height: 1200)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TilesStyleKit.drawTreePattern(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, wallLight: color11)
        context.restoreGState()

        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSpace(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 700, height: 1200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 700, height: 1200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 700, y: resizedFrame.height / 1200)


        //// Color Declarations
        let nebulasColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let nebulasColor2 = UIColor(red: 0.766, green: 0.187, blue: 0.862, alpha: 0.346)
        let nebulas2Color = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 0.000)
        let nebulas2Color2 = UIColor(red: 0.220, green: 0.845, blue: 1.000, alpha: 0.612)
        let nebula3Color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.049)
        let nebula3Color2 = UIColor(red: 0.859, green: 0.183, blue: 0.374, alpha: 1.000)

        //// Gradient Declarations
        let nebulas = CGGradient(colorsSpace: nil, colors: [nebulasColor.cgColor, nebulasColor2.cgColor] as CFArray, locations: [0, 1])!
        let nebulas2 = CGGradient(colorsSpace: nil, colors: [nebulas2Color.cgColor, nebulas2Color2.cgColor] as CFArray, locations: [0, 1])!
        let nebula3 = CGGradient(colorsSpace: nil, colors: [nebula3Color.cgColor, nebula3Color2.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 700, height: 1200))
        UIColor.black.setFill()
        rectanglePath.fill()


        //// Polygon 19 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let polygon19Path = UIBezierPath()
        polygon19Path.move(to: CGPoint(x: 386, y: 391.5))
        polygon19Path.addLine(to: CGPoint(x: 567.87, y: 519.25))
        polygon19Path.addLine(to: CGPoint(x: 567.87, y: 774.75))
        polygon19Path.addLine(to: CGPoint(x: 386, y: 902.5))
        polygon19Path.addLine(to: CGPoint(x: 204.13, y: 774.75))
        polygon19Path.addLine(to: CGPoint(x: 204.13, y: 519.25))
        polygon19Path.close()
        context.saveGState()
        polygon19Path.addClip()
        context.drawRadialGradient(nebulas2,
            startCenter: CGPoint(x: -9.51, y: 637.59), startRadius: 47.85,
            endCenter: CGPoint(x: 386, y: 647), endRadius: 223.88,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Group
        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 145, y: 463))
        polygonPath.addLine(to: CGPoint(x: 371.03, y: 643))
        polygonPath.addLine(to: CGPoint(x: 371.03, y: 1003))
        polygonPath.addLine(to: CGPoint(x: 145, y: 1183))
        polygonPath.addLine(to: CGPoint(x: -81.03, y: 1003))
        polygonPath.addLine(to: CGPoint(x: -81.03, y: 643))
        polygonPath.close()
        context.saveGState()
        polygonPath.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 255.83, y: 749.26),
            end: CGPoint(x: -75.76, y: 792.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Polygon 2 Drawing
        context.saveGState()
        context.translateBy(x: -242.84, y: 741.51)
        context.rotate(by: -24.78 * CGFloat.pi/180)

        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 261, y: 0))
        polygon2Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon2Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon2Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon2Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon2Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon2Path.close()
        context.saveGState()
        polygon2Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Polygon 3 Drawing
        context.saveGState()
        context.translateBy(x: -164.11, y: 1147.07)
        context.rotate(by: -56.9 * CGFloat.pi/180)

        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 261, y: 0))
        polygon3Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon3Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon3Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon3Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon3Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon3Path.close()
        context.saveGState()
        polygon3Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()




        //// Group 2
        context.saveGState()
        context.translateBy(x: 1060.66, y: 37)
        context.rotate(by: 120.93 * CGFloat.pi/180)



        //// Polygon 4 Drawing
        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 387.84, y: 0))
        polygon4Path.addLine(to: CGPoint(x: 613.87, y: 180))
        polygon4Path.addLine(to: CGPoint(x: 613.87, y: 540))
        polygon4Path.addLine(to: CGPoint(x: 387.84, y: 720))
        polygon4Path.addLine(to: CGPoint(x: 161.81, y: 540))
        polygon4Path.addLine(to: CGPoint(x: 161.81, y: 180))
        polygon4Path.close()
        context.saveGState()
        polygon4Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 498.67, y: 286.26),
            end: CGPoint(x: 167.08, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Polygon 5 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 278.51)
        context.rotate(by: -24.78 * CGFloat.pi/180)

        let polygon5Path = UIBezierPath()
        polygon5Path.move(to: CGPoint(x: 261, y: 0))
        polygon5Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon5Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon5Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon5Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon5Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon5Path.close()
        context.saveGState()
        polygon5Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Polygon 6 Drawing
        context.saveGState()
        context.translateBy(x: 78.73, y: 684.07)
        context.rotate(by: -56.9 * CGFloat.pi/180)

        let polygon6Path = UIBezierPath()
        polygon6Path.move(to: CGPoint(x: 261, y: 0))
        polygon6Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon6Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon6Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon6Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon6Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon6Path.close()
        context.saveGState()
        polygon6Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()



        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.translateBy(x: 250.66, y: 1584)
        context.rotate(by: -113.4 * CGFloat.pi/180)



        //// Polygon 7 Drawing
        let polygon7Path = UIBezierPath()
        polygon7Path.move(to: CGPoint(x: 387.84, y: 0))
        polygon7Path.addLine(to: CGPoint(x: 613.87, y: 180))
        polygon7Path.addLine(to: CGPoint(x: 613.87, y: 540))
        polygon7Path.addLine(to: CGPoint(x: 387.84, y: 720))
        polygon7Path.addLine(to: CGPoint(x: 161.81, y: 540))
        polygon7Path.addLine(to: CGPoint(x: 161.81, y: 180))
        polygon7Path.close()
        context.saveGState()
        polygon7Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 498.67, y: 286.26),
            end: CGPoint(x: 167.08, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Polygon 8 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 278.51)
        context.rotate(by: -24.78 * CGFloat.pi/180)

        let polygon8Path = UIBezierPath()
        polygon8Path.move(to: CGPoint(x: 261, y: 0))
        polygon8Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon8Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon8Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon8Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon8Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon8Path.close()
        context.saveGState()
        polygon8Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Polygon 9 Drawing
        context.saveGState()
        context.translateBy(x: 78.73, y: 684.07)
        context.rotate(by: -56.9 * CGFloat.pi/180)

        let polygon9Path = UIBezierPath()
        polygon9Path.move(to: CGPoint(x: 261, y: 0))
        polygon9Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon9Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon9Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon9Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon9Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon9Path.close()
        context.saveGState()
        polygon9Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()



        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.translateBy(x: 167.16, y: 1386)
        context.rotate(by: -113.4 * CGFloat.pi/180)



        //// Polygon 10 Drawing
        let polygon10Path = UIBezierPath()
        polygon10Path.move(to: CGPoint(x: 387.84, y: 0))
        polygon10Path.addLine(to: CGPoint(x: 613.87, y: 180))
        polygon10Path.addLine(to: CGPoint(x: 613.87, y: 540))
        polygon10Path.addLine(to: CGPoint(x: 387.84, y: 720))
        polygon10Path.addLine(to: CGPoint(x: 161.81, y: 540))
        polygon10Path.addLine(to: CGPoint(x: 161.81, y: 180))
        polygon10Path.close()
        context.saveGState()
        polygon10Path.addClip()
        context.drawLinearGradient(nebulas2,
            start: CGPoint(x: 498.67, y: 286.26),
            end: CGPoint(x: 167.08, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Polygon 11 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 278.51)
        context.rotate(by: -24.78 * CGFloat.pi/180)

        let polygon11Path = UIBezierPath()
        polygon11Path.move(to: CGPoint(x: 261, y: 0))
        polygon11Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon11Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon11Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon11Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon11Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon11Path.close()
        context.saveGState()
        polygon11Path.addClip()
        context.drawLinearGradient(nebulas2,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Polygon 12 Drawing
        context.saveGState()
        context.translateBy(x: 78.73, y: 684.07)
        context.rotate(by: -56.9 * CGFloat.pi/180)

        let polygon12Path = UIBezierPath()
        polygon12Path.move(to: CGPoint(x: 261, y: 0))
        polygon12Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon12Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon12Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon12Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon12Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon12Path.close()
        context.saveGState()
        polygon12Path.addClip()
        context.drawLinearGradient(nebulas2,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()



        context.restoreGState()


        //// Group 5
        context.saveGState()
        context.translateBy(x: 770.66, y: -78.5)
        context.rotate(by: 88.97 * CGFloat.pi/180)



        //// Polygon 13 Drawing
        let polygon13Path = UIBezierPath()
        polygon13Path.move(to: CGPoint(x: 387.84, y: 0))
        polygon13Path.addLine(to: CGPoint(x: 613.87, y: 180))
        polygon13Path.addLine(to: CGPoint(x: 613.87, y: 540))
        polygon13Path.addLine(to: CGPoint(x: 387.84, y: 720))
        polygon13Path.addLine(to: CGPoint(x: 161.81, y: 540))
        polygon13Path.addLine(to: CGPoint(x: 161.81, y: 180))
        polygon13Path.close()
        context.saveGState()
        polygon13Path.addClip()
        context.drawLinearGradient(nebulas2,
            start: CGPoint(x: 498.67, y: 286.26),
            end: CGPoint(x: 167.08, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Polygon 14 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 278.51)
        context.rotate(by: -24.78 * CGFloat.pi/180)

        let polygon14Path = UIBezierPath()
        polygon14Path.move(to: CGPoint(x: 261, y: 0))
        polygon14Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon14Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon14Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon14Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon14Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon14Path.close()
        context.saveGState()
        polygon14Path.addClip()
        context.drawLinearGradient(nebulas2,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Polygon 15 Drawing
        context.saveGState()
        context.translateBy(x: 78.73, y: 684.07)
        context.rotate(by: -56.9 * CGFloat.pi/180)

        let polygon15Path = UIBezierPath()
        polygon15Path.move(to: CGPoint(x: 261, y: 0))
        polygon15Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon15Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon15Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon15Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon15Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon15Path.close()
        context.saveGState()
        polygon15Path.addClip()
        context.drawLinearGradient(nebulas2,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()



        context.restoreGState()


        //// Group 6
        context.saveGState()
        context.translateBy(x: 119.66, y: 30.5)
        context.rotate(by: 26.49 * CGFloat.pi/180)

        context.setAlpha(0.6)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Polygon 16 Drawing
        let polygon16Path = UIBezierPath()
        polygon16Path.move(to: CGPoint(x: 387.84, y: 0))
        polygon16Path.addLine(to: CGPoint(x: 613.87, y: 180))
        polygon16Path.addLine(to: CGPoint(x: 613.87, y: 540))
        polygon16Path.addLine(to: CGPoint(x: 387.84, y: 720))
        polygon16Path.addLine(to: CGPoint(x: 161.81, y: 540))
        polygon16Path.addLine(to: CGPoint(x: 161.81, y: 180))
        polygon16Path.close()
        context.saveGState()
        polygon16Path.addClip()
        context.drawLinearGradient(nebula3,
            start: CGPoint(x: 498.67, y: 286.26),
            end: CGPoint(x: 167.08, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Polygon 17 Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 278.51)
        context.rotate(by: -24.78 * CGFloat.pi/180)

        let polygon17Path = UIBezierPath()
        polygon17Path.move(to: CGPoint(x: 261, y: 0))
        polygon17Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon17Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon17Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon17Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon17Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon17Path.close()
        context.saveGState()
        polygon17Path.addClip()
        context.drawLinearGradient(nebula3,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Polygon 18 Drawing
        context.saveGState()
        context.translateBy(x: 78.73, y: 684.07)
        context.rotate(by: -56.9 * CGFloat.pi/180)

        let polygon18Path = UIBezierPath()
        polygon18Path.move(to: CGPoint(x: 261, y: 0))
        polygon18Path.addLine(to: CGPoint(x: 487.03, y: 180))
        polygon18Path.addLine(to: CGPoint(x: 487.03, y: 540))
        polygon18Path.addLine(to: CGPoint(x: 261, y: 720))
        polygon18Path.addLine(to: CGPoint(x: 34.97, y: 540))
        polygon18Path.addLine(to: CGPoint(x: 34.97, y: 180))
        polygon18Path.close()
        context.saveGState()
        polygon18Path.addClip()
        context.drawLinearGradient(nebulas,
            start: CGPoint(x: 371.83, y: 286.26),
            end: CGPoint(x: 40.24, y: 329.74),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIceShard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let color24 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// iceShard Drawing
        let iceShardPath = UIBezierPath()
        iceShardPath.move(to: CGPoint(x: 11, y: 4))
        iceShardPath.addCurve(to: CGPoint(x: 12.35, y: 10.57), controlPoint1: CGPoint(x: 11, y: 4), controlPoint2: CGPoint(x: 11.74, y: 7.59))
        iceShardPath.addCurve(to: CGPoint(x: 10.08, y: 14.5), controlPoint1: CGPoint(x: 11.6, y: 11.87), controlPoint2: CGPoint(x: 10.75, y: 13.34))
        iceShardPath.addLine(to: CGPoint(x: 8.83, y: 14.5))
        iceShardPath.addLine(to: CGPoint(x: 11, y: 4))
        iceShardPath.addLine(to: CGPoint(x: 11, y: 4))
        iceShardPath.close()
        color24.setFill()
        iceShardPath.fill()
        UIColor.black.setStroke()
        iceShardPath.lineWidth = 1
        iceShardPath.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class func imageOfHoleFlag(holeNumber: String = "9") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 113, height: 200), false, 0)
            TilesStyleKit.drawHoleFlag(holeNumber: holeNumber)

        let imageOfHoleFlag = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfHoleFlag
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
